From 10f45c24c0bdb90882665b4e6fb94004d4780088 Mon Sep 17 00:00:00 2001
From: Utkarsh Mishra <quic_utkarshm@quicnic.com>
Date: Thu, 7 Dec 2023 14:47:06 +0530
Subject: [PATCH] TF-changes-to-add-windows_arm64

---
 tensorflow/BUILD                              |     4 +-
 tensorflow/core/BUILD                         |    10 +-
 tensorflow/core/lib/gif/BUILD                 |     2 +-
 tensorflow/core/lib/jpeg/BUILD                |     2 +-
 tensorflow/core/util/BUILD                    |     2 +-
 tensorflow/lite/BUILD                         |     4 +-
 tensorflow/lite/build_def.bzl                 |    11 +-
 tensorflow/lite/delegates/nnapi/BUILD         |     6 +-
 tensorflow/lite/kernels/BUILD                 |     8 +-
 tensorflow/lite/kernels/internal/BUILD        |     2 +-
 tensorflow/lite/special_rules.bzl             |     2 +-
 tensorflow/tensorflow.bzl                     |    50 +-
 tensorflow/tools/proto_text/BUILD             |     2 +-
 tensorflow/tsl/BUILD                          |    15 +
 .../tsl/platform/default/build_config.bzl     |     9 +-
 tensorflow/tsl/platform/default/env_time.cc   |     9 +-
 .../tsl/platform/profile_utils/cpu_utils.h    |     2 +-
 tensorflow/tsl/tsl.bzl                        |    20 +-
 tensorflow/workspace0.bzl                     |     8 +-
 tensorflow/workspace1.bzl                     |    14 +-
 tensorflow/workspace2.bzl                     |     5 +-
 third_party/0001-Cpu_Info-Changes.patch       |    88 +
 third_party/0001-Xnn-Pack-Updated.patch       | 18894 ++++++++++++++++
 third_party/0001-nsync-changes.patch          |   126 +
 third_party/0001-pthreadpool-changes.patch    |    53 +
 third_party/farmhash/farmhash.BUILD           |     2 +-
 third_party/gif_fix_strtok_r.patch            |    14 +
 third_party/jpeg/jpeg.BUILD                   |    13 +-
 third_party/snappy.BUILD                      |    10 +-
 third_party/zlib.BUILD                        |     2 +-
 30 files changed, 19290 insertions(+), 99 deletions(-)
 create mode 100644 third_party/0001-Cpu_Info-Changes.patch
 create mode 100644 third_party/0001-Xnn-Pack-Updated.patch
 create mode 100644 third_party/0001-nsync-changes.patch
 create mode 100644 third_party/0001-pthreadpool-changes.patch

diff --git a/tensorflow/BUILD b/tensorflow/BUILD
index 202553cd531..7c0c4403574 100644
--- a/tensorflow/BUILD
+++ b/tensorflow/BUILD
@@ -391,7 +391,7 @@ config_setting(
 
 # TODO(jakeharmon): Remove in favor of TSL version
 config_setting(
-    name = "windows",
+    name = "windows_arm64",
     # Internal builds query the target OS.
     flag_values = if_google(
         {"//tools/cpp:cc_target_os": "windows"},
@@ -399,7 +399,7 @@ config_setting(
     ),
     # OSS builds query the CPU type.
     values = if_oss(
-        {"cpu": "x64_windows"},
+        {"cpu": "x64_arm64_windows"},
         {},
     ),
     visibility = ["//visibility:public"],
diff --git a/tensorflow/core/BUILD b/tensorflow/core/BUILD
index cf1fe084eba..aedacb1e53e 100644
--- a/tensorflow/core/BUILD
+++ b/tensorflow/core/BUILD
@@ -325,7 +325,7 @@ cc_library(
     ],
     copts = tf_copts(),
     linkopts = select({
-        "//tensorflow:windows": [],
+        "//tensorflow:windows_arm64": [],
         "//conditions:default": ["-lm"],
     }),
     visibility = ["//visibility:public"],
@@ -1253,7 +1253,7 @@ cc_library(
     copts = tf_copts(),
     linkopts = select({
         "//tensorflow:freebsd": [],
-        "//tensorflow:windows": [],
+        "//tensorflow:windows_arm64": [],
         "//tensorflow:android": [],
         "//conditions:default": [
             "-ldl",
@@ -1281,7 +1281,7 @@ cc_library(
     copts = tf_copts(),
     linkopts = select({
         "//tensorflow:freebsd": [],
-        "//tensorflow:windows": [],
+        "//tensorflow:windows_arm64": [],
         "//tensorflow:android": [],
         "//conditions:default": [
             "-ldl",
@@ -1515,7 +1515,7 @@ cc_library(
     copts = tf_copts(),
     linkopts = select({
         "//tensorflow:freebsd": [],
-        "//tensorflow:windows": [],
+        "//tensorflow:windows_arm64": [],
         "//conditions:default": [
             "-ldl",
         ],
@@ -1647,7 +1647,7 @@ tf_cuda_library(
     copts = tf_copts(),
     linkopts = select({
         "//tensorflow:freebsd": ["-lm"],
-        "//tensorflow:windows": [],
+        "//tensorflow:windows_arm64": [],
         "//conditions:default": [
             "-ldl",
             "-lm",
diff --git a/tensorflow/core/lib/gif/BUILD b/tensorflow/core/lib/gif/BUILD
index 575d7bc5ae5..eef1e032d2f 100644
--- a/tensorflow/core/lib/gif/BUILD
+++ b/tensorflow/core/lib/gif/BUILD
@@ -34,7 +34,7 @@ cc_library(
     copts = tf_copts(),
     linkopts = select({
         "//tensorflow:freebsd": [],
-        "//tensorflow:windows": [],
+        "//tensorflow:windows_arm64": [],
         "//conditions:default": ["-ldl"],
     }),
     deps = [
diff --git a/tensorflow/core/lib/jpeg/BUILD b/tensorflow/core/lib/jpeg/BUILD
index f7551c9f7e1..9c21902d50b 100644
--- a/tensorflow/core/lib/jpeg/BUILD
+++ b/tensorflow/core/lib/jpeg/BUILD
@@ -35,7 +35,7 @@ cc_library(
     copts = tf_copts(),
     linkopts = select({
         "//tensorflow:freebsd": [],
-        "//tensorflow:windows": [],
+        "//tensorflow:windows_arm64": [],
         "//conditions:default": ["-ldl"],
     }),
     deps = [
diff --git a/tensorflow/core/util/BUILD b/tensorflow/core/util/BUILD
index 11f8652f9db..d7e53ccf54f 100644
--- a/tensorflow/core/util/BUILD
+++ b/tensorflow/core/util/BUILD
@@ -729,7 +729,7 @@ tf_kernel_library(
     # allow multiple definitions when linking this.
     linkopts = select({
         "//tensorflow:macos": [],
-        "//tensorflow:windows": [],
+        "//tensorflow:windows_arm64": [],
         "//conditions:default": ["-Wl,-z,muldefs"],
     }),
     visibility = ["//tensorflow/core/kernels:friends"],
diff --git a/tensorflow/lite/BUILD b/tensorflow/lite/BUILD
index 72500e85ef1..b371a14d80a 100644
--- a/tensorflow/lite/BUILD
+++ b/tensorflow/lite/BUILD
@@ -421,7 +421,7 @@ cc_library(
         "//tensorflow:android": [
             "mmap_allocation.cc",
         ],
-        "//tensorflow:windows": [
+        "//tensorflow:windows_arm64": [
             "mmap_allocation_disabled.cc",
         ],
         ":fuchsia_mmap_disabled": [
@@ -1318,7 +1318,7 @@ tflite_cc_shared_object(
         "//tensorflow:macos": [
             "-Wl,-exported_symbols_list,$(location //tensorflow/lite:tflite_exported_symbols.lds)",
         ],
-        "//tensorflow:windows": [],
+        "//tensorflow:windows_arm64": [],
         "//conditions:default": [
             "-Wl,--version-script,$(location //tensorflow/lite:tflite_version_script.lds)",
         ],
diff --git a/tensorflow/lite/build_def.bzl b/tensorflow/lite/build_def.bzl
index 435e1a9e02f..3ee86e58ceb 100644
--- a/tensorflow/lite/build_def.bzl
+++ b/tensorflow/lite/build_def.bzl
@@ -28,7 +28,7 @@ def tflite_copts():
             "-msse4.2",
         ],
         clean_dep("//tensorflow:linux_x86_64_no_sse"): [],
-        clean_dep("//tensorflow:windows"): [
+        clean_dep("//tensorflow:windows_arm64"): [
             # copybara:uncomment_begin(no MSVC flags in google)
             # "-DTFL_COMPILE_LIBRARY",
             # "-Wno-sign-compare",
@@ -38,7 +38,6 @@ def tflite_copts():
             # copybara:comment_end
         ],
         "//conditions:default": [
-            "-Wno-sign-compare",
         ],
     }) + select({
         clean_dep("//tensorflow:optimized"): ["-O3"],
@@ -50,7 +49,7 @@ def tflite_copts():
         ],
         "//conditions:default": [],
     }) + select({
-        clean_dep("//tensorflow:windows"): [],
+        clean_dep("//tensorflow:windows_arm64"): [],
         "//conditions:default": [
             "-fno-exceptions",  # Exceptions are unused in TFLite.
         ],
@@ -73,7 +72,7 @@ def tflite_copts_warnings():
     # TODO(b/155906820): Include with `tflite_copts()` after validating clients.
 
     return select({
-        clean_dep("//tensorflow:windows"): [
+        clean_dep("//tensorflow:windows_arm64"): [
             # We run into trouble on Windows toolchains with warning flags,
             # as mentioned in the comments below on each flag.
             # We could be more aggressive in enabling supported warnings on each
@@ -206,7 +205,7 @@ def tflite_jni_binary(
             "-Wl,-exported_symbols_list,$(location {})".format(exported_symbols),
             "-Wl,-install_name,@rpath/" + name,
         ],
-        clean_dep("//tensorflow:windows"): [],
+        clean_dep("//tensorflow:windows_arm64"): [],
         "//conditions:default": [
             "-Wl,--version-script,$(location {})".format(linkscript),
             # copybara:uncomment_begin(google-only)
@@ -530,7 +529,7 @@ def tflite_custom_cc_library(
         ],
         copts = tflite_copts(),
         linkopts = select({
-            "//tensorflow:windows": [],
+            "//tensorflow:windows_arm64": [],
             "//conditions:default": ["-lm", "-ldl"],
         }),
         deps = depset([
diff --git a/tensorflow/lite/delegates/nnapi/BUILD b/tensorflow/lite/delegates/nnapi/BUILD
index 6bb146bb6e7..e94be5d65a3 100644
--- a/tensorflow/lite/delegates/nnapi/BUILD
+++ b/tensorflow/lite/delegates/nnapi/BUILD
@@ -17,7 +17,7 @@ cc_library(
         "//tensorflow:ios": [
             "nnapi_delegate_disabled.cc",
         ],
-        "//tensorflow:windows": [
+        "//tensorflow:windows_arm64": [
             "nnapi_delegate_disabled.cc",
         ],
         "//conditions:default": [
@@ -82,7 +82,7 @@ cc_library(
         "//tensorflow:ios": [
             "nnapi_delegate_disabled.cc",
         ],
-        "//tensorflow:windows": [
+        "//tensorflow:windows_arm64": [
             "nnapi_delegate_disabled.cc",
         ],
         "//conditions:default": [
@@ -144,7 +144,7 @@ cc_library(
         "//tensorflow:ios": [
             "-DNNAPI_DELEGATE_DISABLED",
         ],
-        "//tensorflow:windows": [
+        "//tensorflow:windows_arm64": [
             "-DNNAPI_DELEGATE_DISABLED",
         ],
         "//conditions:default": [],
diff --git a/tensorflow/lite/kernels/BUILD b/tensorflow/lite/kernels/BUILD
index 03902b8da48..a427a8d5bb4 100644
--- a/tensorflow/lite/kernels/BUILD
+++ b/tensorflow/lite/kernels/BUILD
@@ -106,7 +106,7 @@ EXTRA_EIGEN_COPTS = select({
         "-Wno-error=invalid-partial-specialization",
         "-Wno-error=reorder",
     ],
-    "//tensorflow:windows": [
+    "//tensorflow:windows_arm64": [
         # copybara:uncomment_begin(no MSVC flags in google)
         # "-DEIGEN_HAS_C99_MATH",
         # "-DEIGEN_AVOID_STL_ARRAY",
@@ -152,7 +152,7 @@ cc_library(
     ],
     hdrs = ["acceleration_test_util_internal.h"],
     linkopts = select({
-        "//tensorflow:windows": [],
+        "//tensorflow:windows_arm64": [],
         "//conditions:default": ["-lm"],
     }),
     deps = [
@@ -304,7 +304,7 @@ cc_test(
     size = "small",
     srcs = ["eigen_support_test.cc"],
     linkopts = select({
-        "//tensorflow:windows": [],
+        "//tensorflow:windows_arm64": [],
         "//conditions:default": ["-lm"],
     }),
     deps = [
@@ -519,7 +519,7 @@ cc_test(
     size = "small",
     srcs = ["kernel_util_test.cc"],
     linkopts = select({
-        "//tensorflow:windows": [],
+        "//tensorflow:windows_arm64": [],
         "//conditions:default": ["-lm"],
     }),
     tags = ["tflite_smoke_test"],
diff --git a/tensorflow/lite/kernels/internal/BUILD b/tensorflow/lite/kernels/internal/BUILD
index 3082f803a7d..0a4d8b019d5 100644
--- a/tensorflow/lite/kernels/internal/BUILD
+++ b/tensorflow/lite/kernels/internal/BUILD
@@ -542,7 +542,7 @@ cc_library(
     compatible_with = get_compatible_with_portable(),
     copts = tflite_copts(),
     linkopts = select({
-        "//tensorflow:windows": [],
+        "//tensorflow:windows_arm64": [],
         "//conditions:default": ["-lm"],
     }),
     deps = [
diff --git a/tensorflow/lite/special_rules.bzl b/tensorflow/lite/special_rules.bzl
index c13438ee4fd..5344ea7a7ca 100644
--- a/tensorflow/lite/special_rules.bzl
+++ b/tensorflow/lite/special_rules.bzl
@@ -97,7 +97,7 @@ def if_nnapi(supported, not_supported = [], supported_android = None):
         clean_dep("//tensorflow:emscripten"): not_supported,
         clean_dep("//tensorflow:ios"): not_supported,
         clean_dep("//tensorflow:macos"): not_supported,
-        clean_dep("//tensorflow:windows"): not_supported,
+        clean_dep("//tensorflow:windows_arm64"): not_supported,
         clean_dep("//tensorflow:android"): supported_android,
         "//conditions:default": supported,
     })
diff --git a/tensorflow/tensorflow.bzl b/tensorflow/tensorflow.bzl
index 9fa8c9d7628..b3530b40005 100644
--- a/tensorflow/tensorflow.bzl
+++ b/tensorflow/tensorflow.bzl
@@ -277,13 +277,13 @@ def if_not_mobile_or_arm_or_lgpl_restricted(a):
 
 def if_not_windows(a):
     return select({
-        clean_dep("//tensorflow:windows"): [],
+        clean_dep("//tensorflow:windows_arm64"): [],
         "//conditions:default": a,
     })
 
 def if_windows(a, otherwise = []):
     return select({
-        clean_dep("//tensorflow:windows"): a,
+        clean_dep("//tensorflow:windows_arm64"): a,
         "//conditions:default": otherwise,
     })
 
@@ -461,7 +461,7 @@ def tf_copts(
             clean_dep("//tensorflow:android"): android_copts,
             clean_dep("//tensorflow:emscripten"): [],
             clean_dep("//tensorflow:macos"): [],
-            clean_dep("//tensorflow:windows"): get_win_copts(is_external),
+            clean_dep("//tensorflow:windows_arm64"): get_win_copts(is_external),
             clean_dep("//tensorflow:ios"): [],
             clean_dep("//tensorflow:no_lgpl_deps"): ["-D__TENSORFLOW_NO_LGPL_DEPS__", "-pthread"],
             "//conditions:default": ["-pthread"],
@@ -602,7 +602,7 @@ def _rpath_linkopts(name):
             "-Wl,%s" % (_make_search_paths("@loader_path", levels_to_root),),
             "-Wl,-rename_section,__TEXT,text_env,__TEXT,__text",
         ],
-        clean_dep("//tensorflow:windows"): [],
+        clean_dep("//tensorflow:windows_arm64"): [],
         "//conditions:default": [
             "-Wl,%s" % (_make_search_paths("$$ORIGIN", levels_to_root),),
         ],
@@ -622,7 +622,7 @@ def _rpath_user_link_flags(name):
             "-Wl,%s" % (_make_search_paths("@loader_path", levels_to_root),),
             "-Wl,-rename_section,__TEXT,text_env,__TEXT,__text",
         ],
-        clean_dep("//tensorflow:windows"): [],
+        clean_dep("//tensorflow:windows_arm64"): [],
         "//conditions:default": [
             "-Wl,%s" % (_make_search_paths("$ORIGIN", levels_to_root),),
         ],
@@ -668,7 +668,7 @@ def tf_binary_pybind_deps():
                 "//tensorflow/python:_pywrap_tensorflow_internal_macos",
             ),
         ],
-        clean_dep("//tensorflow:windows"): [
+        clean_dep("//tensorflow:windows_arm64"): [
             clean_dep(
                 "//tensorflow/python:_pywrap_tensorflow_internal_windows",
             ),
@@ -689,7 +689,7 @@ def tf_shared_library_deps():
             clean_dep("//tensorflow:libtensorflow.%s.dylib" % VERSION),
         ],
         clean_dep("//tensorflow:macos"): [],
-        clean_dep("//tensorflow:windows"): [
+        clean_dep("//tensorflow:windows_arm64"): [
             clean_dep("//tensorflow:tensorflow.dll"),
             clean_dep("//tensorflow:tensorflow_dll_import_lib"),
         ],
@@ -814,7 +814,7 @@ def tf_cc_shared_object(
                 clean_dep("//tensorflow:macos"): [
                     "-Wl,-install_name,@rpath/" + soname,
                 ],
-                clean_dep("//tensorflow:windows"): [],
+                clean_dep("//tensorflow:windows_arm64"): [],
                 "//conditions:default": [
                     "-Wl,-soname," + soname,
                 ],
@@ -829,7 +829,7 @@ def tf_cc_shared_object(
         native.filegroup(
             name = name,
             srcs = select({
-                clean_dep("//tensorflow:windows"): [":%s.dll" % (name)],
+                clean_dep("//tensorflow:windows_arm64"): [":%s.dll" % (name)],
                 clean_dep("//tensorflow:macos"): [":lib%s%s.dylib" % (name, longsuffix)],
                 "//conditions:default": [":lib%s.so%s" % (name, longsuffix)],
             }),
@@ -871,7 +871,7 @@ def tf_cc_shared_library_opensource(
             clean_dep("//tensorflow:macos"): [
                 "-Wl,-install_name,@rpath/" + soname,
             ],
-            clean_dep("//tensorflow:windows"): [],
+            clean_dep("//tensorflow:windows_arm64"): [],
             "//conditions:default": [
                 "-Wl,-soname," + soname,
             ],
@@ -909,7 +909,7 @@ def tf_cc_shared_library_opensource(
         native.filegroup(
             name = name,
             srcs = select({
-                clean_dep("//tensorflow:windows"): [":%s" % get_versioned_shared_library_name_windows(name, soversion)],
+                clean_dep("//tensorflow:windows_arm64"): [":%s" % get_versioned_shared_library_name_windows(name, soversion)],
                 clean_dep("//tensorflow:macos"): [":%s" % get_versioned_shared_library_name_macos(name, soversion)],
                 "//conditions:default": [":%s" % get_versioned_shared_library_name_linux(name, soversion)],
             }),
@@ -1057,7 +1057,7 @@ def tf_cc_binary(
         native.filegroup(
             name = name,
             srcs = select({
-                "//tensorflow:windows": [":%s.dll" % name],
+                "//tensorflow:windows_arm64": [":%s.dll" % name],
                 "//tensorflow:macos": [":lib%s.dylib" % name],
                 "//conditions:default": [":lib%s.so" % name],
             }),
@@ -1081,7 +1081,7 @@ def tf_native_cc_binary(
         name = name,
         copts = copts,
         linkopts = select({
-            clean_dep("//tensorflow:windows"): [],
+            clean_dep("//tensorflow:windows_arm64"): [],
             clean_dep("//tensorflow:macos"): [
                 "-lm",
             ],
@@ -1517,7 +1517,7 @@ def tf_cc_test(
             clean_dep("//tensorflow:android"): [
                 "-pie",
             ],
-            clean_dep("//tensorflow:windows"): [],
+            clean_dep("//tensorflow:windows_arm64"): [],
             clean_dep("//tensorflow:macos"): [
                 "-lm",
             ],
@@ -1560,7 +1560,7 @@ def tf_cc_shared_test(
             clean_dep("//tensorflow:android"): [
                 "-pie",
             ],
-            clean_dep("//tensorflow:windows"): [],
+            clean_dep("//tensorflow:windows_arm64"): [],
             clean_dep("//tensorflow:macos"): [
                 "-lm",
             ],
@@ -1789,7 +1789,7 @@ def tf_cc_test_mkl(
                 clean_dep("//tensorflow:android"): [
                     "-pie",
                 ],
-                clean_dep("//tensorflow:windows"): [],
+                clean_dep("//tensorflow:windows_arm64"): [],
                 "//conditions:default": [
                     "-lpthread",
                     "-lm",
@@ -2272,7 +2272,7 @@ def tf_custom_op_library(
             "//conditions:default": [
                 "-lm",
             ],
-            clean_dep("//tensorflow:windows"): [],
+            clean_dep("//tensorflow:windows_arm64"): [],
             clean_dep("//tensorflow:macos"): [],
         }),
         **kwargs
@@ -2396,7 +2396,7 @@ def pywrap_tensorflow_macro_opensource(
             "-Wl,-w",
             "-Wl,-exported_symbols_list,$(location %s.lds)" % vscriptname,
         ],
-        clean_dep("//tensorflow:windows"): [],
+        clean_dep("//tensorflow:windows_arm64"): [],
         "//conditions:default": [
             "-Wl,--version-script",
             "$(location %s.lds)" % vscriptname,
@@ -2407,7 +2407,7 @@ def pywrap_tensorflow_macro_opensource(
     # This is needed so that libtensorflow_cc is included in the pip package.
     srcs += select({
         clean_dep("//tensorflow:macos"): [clean_dep("//tensorflow:libtensorflow_cc.%s.dylib" % VERSION_MAJOR)],
-        clean_dep("//tensorflow:windows"): [],
+        clean_dep("//tensorflow:windows_arm64"): [],
         "//conditions:default": [clean_dep("//tensorflow:libtensorflow_cc.so.%s" % VERSION_MAJOR)],
     })
 
@@ -2481,7 +2481,7 @@ def pywrap_tensorflow_macro_opensource(
         srcs = [":" + name + ".py"],
         srcs_version = "PY3",
         data = select({
-            clean_dep("//tensorflow:windows"): [
+            clean_dep("//tensorflow:windows_arm64"): [
                 ":" + cc_library_pyd_name,
                 ":ml_dtypes.so",
                 "//tensorflow/tsl/python/lib/core:ml_dtypes.so",
@@ -3064,7 +3064,7 @@ def pybind_extension_opensource(
                 "-fno-strict-aliasing",
                 "-fexceptions",
             ] + select({
-                clean_dep("//tensorflow:windows"): [],
+                clean_dep("//tensorflow:windows_arm64"): [],
                 "//conditions:default": [
                     "-fvisibility=hidden",
                 ],
@@ -3096,7 +3096,7 @@ def pybind_extension_opensource(
                     "-Wl,-w",
                     "-Wl,-exported_symbols_list,$(location %s)" % exported_symbols_file,
                 ],
-                clean_dep("//tensorflow:windows"): [],
+                clean_dep("//tensorflow:windows_arm64"): [],
                 "//conditions:default": [
                     "-Wl,--version-script",
                     "$(location %s)" % version_script_file,
@@ -3125,7 +3125,7 @@ def pybind_extension_opensource(
                 "-fno-strict-aliasing",
                 "-fexceptions",
             ] + select({
-                clean_dep("//tensorflow:windows"): [],
+                clean_dep("//tensorflow:windows_arm64"): [],
                 "//conditions:default": [
                     "-fvisibility=hidden",
                 ],
@@ -3137,7 +3137,7 @@ def pybind_extension_opensource(
                     "-Wl,-w",
                     "-Wl,-exported_symbols_list,$(location %s)" % exported_symbols_file,
                 ],
-                clean_dep("//tensorflow:windows"): [],
+                clean_dep("//tensorflow:windows_arm64"): [],
                 "//conditions:default": [
                     "-Wl,--version-script",
                     "$(location %s)" % version_script_file,
@@ -3181,7 +3181,7 @@ def pybind_extension_opensource(
     _plain_py_library(
         name = name,
         data = select({
-            clean_dep("//tensorflow:windows"): [pyd_file],
+            clean_dep("//tensorflow:windows_arm64"): [pyd_file],
             "//conditions:default": [so_file],
         }) + pytype_srcs,
         deps = pytype_deps,
diff --git a/tensorflow/tools/proto_text/BUILD b/tensorflow/tools/proto_text/BUILD
index b2998173b53..061be036ca2 100644
--- a/tensorflow/tools/proto_text/BUILD
+++ b/tensorflow/tools/proto_text/BUILD
@@ -48,7 +48,7 @@ cc_library(
     hdrs = ["gen_proto_text_functions_lib.h"],
     copts = if_ios(["-DGOOGLE_LOGGING"]),
     linkopts = select({
-        "//tensorflow:windows": [],
+        "//tensorflow:windows_arm64": [],
         "//tensorflow:macos": [
             "-lm",
             "-lpthread",
diff --git a/tensorflow/tsl/BUILD b/tensorflow/tsl/BUILD
index 076836bc541..60a0a344b66 100644
--- a/tensorflow/tsl/BUILD
+++ b/tensorflow/tsl/BUILD
@@ -192,6 +192,21 @@ config_setting(
     visibility = ["//visibility:public"],
 )
 
+config_setting(
+    name = "windows_arm64",
+    # Internal builds query the target OS.
+    flag_values = if_google(
+        {"//tools/cpp:cc_target_os": "windows_arm64"},
+        {},
+    ),
+    # OSS builds query the CPU type.
+    values = if_oss(
+        {"cpu": "x64_arm64_windows"},
+        {},
+    ),
+    visibility = ["//visibility:public"],
+)
+
 # TODO(jakeharmon): Remove equivalent from tensorflow/BUILD
 config_setting(
     name = "ios",
diff --git a/tensorflow/tsl/platform/default/build_config.bzl b/tensorflow/tsl/platform/default/build_config.bzl
index e2720d0eec0..96da9bf728c 100644
--- a/tensorflow/tsl/platform/default/build_config.bzl
+++ b/tensorflow/tsl/platform/default/build_config.bzl
@@ -510,9 +510,6 @@ def tf_proto_library_cc(
             ["@com_google_protobuf//:protobuf_headers"],
         ),
         copts = if_not_windows([
-            "-Wno-unknown-warning-option",
-            "-Wno-unused-but-set-variable",
-            "-Wno-sign-compare",
         ]),
         make_default_target_header_only = make_default_target_header_only,
         protoc = "@com_google_protobuf//:protoc",
@@ -665,7 +662,7 @@ def tf_additional_lib_hdrs():
         clean_dep("//tensorflow/tsl/platform/default:tracing_impl.h"),
         clean_dep("//tensorflow/tsl/platform/default:unbounded_work_queue.h"),
     ] + select({
-        clean_dep("//tensorflow/tsl:windows"): [
+        clean_dep("//tensorflow/tsl:windows_arm64"): [
             clean_dep("//tensorflow/tsl/platform/windows:intrinsics_port.h"),
             clean_dep("//tensorflow/tsl/platform/windows:stacktrace.h"),
             clean_dep("//tensorflow/tsl/platform/windows:subprocess.h"),
@@ -818,11 +815,11 @@ def tf_protobuf_compiler_deps():
 
 def tf_windows_aware_platform_deps(name):
     return select({
-        "//tensorflow/tsl:windows": [
+        "//tensorflow/tsl:windows_arm64": [
             "//tensorflow/tsl/platform/windows:" + name,
         ],
         "//conditions:default": [
-            "//tensorflow/tsl/platform/default:" + name,
+            "//tensorflow/tsl/platform/windows:" + name,
         ],
     })
 
diff --git a/tensorflow/tsl/platform/default/env_time.cc b/tensorflow/tsl/platform/default/env_time.cc
index 74c468c2b52..39cb3c994a1 100644
--- a/tensorflow/tsl/platform/default/env_time.cc
+++ b/tensorflow/tsl/platform/default/env_time.cc
@@ -15,7 +15,7 @@ limitations under the License.
 
 #include "tensorflow/tsl/platform/env_time.h"
 
-#include <sys/time.h>
+//#include <sys/time.h>
 #include <time.h>
 
 namespace tsl {
@@ -23,9 +23,10 @@ namespace tsl {
 /* static */
 uint64 EnvTime::NowNanos() {
   struct timespec ts;
-  clock_gettime(CLOCK_REALTIME, &ts);
-  return (static_cast<uint64>(ts.tv_sec) * kSecondsToNanos +
-          static_cast<uint64>(ts.tv_nsec));
+  //clock_gettime(CLOCK_REALTIME, &ts);
+  //return (static_cast<uint64>(ts.tv_sec) * kSecondsToNanos +
+  //        static_cast<uint64>(ts.tv_nsec));
+  return 0;
 }
 
 }  // namespace tsl
diff --git a/tensorflow/tsl/platform/profile_utils/cpu_utils.h b/tensorflow/tsl/platform/profile_utils/cpu_utils.h
index 87f25562da4..ea8750b3d29 100644
--- a/tensorflow/tsl/platform/profile_utils/cpu_utils.h
+++ b/tensorflow/tsl/platform/profile_utils/cpu_utils.h
@@ -60,7 +60,7 @@ class CpuUtils {
     return GetCpuUtilsHelperSingletonInstance().GetCurrentClockCycle();
 // ----------------------------------------------------------------
 #elif defined(_WIN32)
-    return __rdtsc();
+    return 0;
 // ----------------------------------------------------------------
 #elif defined(__x86_64__) || defined(__amd64__)
     uint64_t high, low;
diff --git a/tensorflow/tsl/tsl.bzl b/tensorflow/tsl/tsl.bzl
index 4d7d7c6720e..5ca7093516d 100644
--- a/tensorflow/tsl/tsl.bzl
+++ b/tensorflow/tsl/tsl.bzl
@@ -122,14 +122,14 @@ def if_macos(a, otherwise = []):
 
 def if_windows(a, otherwise = []):
     return select({
-        clean_dep("//tensorflow/tsl:windows"): a,
+        clean_dep("//tensorflow/tsl:windows_arm64"): a,
         "//conditions:default": otherwise,
     })
 
 def if_not_windows(a):
     return select({
-        clean_dep("//tensorflow/tsl:windows"): [],
-        "//conditions:default": a,
+        clean_dep("//tensorflow/tsl:windows_arm64"): [],
+        "//conditions:default": [],
     })
 
 def if_not_fuchsia(a):
@@ -185,7 +185,7 @@ def if_no_default_logger(a):
 def if_nccl(if_true, if_false = []):
     return select({
         clean_dep("//tensorflow/tsl:no_nccl_support"): if_false,
-        clean_dep("//tensorflow/tsl:windows"): if_false,
+        clean_dep("//tensorflow/tsl:windows_arm64"): if_false,
         "//conditions:default": if_true,
     })
 
@@ -270,7 +270,7 @@ def tsl_copts(
             clean_dep("//tensorflow/tsl:android"): android_copts,
             clean_dep("//tensorflow/tsl:emscripten"): [],
             clean_dep("//tensorflow/tsl:macos"): [],
-            clean_dep("//tensorflow/tsl:windows"): get_win_copts(is_external),
+            clean_dep("//tensorflow/tsl:windows_arm64"): get_win_copts(is_external),
             clean_dep("//tensorflow/tsl:ios"): [],
             clean_dep("//tensorflow/tsl:no_lgpl_deps"): ["-D__TENSORFLOW_NO_LGPL_DEPS__", "-pthread"],
             "//conditions:default": ["-pthread"],
@@ -607,7 +607,7 @@ def tsl_pybind_extension_opensource(
                 "-fno-strict-aliasing",
                 "-fexceptions",
             ] + select({
-                clean_dep("//tensorflow/tsl:windows"): [],
+                clean_dep("//tensorflow/tsl:windows_arm64"): [],
                 "//conditions:default": [
                     "-fvisibility=hidden",
                 ],
@@ -639,7 +639,7 @@ def tsl_pybind_extension_opensource(
                     "-Wl,-w",
                     "-Wl,-exported_symbols_list,$(location %s)" % exported_symbols_file,
                 ],
-                clean_dep("//tensorflow/tsl:windows"): [],
+                clean_dep("//tensorflow/tsl:windows_arm64"): [],
                 "//conditions:default": [
                     "-Wl,--version-script",
                     "$(location %s)" % version_script_file,
@@ -666,7 +666,7 @@ def tsl_pybind_extension_opensource(
                 "-fno-strict-aliasing",
                 "-fexceptions",
             ] + select({
-                clean_dep("//tensorflow/tsl:windows"): [],
+                clean_dep("//tensorflow/tsl:windows_arm64"): [],
                 "//conditions:default": [
                     "-fvisibility=hidden",
                 ],
@@ -678,7 +678,7 @@ def tsl_pybind_extension_opensource(
                     "-Wl,-w",
                     "-Wl,-exported_symbols_list,$(location %s)" % exported_symbols_file,
                 ],
-                clean_dep("//tensorflow/tsl:windows"): [],
+                clean_dep("//tensorflow/tsl:windows_arm64"): [],
                 "//conditions:default": [
                     "-Wl,--version-script",
                     "$(location %s)" % version_script_file,
@@ -722,7 +722,7 @@ def tsl_pybind_extension_opensource(
     native.py_library(
         name = name,
         data = select({
-            clean_dep("//tensorflow/tsl:windows"): [pyd_file],
+            clean_dep("//tensorflow/tsl:windows_arm64"): [pyd_file],
             "//conditions:default": [so_file],
         }) + pytype_srcs,
         deps = pytype_deps,
diff --git a/tensorflow/workspace0.bzl b/tensorflow/workspace0.bzl
index d8b53e1ef8b..8155bcf6369 100644
--- a/tensorflow/workspace0.bzl
+++ b/tensorflow/workspace0.bzl
@@ -1,6 +1,6 @@
 """TensorFlow workspace initialization. Consult the WORKSPACE on how to use it."""
 
-load("//third_party/googleapis:repository_rules.bzl", "config_googleapis")
+"""load("//third_party/googleapis:repository_rules.bzl", "config_googleapis")
 load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
 load("@bazel_toolchains//repositories:repositories.bzl", bazel_toolchains_repositories = "repositories")
 load("@build_bazel_rules_apple//apple:repositories.bzl", "apple_rules_dependencies")
@@ -9,7 +9,7 @@ load("@build_bazel_apple_support//lib:repositories.bzl", "apple_support_dependen
 load("@com_github_grpc_grpc//bazel:grpc_extra_deps.bzl", "grpc_extra_deps")
 load("@local_config_android//:android.bzl", "android_workspace")
 load("@rules_foreign_cc//foreign_cc:repositories.bzl", "rules_foreign_cc_dependencies")
-
+"""
 def _tf_bind():
     """Bind targets for some external repositories"""
     ##############################################################################
@@ -50,9 +50,10 @@ def _tf_bind():
         name = "six",
         actual = "@six_archive//:six",
     )
+    
 
 def workspace():
-    http_archive(
+    """http_archive(
         name = "inception_v1",
         build_file = "//:models.BUILD",
         sha256 = "7efe12a8363f09bc24d7b7a450304a15655a57a7751929b2c1593a71183bb105",
@@ -135,6 +136,7 @@ def workspace():
     grpc_extra_deps()
     rules_foreign_cc_dependencies()
     config_googleapis()
+    """
 
 # Alias so it can be loaded without assigning to a different symbol to prevent
 # shadowing previous loads and trigger a buildifier warning.
diff --git a/tensorflow/workspace1.bzl b/tensorflow/workspace1.bzl
index c74a2e13d82..11ca3451a63 100644
--- a/tensorflow/workspace1.bzl
+++ b/tensorflow/workspace1.bzl
@@ -1,21 +1,17 @@
 """TensorFlow workspace initialization. Consult the WORKSPACE on how to use it."""
 
-load("//third_party/android:android_configure.bzl", "android_configure")
+"""load("//third_party/android:android_configure.bzl", "android_configure")
 load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
 load("@com_github_grpc_grpc//bazel:grpc_deps.bzl", "grpc_deps")
 load("@com_google_benchmark//:bazel/benchmark_deps.bzl", "benchmark_deps")
 load("@io_bazel_rules_closure//closure:defs.bzl", "closure_repositories")
 load("@rules_cuda//cuda:dependencies.bzl", "rules_cuda_dependencies")
 load("@rules_pkg//:deps.bzl", "rules_pkg_dependencies")
-
+"""
 # buildifier: disable=unnamed-macro
 def workspace(with_rules_cc = True):
-    """Loads a set of TensorFlow dependencies. To be used in a WORKSPACE file.
 
-    Args:
-      with_rules_cc: whether to load and patch rules_cc repository.
-    """
-    native.register_toolchains("@local_config_python//:py_toolchain")
+    """native.register_toolchains("@local_config_python//:py_toolchain")
     rules_cuda_dependencies(with_rules_cc)
     rules_pkg_dependencies()
 
@@ -30,12 +26,14 @@ def workspace(with_rules_cc = True):
             "https://github.com/bazelbuild/bazel-toolchains/archive/8c717f8258cd5f6c7a45b97d974292755852b658.tar.gz",
         ],
     )
-
+    
     android_configure(name = "local_config_android")
 
     grpc_deps()
     benchmark_deps()
+    """
 
 # Alias so it can be loaded without assigning to a different symbol to prevent
 # shadowing previous loads and trigger a buildifier warning.
+
 tf_workspace1 = workspace
diff --git a/tensorflow/workspace2.bzl b/tensorflow/workspace2.bzl
index 7e9faa558a4..1684ff06c50 100644
--- a/tensorflow/workspace2.bzl
+++ b/tensorflow/workspace2.bzl
@@ -148,6 +148,7 @@ def _tf_repositories():
     tf_http_archive(
         name = "XNNPACK",
         sha256 = "c979b62e8b77af60dfd7567f22ade20d5a9d4d0888f8a2d60d155fc0d31b22ab",
+        patch_file = ["//third_party:0001-Xnn-Pack-Updated.patch"],
         strip_prefix = "XNNPACK-b9d4073a6913891ce9cbd8965c8d506075d2a45a",
         urls = tf_mirror_urls("https://github.com/google/XNNPACK/archive/b9d4073a6913891ce9cbd8965c8d506075d2a45a.zip"),
     )
@@ -163,6 +164,7 @@ def _tf_repositories():
     tf_http_archive(
         name = "pthreadpool",
         sha256 = "b96413b10dd8edaa4f6c0a60c6cf5ef55eebeef78164d5d69294c8173457f0ec",
+        patch_file = ["//third_party:0001-pthreadpool-changes.patch"],
         strip_prefix = "pthreadpool-b8374f80e42010941bda6c85b0e3f1a1bd77a1e0",
         urls = tf_mirror_urls("https://github.com/Maratyszcza/pthreadpool/archive/b8374f80e42010941bda6c85b0e3f1a1bd77a1e0.zip"),
     )
@@ -170,6 +172,7 @@ def _tf_repositories():
     tf_http_archive(
         name = "cpuinfo",
         strip_prefix = "cpuinfo-87d8234510367db49a65535021af5e1838a65ac2",
+        patch_file = ["//third_party:0001-Cpu_Info-Changes.patch"],
         sha256 = "609fc42c47482c1fc125dccac65e843f640e792540162581c4b7eb6ff81c826a",
         urls = tf_mirror_urls("https://github.com/pytorch/cpuinfo/archive/87d8234510367db49a65535021af5e1838a65ac2.zip"),
     )
@@ -482,7 +485,7 @@ def _tf_repositories():
 
     tf_http_archive(
         name = "nsync",
-        patch_file = ["//third_party:nsync.patch"],
+        patch_file = ["//third_party:nsync.patch", "//third_party:0001-nsync-changes.patch"],
         sha256 = "2be9dbfcce417c7abcc2aa6fee351cd4d292518d692577e74a2c6c05b049e442",
         strip_prefix = "nsync-1.25.0",
         system_build_file = "//third_party/systemlibs:nsync.BUILD",
diff --git a/third_party/0001-Cpu_Info-Changes.patch b/third_party/0001-Cpu_Info-Changes.patch
new file mode 100644
index 00000000000..07d0f58d357
--- /dev/null
+++ b/third_party/0001-Cpu_Info-Changes.patch
@@ -0,0 +1,88 @@
+From bd9d78f7c4f0094f1701aee4fab57fb501ff26c0 Mon Sep 17 00:00:00 2001
+From: Utkarsh Mishra <quic_utkarshm@quicnic.com>
+Date: Mon, 4 Dec 2023 16:51:46 +0530
+Subject: [PATCH] Cpu_Info Changes
+
+---
+ BUILD.bazel           | 7 +++++++
+ deps/clog/BUILD.bazel | 6 ++++++
+ include/cpuinfo.h     | 4 ++--
+ 3 files changed, 15 insertions(+), 2 deletions(-)
+
+diff --git a/BUILD.bazel b/BUILD.bazel
+index 231d18f..ccca25e 100644
+--- a/BUILD.bazel
++++ b/BUILD.bazel
+@@ -116,6 +116,7 @@ cc_library(
+         ":macos_x86_64": COMMON_SRCS + X86_SRCS + MACH_SRCS + MACH_X86_SRCS,
+         ":macos_x86_64_legacy": COMMON_SRCS + X86_SRCS + MACH_SRCS + MACH_X86_SRCS,
+         ":macos_arm64": COMMON_SRCS + MACH_SRCS + MACH_ARM_SRCS,
++        ":windows_arm64": COMMON_SRCS,
+         ":windows_x86_64": COMMON_SRCS + X86_SRCS + WINDOWS_X86_SRCS,
+         ":android_armv7": COMMON_SRCS + ARM_SRCS + LINUX_SRCS + LINUX_ARM32_SRCS + ANDROID_ARM_SRCS,
+         ":android_arm64": COMMON_SRCS + ARM_SRCS + LINUX_SRCS + LINUX_ARM64_SRCS + ANDROID_ARM_SRCS,
+@@ -137,6 +138,7 @@ cc_library(
+     }),
+     copts = select({
+         ":windows_x86_64": [],
++        ":windows_arm64": [],
+         "//conditions:default": C99OPTS,
+     }) + [
+         "-Iexternal/cpuinfo/include",
+@@ -262,6 +264,11 @@ config_setting(
+     values = {"cpu": "x64_windows"},
+ )
+ 
++config_setting(
++    name = "windows_arm64",
++    values = {"cpu": "x64_arm64_windows"},
++)
++
+ config_setting(
+     name = "android_armv7",
+     values = {
+diff --git a/deps/clog/BUILD.bazel b/deps/clog/BUILD.bazel
+index 7dc52ea..ad8736c 100644
+--- a/deps/clog/BUILD.bazel
++++ b/deps/clog/BUILD.bazel
+@@ -20,6 +20,7 @@ cc_library(
+     ],
+     copts = select({
+         ":windows": [],
++        ":windows_arm64": [],
+         "//conditions:default": ["-Wno-unused-result"],
+     }),
+     defines = select({
+@@ -49,6 +50,11 @@ config_setting(
+     values = {"cpu": "x64_windows"},
+ )
+ 
++config_setting(
++    name = "windows_arm64",
++    values = {"cpu": "x64_arm64_windows"},
++)
++
+ config_setting(
+     name = "macos_x86_64",
+     values = {
+diff --git a/include/cpuinfo.h b/include/cpuinfo.h
+index c46b65e..d5b9407 100644
+--- a/include/cpuinfo.h
++++ b/include/cpuinfo.h
+@@ -23,11 +23,11 @@
+ #endif
+ 
+ #if defined(__arm__) || defined(_M_ARM)
+-	#define CPUINFO_ARCH_ARM 1
++	#define CPUINFO_ARCH_ARM 0
+ #endif
+ 
+ #if defined(__aarch64__) || defined(_M_ARM64)
+-	#define CPUINFO_ARCH_ARM64 1
++	#define CPUINFO_ARCH_ARM64 0
+ #endif
+ 
+ #if defined(__PPC64__) || defined(__powerpc64__) || defined(_ARCH_PPC64)
+-- 
+2.42.0.windows.1
+
diff --git a/third_party/0001-Xnn-Pack-Updated.patch b/third_party/0001-Xnn-Pack-Updated.patch
new file mode 100644
index 00000000000..3fdb4a5ddcf
--- /dev/null
+++ b/third_party/0001-Xnn-Pack-Updated.patch
@@ -0,0 +1,18894 @@
+From ed89734c3270006856e25d81fc4f5e401a5f0949 Mon Sep 17 00:00:00 2001
+From: Utkarsh Mishra <utkarshm@qti.qualcomm.com>
+Date: Tue, 19 Dec 2023 14:50:10 +0530
+Subject: [PATCH] Xnn Pack Updated
+
+---
+ BUILD.bazel                       |    5 +
+ build_defs.bzl                    |    7 +
+ src/argmaxpool-config.c           |  212 +-
+ src/avgpool-config.c              |  324 +-
+ src/binary-elementwise-config.c   | 2148 ++++++-------
+ src/conv-hwc2chw-config.c         |  166 +-
+ src/dwconv-config.c               | 2530 +++++++--------
+ src/dwconv2d-chw-config.c         |  526 ++--
+ src/gavgpool-config.c             |  482 +--
+ src/gavgpool-cw-config.c          |  116 +-
+ src/gemm-config.c                 | 4812 ++++++++++++++---------------
+ src/ibilinear-chw-config.c        |  112 +-
+ src/ibilinear-config.c            |  312 +-
+ src/maxpool-config.c              |  356 +--
+ src/pavgpool-config.c             |  210 +-
+ src/prelu-config.c                |  216 +-
+ src/raddstoreexpminusmax-config.c |  162 +-
+ src/rmax-config.c                 |  144 +-
+ src/spmm-config.c                 |  262 +-
+ src/transpose-config.c            |  390 +--
+ src/unary-elementwise-config.c    | 4054 ++++++++++++------------
+ src/unpool-config.c               |   44 +-
+ src/vmulcaddc-config.c            |  180 +-
+ src/x8-lut-config.c               |  120 +-
+ src/xx-fill-config.c              |   62 +-
+ src/xx-pad-config.c               |   62 +-
+ 26 files changed, 9013 insertions(+), 9001 deletions(-)
+
+diff --git a/BUILD.bazel b/BUILD.bazel
+index 9719e8f87..cd5ae20cf 100644
+--- a/BUILD.bazel
++++ b/BUILD.bazel
+@@ -11565,6 +11565,11 @@ config_setting(
+     values = {"cpu": "x64_windows"},
+ )
+ 
++config_setting(
++    name = "windows_arm64",
++    values = {"cpu": "x64_arm64_windows"},
++)
++
+ config_setting(
+     name = "windows_x86_64_clang",
+     values = {
+diff --git a/build_defs.bzl b/build_defs.bzl
+index 01b436eb7..be0aaa762 100644
+--- a/build_defs.bzl
++++ b/build_defs.bzl
+@@ -143,6 +143,7 @@ def xnnpack_cc_library(
+             ":aarch64": aarch64_srcs,
+             ":riscv": riscv_srcs,
+             ":x86": x86_srcs,
++            ":windows_arm64": x86_srcs,
+             ":emscripten_wasm": wasm_srcs,
+             ":emscripten_wasmsimd": wasmsimd_srcs,
+             ":emscripten_wasmrelaxedsimd": wasmrelaxedsimd_srcs,
+@@ -164,6 +165,7 @@ def xnnpack_cc_library(
+             ":windows_x86_64_mingw": mingw_copts + gcc_x86_copts,
+             ":windows_x86_64_msys": msys_copts + gcc_x86_copts,
+             ":windows_x86_64": msvc_x86_64_copts,
++            ":windows_arm64": msvc_x86_64_copts,
+             ":android_armv7": aarch32_copts,
+             ":android_arm64": aarch64_copts,
+             ":android_x86": gcc_x86_copts,
+@@ -185,6 +187,7 @@ def xnnpack_cc_library(
+             ":windows_x86_64_mingw": gcc_copts,
+             ":windows_x86_64_msys": gcc_copts,
+             ":windows_x86_64": msvc_copts,
++            ":windows_arm64": msvc_copts,
+             "//conditions:default": gcc_copts,
+         }) + select({
+             ":optimized_build": optimized_copts,
+@@ -245,6 +248,7 @@ def xnnpack_aggregate_library(
+             ":aarch32": aarch32_deps,
+             ":aarch64": aarch64_deps,
+             ":x86": x86_deps,
++            ":windows_arm64": aarch64_deps,
+             ":emscripten_wasm": wasm_deps,
+             ":emscripten_wasmsimd": wasmsimd_deps,
+             ":emscripten_wasmrelaxedsimd": wasmrelaxedsimd_deps,
+@@ -290,6 +294,7 @@ def xnnpack_unit_test(name, srcs, copts = [], mingw_copts = [], msys_copts = [],
+                 ":windows_x86_64_mingw": ["-Wno-unused-function"],
+                 ":windows_x86_64_msys": ["-Wno-unused-function"],
+                 ":windows_x86_64": [],
++                ":windows_arm64": [],
+                 "//conditions:default": ["-Wno-unused-function"],
+             }) + copts,
+             linkopts = select({
+@@ -323,6 +328,7 @@ def xnnpack_unit_test(name, srcs, copts = [], mingw_copts = [], msys_copts = [],
+                 ":windows_x86_64_mingw": ["-Wno-unused-function"],
+                 ":windows_x86_64_msys": ["-Wno-unused-function"],
+                 ":windows_x86_64": [],
++                ":windows_arm64": [],
+                 "//conditions:default": ["-Wno-unused-function"],
+             }) + copts,
+             linkopts = select({
+@@ -390,6 +396,7 @@ def xnnpack_benchmark(name, srcs, copts = [], deps = [], tags = []):
+             ":windows_x86_64_mingw": ["-Wno-unused-function"],
+             ":windows_x86_64_msys": ["-Wno-unused-function"],
+             ":windows_x86_64": [],
++            ":windows_arm64": [],
+             "//conditions:default": ["-Wno-unused-function"],
+         }) + copts,
+         linkopts = select({
+diff --git a/src/argmaxpool-config.c b/src/argmaxpool-config.c
+index eacb571da..8561150b4 100644
+--- a/src/argmaxpool-config.c
++++ b/src/argmaxpool-config.c
+@@ -26,115 +26,115 @@ static struct xnn_argmaxpool_config f32_argmaxpool_config[XNN_MAX_F32_ARGMAXPOOL
+   static pthread_once_t init_guard_f32_argmaxpool = PTHREAD_ONCE_INIT;
+ #endif
+ 
+-static void init_f32_argmaxpool_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      f32_argmaxpool_config[0] = (struct xnn_argmaxpool_config) {
+-        .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_4x__neon_c4,
+-        .first_pass_tile_size = 4,
+-      };
+-      f32_argmaxpool_config[1] = (struct xnn_argmaxpool_config) {
+-        .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9x__neon_c4,
+-        .first_pass_tile_size = 9,
+-      };
+-      f32_argmaxpool_config[2] = (struct xnn_argmaxpool_config) {
+-        .mp = (xnn_argmaxpool_multipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9p8x__neon_c4,
+-        .first_pass_tile_size = 9,
+-        .remainder_pass_tile_size = 8,
+-      };
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_argmaxpool_config[0] = (struct xnn_argmaxpool_config) {
+-        .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_4x__scalar_c1,
+-        .first_pass_tile_size = 4,
+-      };
+-      f32_argmaxpool_config[1] = (struct xnn_argmaxpool_config) {
+-        .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9x__scalar_c1,
+-        .first_pass_tile_size = 9,
+-      };
+-      f32_argmaxpool_config[2] = (struct xnn_argmaxpool_config) {
+-        .mp = (xnn_argmaxpool_multipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9p8x__scalar_c1,
+-        .first_pass_tile_size = 9,
+-        .remainder_pass_tile_size = 8,
+-      };
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_argmaxpool_config[0] = (struct xnn_argmaxpool_config) {
+-      .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_4x__neon_c4,
+-      .first_pass_tile_size = 4,
+-    };
+-    f32_argmaxpool_config[1] = (struct xnn_argmaxpool_config) {
+-      .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9x__neon_c4,
+-      .first_pass_tile_size = 9,
+-    };
+-    f32_argmaxpool_config[2] = (struct xnn_argmaxpool_config) {
+-      .mp = (xnn_argmaxpool_multipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9p8x__neon_c4,
+-      .first_pass_tile_size = 9,
+-      .remainder_pass_tile_size = 8,
+-    };
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    f32_argmaxpool_config[0] = (struct xnn_argmaxpool_config) {
+-      .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_4x__sse2_c4,
+-      .first_pass_tile_size = 4,
+-    };
+-    f32_argmaxpool_config[1] = (struct xnn_argmaxpool_config) {
+-      .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9x__sse2_c4,
+-      .first_pass_tile_size = 9,
+-    };
+-    f32_argmaxpool_config[2] = (struct xnn_argmaxpool_config) {
+-      .mp = (xnn_argmaxpool_multipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9p8x__sse2_c4,
+-      .first_pass_tile_size = 9,
+-      .remainder_pass_tile_size = 8,
+-    };
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    f32_argmaxpool_config[0] = (struct xnn_argmaxpool_config) {
+-      .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_4x__wasmsimd_c4,
+-      .first_pass_tile_size = 4,
+-    };
+-    f32_argmaxpool_config[1] = (struct xnn_argmaxpool_config) {
+-      .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9x__wasmsimd_c4,
+-      .first_pass_tile_size = 9,
+-    };
+-    f32_argmaxpool_config[2] = (struct xnn_argmaxpool_config) {
+-      .mp = (xnn_argmaxpool_multipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9p8x__wasmsimd_c4,
+-      .first_pass_tile_size = 9,
+-      .remainder_pass_tile_size = 8,
+-    };
+-  #elif XNN_ARCH_WASM
+-    f32_argmaxpool_config[0] = (struct xnn_argmaxpool_config) {
+-      .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_4x__scalar_c1,
+-      .first_pass_tile_size = 4,
+-    };
+-    f32_argmaxpool_config[1] = (struct xnn_argmaxpool_config) {
+-      .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9x__scalar_c1,
+-      .first_pass_tile_size = 9,
+-    };
+-    f32_argmaxpool_config[2] = (struct xnn_argmaxpool_config) {
+-      .mp = (xnn_argmaxpool_multipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9p8x__scalar_c1,
+-      .first_pass_tile_size = 9,
+-      .remainder_pass_tile_size = 8,
+-    };
+-  #elif XNN_ARCH_RISCV
+-    f32_argmaxpool_config[0] = (struct xnn_argmaxpool_config) {
+-      .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_4x__scalar_c1,
+-      .first_pass_tile_size = 4,
+-    };
+-    f32_argmaxpool_config[1] = (struct xnn_argmaxpool_config) {
+-      .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9x__scalar_c1,
+-      .first_pass_tile_size = 9,
+-    };
+-    f32_argmaxpool_config[2] = (struct xnn_argmaxpool_config) {
+-      .mp = (xnn_argmaxpool_multipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9p8x__scalar_c1,
+-      .first_pass_tile_size = 9,
+-      .remainder_pass_tile_size = 8,
+-    };
+-  #endif
+-}
++// static void init_f32_argmaxpool_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       f32_argmaxpool_config[0] = (struct xnn_argmaxpool_config) {
++//         .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_4x__neon_c4,
++//         .first_pass_tile_size = 4,
++//       };
++//       f32_argmaxpool_config[1] = (struct xnn_argmaxpool_config) {
++//         .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9x__neon_c4,
++//         .first_pass_tile_size = 9,
++//       };
++//       f32_argmaxpool_config[2] = (struct xnn_argmaxpool_config) {
++//         .mp = (xnn_argmaxpool_multipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9p8x__neon_c4,
++//         .first_pass_tile_size = 9,
++//         .remainder_pass_tile_size = 8,
++//       };
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_argmaxpool_config[0] = (struct xnn_argmaxpool_config) {
++//         .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_4x__scalar_c1,
++//         .first_pass_tile_size = 4,
++//       };
++//       f32_argmaxpool_config[1] = (struct xnn_argmaxpool_config) {
++//         .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9x__scalar_c1,
++//         .first_pass_tile_size = 9,
++//       };
++//       f32_argmaxpool_config[2] = (struct xnn_argmaxpool_config) {
++//         .mp = (xnn_argmaxpool_multipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9p8x__scalar_c1,
++//         .first_pass_tile_size = 9,
++//         .remainder_pass_tile_size = 8,
++//       };
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_argmaxpool_config[0] = (struct xnn_argmaxpool_config) {
++//       .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_4x__neon_c4,
++//       .first_pass_tile_size = 4,
++//     };
++//     f32_argmaxpool_config[1] = (struct xnn_argmaxpool_config) {
++//       .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9x__neon_c4,
++//       .first_pass_tile_size = 9,
++//     };
++//     f32_argmaxpool_config[2] = (struct xnn_argmaxpool_config) {
++//       .mp = (xnn_argmaxpool_multipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9p8x__neon_c4,
++//       .first_pass_tile_size = 9,
++//       .remainder_pass_tile_size = 8,
++//     };
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     f32_argmaxpool_config[0] = (struct xnn_argmaxpool_config) {
++//       .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_4x__sse2_c4,
++//       .first_pass_tile_size = 4,
++//     };
++//     f32_argmaxpool_config[1] = (struct xnn_argmaxpool_config) {
++//       .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9x__sse2_c4,
++//       .first_pass_tile_size = 9,
++//     };
++//     f32_argmaxpool_config[2] = (struct xnn_argmaxpool_config) {
++//       .mp = (xnn_argmaxpool_multipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9p8x__sse2_c4,
++//       .first_pass_tile_size = 9,
++//       .remainder_pass_tile_size = 8,
++//     };
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     f32_argmaxpool_config[0] = (struct xnn_argmaxpool_config) {
++//       .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_4x__wasmsimd_c4,
++//       .first_pass_tile_size = 4,
++//     };
++//     f32_argmaxpool_config[1] = (struct xnn_argmaxpool_config) {
++//       .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9x__wasmsimd_c4,
++//       .first_pass_tile_size = 9,
++//     };
++//     f32_argmaxpool_config[2] = (struct xnn_argmaxpool_config) {
++//       .mp = (xnn_argmaxpool_multipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9p8x__wasmsimd_c4,
++//       .first_pass_tile_size = 9,
++//       .remainder_pass_tile_size = 8,
++//     };
++//   #elif XNN_ARCH_WASM
++//     f32_argmaxpool_config[0] = (struct xnn_argmaxpool_config) {
++//       .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_4x__scalar_c1,
++//       .first_pass_tile_size = 4,
++//     };
++//     f32_argmaxpool_config[1] = (struct xnn_argmaxpool_config) {
++//       .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9x__scalar_c1,
++//       .first_pass_tile_size = 9,
++//     };
++//     f32_argmaxpool_config[2] = (struct xnn_argmaxpool_config) {
++//       .mp = (xnn_argmaxpool_multipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9p8x__scalar_c1,
++//       .first_pass_tile_size = 9,
++//       .remainder_pass_tile_size = 8,
++//     };
++//   #elif XNN_ARCH_RISCV
++//     f32_argmaxpool_config[0] = (struct xnn_argmaxpool_config) {
++//       .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_4x__scalar_c1,
++//       .first_pass_tile_size = 4,
++//     };
++//     f32_argmaxpool_config[1] = (struct xnn_argmaxpool_config) {
++//       .up = (xnn_argmaxpool_unipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9x__scalar_c1,
++//       .first_pass_tile_size = 9,
++//     };
++//     f32_argmaxpool_config[2] = (struct xnn_argmaxpool_config) {
++//       .mp = (xnn_argmaxpool_multipass_ukernel_fn) xnn_f32_argmaxpool_ukernel_9p8x__scalar_c1,
++//       .first_pass_tile_size = 9,
++//       .remainder_pass_tile_size = 8,
++//     };
++//   #endif
++// }
+ 
+ #if XNN_PLATFORM_WINDOWS
+   static BOOL CALLBACK init_f32_argmaxpool_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_argmaxpool_config();
++    //init_f32_argmaxpool_config();
+     return TRUE;
+   }
+ #endif
+diff --git a/src/avgpool-config.c b/src/avgpool-config.c
+index 1fab6c073..a3a193f6b 100644
+--- a/src/avgpool-config.c
++++ b/src/avgpool-config.c
+@@ -33,181 +33,181 @@ static struct xnn_avgpool_config qu8_avgpool_config = {0};
+   static pthread_once_t init_guard_qu8_avgpool = PTHREAD_ONCE_INIT;
+ #endif
+ 
+-static void init_f16_avgpool_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_f16_avgpool_minmax_ukernel_9x__neonfp16arith_c8;
+-      f16_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_f16_avgpool_minmax_ukernel_9p8x__neonfp16arith_c8;
+-      f16_avgpool_config.init.f16 = xnn_init_f16_scaleminmax_fp16arith_params;
+-      f16_avgpool_config.primary_tile = 9;
+-      f16_avgpool_config.incremental_tile = 8;
+-      f16_avgpool_config.channel_tile = 8;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_f16_avgpool_minmax_ukernel_9x__neonfp16arith_c8;
+-      f16_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_f16_avgpool_minmax_ukernel_9p8x__neonfp16arith_c8;
+-      f16_avgpool_config.init.f16 = xnn_init_f16_scaleminmax_fp16arith_params;
+-      f16_avgpool_config.primary_tile = 9;
+-      f16_avgpool_config.incremental_tile = 8;
+-      f16_avgpool_config.channel_tile = 8;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx2) {
+-      f16_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_f16_avgpool_minmax_ukernel_9x__f16c_c8;
+-      f16_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_f16_avgpool_minmax_ukernel_9p8x__f16c_c8;
+-      f16_avgpool_config.init.f16 = xnn_init_f16_scaleminmax_avx_params;
+-      f16_avgpool_config.primary_tile = 9;
+-      f16_avgpool_config.incremental_tile = 8;
+-      f16_avgpool_config.channel_tile = 8;
+-    }
+-  #endif
+-}
++// static void init_f16_avgpool_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_f16_avgpool_minmax_ukernel_9x__neonfp16arith_c8;
++//       f16_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_f16_avgpool_minmax_ukernel_9p8x__neonfp16arith_c8;
++//       f16_avgpool_config.init.f16 = xnn_init_f16_scaleminmax_fp16arith_params;
++//       f16_avgpool_config.primary_tile = 9;
++//       f16_avgpool_config.incremental_tile = 8;
++//       f16_avgpool_config.channel_tile = 8;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_f16_avgpool_minmax_ukernel_9x__neonfp16arith_c8;
++//       f16_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_f16_avgpool_minmax_ukernel_9p8x__neonfp16arith_c8;
++//       f16_avgpool_config.init.f16 = xnn_init_f16_scaleminmax_fp16arith_params;
++//       f16_avgpool_config.primary_tile = 9;
++//       f16_avgpool_config.incremental_tile = 8;
++//       f16_avgpool_config.channel_tile = 8;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx2) {
++//       f16_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_f16_avgpool_minmax_ukernel_9x__f16c_c8;
++//       f16_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_f16_avgpool_minmax_ukernel_9p8x__f16c_c8;
++//       f16_avgpool_config.init.f16 = xnn_init_f16_scaleminmax_avx_params;
++//       f16_avgpool_config.primary_tile = 9;
++//       f16_avgpool_config.incremental_tile = 8;
++//       f16_avgpool_config.channel_tile = 8;
++//     }
++//   #endif
++// }
+ 
+-static void init_f32_avgpool_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      f32_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9x__neon_c4;
+-      f32_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9p8x__neon_c4;
+-      f32_avgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
+-      f32_avgpool_config.primary_tile = 9;
+-      f32_avgpool_config.incremental_tile = 8;
+-      f32_avgpool_config.channel_tile = 4;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9x__scalar_c1;
+-      f32_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9p8x__scalar_c1;
+-      f32_avgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
+-      f32_avgpool_config.primary_tile = 9;
+-      f32_avgpool_config.incremental_tile = 8;
+-      f32_avgpool_config.channel_tile = 1;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9x__neon_c4;
+-    f32_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9p8x__neon_c4;
+-    f32_avgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
+-    f32_avgpool_config.primary_tile = 9;
+-    f32_avgpool_config.incremental_tile = 8;
+-    f32_avgpool_config.channel_tile = 4;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    f32_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9x__sse_c4;
+-    f32_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9p8x__sse_c4;
+-    f32_avgpool_config.init.f32 = xnn_init_f32_scaleminmax_sse_params;
+-    f32_avgpool_config.primary_tile = 9;
+-    f32_avgpool_config.incremental_tile = 8;
+-    f32_avgpool_config.channel_tile = 4;
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      f32_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9x__wasmsimd_x86_c4;
+-      f32_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9p8x__wasmsimd_x86_c4;
+-      f32_avgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
+-      f32_avgpool_config.primary_tile = 9;
+-      f32_avgpool_config.incremental_tile = 8;
+-      f32_avgpool_config.channel_tile = 4;
+-    } else {
+-      f32_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9x__wasmsimd_arm_c4;
+-      f32_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9p8x__wasmsimd_arm_c4;
+-      f32_avgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
+-      f32_avgpool_config.primary_tile = 9;
+-      f32_avgpool_config.incremental_tile = 8;
+-      f32_avgpool_config.channel_tile = 4;
+-    }
+-  #elif XNN_ARCH_WASM
+-    f32_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9x__wasm_c1;
+-    f32_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9p8x__wasm_c1;
+-    f32_avgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
+-    f32_avgpool_config.primary_tile = 9;
+-    f32_avgpool_config.incremental_tile = 8;
+-    f32_avgpool_config.channel_tile = 1;
+-  #elif XNN_ARCH_RISCV
+-    f32_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9x__scalar_c1;
+-    f32_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9p8x__scalar_c1;
+-    f32_avgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
+-    f32_avgpool_config.primary_tile = 9;
+-    f32_avgpool_config.incremental_tile = 8;
+-    f32_avgpool_config.channel_tile = 1;
+-  #endif
+-}
++// static void init_f32_avgpool_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       f32_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9x__neon_c4;
++//       f32_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9p8x__neon_c4;
++//       f32_avgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
++//       f32_avgpool_config.primary_tile = 9;
++//       f32_avgpool_config.incremental_tile = 8;
++//       f32_avgpool_config.channel_tile = 4;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9x__scalar_c1;
++//       f32_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9p8x__scalar_c1;
++//       f32_avgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
++//       f32_avgpool_config.primary_tile = 9;
++//       f32_avgpool_config.incremental_tile = 8;
++//       f32_avgpool_config.channel_tile = 1;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9x__neon_c4;
++//     f32_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9p8x__neon_c4;
++//     f32_avgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
++//     f32_avgpool_config.primary_tile = 9;
++//     f32_avgpool_config.incremental_tile = 8;
++//     f32_avgpool_config.channel_tile = 4;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     f32_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9x__sse_c4;
++//     f32_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9p8x__sse_c4;
++//     f32_avgpool_config.init.f32 = xnn_init_f32_scaleminmax_sse_params;
++//     f32_avgpool_config.primary_tile = 9;
++//     f32_avgpool_config.incremental_tile = 8;
++//     f32_avgpool_config.channel_tile = 4;
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       f32_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9x__wasmsimd_x86_c4;
++//       f32_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9p8x__wasmsimd_x86_c4;
++//       f32_avgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
++//       f32_avgpool_config.primary_tile = 9;
++//       f32_avgpool_config.incremental_tile = 8;
++//       f32_avgpool_config.channel_tile = 4;
++//     } else {
++//       f32_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9x__wasmsimd_arm_c4;
++//       f32_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9p8x__wasmsimd_arm_c4;
++//       f32_avgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
++//       f32_avgpool_config.primary_tile = 9;
++//       f32_avgpool_config.incremental_tile = 8;
++//       f32_avgpool_config.channel_tile = 4;
++//     }
++//   #elif XNN_ARCH_WASM
++//     f32_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9x__wasm_c1;
++//     f32_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9p8x__wasm_c1;
++//     f32_avgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
++//     f32_avgpool_config.primary_tile = 9;
++//     f32_avgpool_config.incremental_tile = 8;
++//     f32_avgpool_config.channel_tile = 1;
++//   #elif XNN_ARCH_RISCV
++//     f32_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9x__scalar_c1;
++//     f32_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_f32_avgpool_minmax_ukernel_9p8x__scalar_c1;
++//     f32_avgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
++//     f32_avgpool_config.primary_tile = 9;
++//     f32_avgpool_config.incremental_tile = 8;
++//     f32_avgpool_config.channel_tile = 1;
++//   #endif
++// }
+ 
+-static void init_qu8_avgpool_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      qu8_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9x__neon_c8;
+-      qu8_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9p8x__neon_c8;
+-      qu8_avgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_fp32_neon_params;
+-      qu8_avgpool_config.primary_tile = 9;
+-      qu8_avgpool_config.incremental_tile = 8;
+-      qu8_avgpool_config.channel_tile = 8;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      qu8_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9x__scalar_imagic_c1;
+-      qu8_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9p8x__scalar_imagic_c1;
+-      qu8_avgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_fp32_scalar_imagic_params;
+-      qu8_avgpool_config.primary_tile = 9;
+-      qu8_avgpool_config.incremental_tile = 8;
+-      qu8_avgpool_config.channel_tile = 1;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    qu8_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9x__neon_c8;
+-    qu8_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9p8x__neon_c8;
+-    qu8_avgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_fp32_neon_params;
+-    qu8_avgpool_config.primary_tile = 9;
+-    qu8_avgpool_config.incremental_tile = 8;
+-    qu8_avgpool_config.channel_tile = 8;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    qu8_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9x__sse2_c8;
+-    qu8_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9p8x__sse2_c8;
+-    qu8_avgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_fp32_sse2_params;
+-    qu8_avgpool_config.primary_tile = 9;
+-    qu8_avgpool_config.incremental_tile = 8;
+-    qu8_avgpool_config.channel_tile = 8;
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    qu8_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9x__scalar_imagic_c1;
+-    qu8_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9p8x__scalar_imagic_c1;
+-    qu8_avgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_fp32_scalar_imagic_params;
+-    qu8_avgpool_config.primary_tile = 9;
+-    qu8_avgpool_config.incremental_tile = 8;
+-    qu8_avgpool_config.channel_tile = 1;
+-  #elif XNN_ARCH_WASM
+-    qu8_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9x__scalar_imagic_c1;
+-    qu8_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9p8x__scalar_imagic_c1;
+-    qu8_avgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_fp32_scalar_imagic_params;
+-    qu8_avgpool_config.primary_tile = 9;
+-    qu8_avgpool_config.incremental_tile = 8;
+-    qu8_avgpool_config.channel_tile = 1;
+-  #elif XNN_ARCH_RISCV
+-    qu8_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9x__scalar_imagic_c1;
+-    qu8_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9p8x__scalar_imagic_c1;
+-    qu8_avgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_fp32_scalar_imagic_params;
+-    qu8_avgpool_config.primary_tile = 9;
+-    qu8_avgpool_config.incremental_tile = 8;
+-    qu8_avgpool_config.channel_tile = 1;
+-  #endif
+-}
++// static void init_qu8_avgpool_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       qu8_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9x__neon_c8;
++//       qu8_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9p8x__neon_c8;
++//       qu8_avgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_fp32_neon_params;
++//       qu8_avgpool_config.primary_tile = 9;
++//       qu8_avgpool_config.incremental_tile = 8;
++//       qu8_avgpool_config.channel_tile = 8;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       qu8_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9x__scalar_imagic_c1;
++//       qu8_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9p8x__scalar_imagic_c1;
++//       qu8_avgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_fp32_scalar_imagic_params;
++//       qu8_avgpool_config.primary_tile = 9;
++//       qu8_avgpool_config.incremental_tile = 8;
++//       qu8_avgpool_config.channel_tile = 1;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     qu8_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9x__neon_c8;
++//     qu8_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9p8x__neon_c8;
++//     qu8_avgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_fp32_neon_params;
++//     qu8_avgpool_config.primary_tile = 9;
++//     qu8_avgpool_config.incremental_tile = 8;
++//     qu8_avgpool_config.channel_tile = 8;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     qu8_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9x__sse2_c8;
++//     qu8_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9p8x__sse2_c8;
++//     qu8_avgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_fp32_sse2_params;
++//     qu8_avgpool_config.primary_tile = 9;
++//     qu8_avgpool_config.incremental_tile = 8;
++//     qu8_avgpool_config.channel_tile = 8;
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     qu8_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9x__scalar_imagic_c1;
++//     qu8_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9p8x__scalar_imagic_c1;
++//     qu8_avgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_fp32_scalar_imagic_params;
++//     qu8_avgpool_config.primary_tile = 9;
++//     qu8_avgpool_config.incremental_tile = 8;
++//     qu8_avgpool_config.channel_tile = 1;
++//   #elif XNN_ARCH_WASM
++//     qu8_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9x__scalar_imagic_c1;
++//     qu8_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9p8x__scalar_imagic_c1;
++//     qu8_avgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_fp32_scalar_imagic_params;
++//     qu8_avgpool_config.primary_tile = 9;
++//     qu8_avgpool_config.incremental_tile = 8;
++//     qu8_avgpool_config.channel_tile = 1;
++//   #elif XNN_ARCH_RISCV
++//     qu8_avgpool_config.unipass = (xnn_avgpool_unipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9x__scalar_imagic_c1;
++//     qu8_avgpool_config.multipass = (xnn_avgpool_multipass_ukernel_fn) xnn_qu8_avgpool_minmax_fp32_ukernel_9p8x__scalar_imagic_c1;
++//     qu8_avgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_fp32_scalar_imagic_params;
++//     qu8_avgpool_config.primary_tile = 9;
++//     qu8_avgpool_config.incremental_tile = 8;
++//     qu8_avgpool_config.channel_tile = 1;
++//   #endif
++// }
+ 
+ #if XNN_PLATFORM_WINDOWS
+   static BOOL CALLBACK init_f16_avgpool_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_avgpool_config();
++    //init_f16_avgpool_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_avgpool_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_avgpool_config();
++    //init_f32_avgpool_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_qu8_avgpool_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_qu8_avgpool_config();
++    //init_qu8_avgpool_config();
+     return TRUE;
+   }
+ #endif
+diff --git a/src/binary-elementwise-config.c b/src/binary-elementwise-config.c
+index bc9906ab7..87f0eb9fa 100644
+--- a/src/binary-elementwise-config.c
++++ b/src/binary-elementwise-config.c
+@@ -82,1168 +82,1168 @@ static struct xnn_binary_elementwise_config qu8_vmul_config = {0};
+ #endif
+ 
+ 
+-static void init_f16_vadd_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vadd_minmax_ukernel__neonfp16arith_x16;
+-      f16_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vaddc_minmax_ukernel__neonfp16arith_x16;
+-      f16_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vaddc_minmax_ukernel__neonfp16arith_x16;
+-      f16_vadd_config.init.f16_minmax = xnn_init_f16_minmax_fp16arith_params;
+-      f16_vadd_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vadd_minmax_ukernel__neonfp16arith_x16;
+-      f16_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vaddc_minmax_ukernel__neonfp16arith_x16;
+-      f16_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vaddc_minmax_ukernel__neonfp16arith_x16;
+-      f16_vadd_config.init.f16_minmax = xnn_init_f16_minmax_fp16arith_params;
+-      f16_vadd_config.element_tile = 16;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx2) {
+-      f16_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vadd_minmax_ukernel__f16c_x16;
+-      f16_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vaddc_minmax_ukernel__f16c_x16;
+-      f16_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vaddc_minmax_ukernel__f16c_x16;
+-      f16_vadd_config.init.f16_minmax = xnn_init_f16_minmax_avx_params;
+-      f16_vadd_config.element_tile = 16;
+-    }
+-  #endif
+-}
++// static void init_f16_vadd_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vadd_minmax_ukernel__neonfp16arith_x16;
++//       f16_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vaddc_minmax_ukernel__neonfp16arith_x16;
++//       f16_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vaddc_minmax_ukernel__neonfp16arith_x16;
++//       f16_vadd_config.init.f16_minmax = xnn_init_f16_minmax_fp16arith_params;
++//       f16_vadd_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vadd_minmax_ukernel__neonfp16arith_x16;
++//       f16_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vaddc_minmax_ukernel__neonfp16arith_x16;
++//       f16_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vaddc_minmax_ukernel__neonfp16arith_x16;
++//       f16_vadd_config.init.f16_minmax = xnn_init_f16_minmax_fp16arith_params;
++//       f16_vadd_config.element_tile = 16;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx2) {
++//       f16_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vadd_minmax_ukernel__f16c_x16;
++//       f16_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vaddc_minmax_ukernel__f16c_x16;
++//       f16_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vaddc_minmax_ukernel__f16c_x16;
++//       f16_vadd_config.init.f16_minmax = xnn_init_f16_minmax_avx_params;
++//       f16_vadd_config.element_tile = 16;
++//     }
++//   #endif
++// }
+ 
+-static void init_f16_vdiv_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_vdiv_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vdiv_minmax_ukernel__fp16arith_x2;
+-      f16_vdiv_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vdivc_minmax_ukernel__fp16arith_x2;
+-      f16_vdiv_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vrdivc_minmax_ukernel__fp16arith_x2;
+-      f16_vdiv_config.init.f16_minmax = xnn_init_f16_minmax_fp16arith_params;
+-      f16_vdiv_config.element_tile = 2;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_vdiv_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vdiv_minmax_ukernel__aarch64_neonfp16arith_x8;
+-      f16_vdiv_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vdivc_minmax_ukernel__aarch64_neonfp16arith_x8;
+-      f16_vdiv_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vrdivc_minmax_ukernel__aarch64_neonfp16arith_x8;
+-      f16_vdiv_config.init.f16_minmax = xnn_init_f16_minmax_fp16arith_params;
+-      f16_vdiv_config.element_tile = 8;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx2) {
+-      f16_vdiv_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vdiv_minmax_ukernel__f16c_x8;
+-      f16_vdiv_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vdivc_minmax_ukernel__f16c_x8;
+-      f16_vdiv_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vrdivc_minmax_ukernel__f16c_x8;
+-      f16_vdiv_config.init.f16_minmax = xnn_init_f16_minmax_avx_params;
+-      f16_vdiv_config.element_tile = 8;
+-    }
+-  #endif
+-}
++// static void init_f16_vdiv_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_vdiv_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vdiv_minmax_ukernel__fp16arith_x2;
++//       f16_vdiv_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vdivc_minmax_ukernel__fp16arith_x2;
++//       f16_vdiv_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vrdivc_minmax_ukernel__fp16arith_x2;
++//       f16_vdiv_config.init.f16_minmax = xnn_init_f16_minmax_fp16arith_params;
++//       f16_vdiv_config.element_tile = 2;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_vdiv_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vdiv_minmax_ukernel__aarch64_neonfp16arith_x8;
++//       f16_vdiv_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vdivc_minmax_ukernel__aarch64_neonfp16arith_x8;
++//       f16_vdiv_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vrdivc_minmax_ukernel__aarch64_neonfp16arith_x8;
++//       f16_vdiv_config.init.f16_minmax = xnn_init_f16_minmax_fp16arith_params;
++//       f16_vdiv_config.element_tile = 8;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx2) {
++//       f16_vdiv_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vdiv_minmax_ukernel__f16c_x8;
++//       f16_vdiv_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vdivc_minmax_ukernel__f16c_x8;
++//       f16_vdiv_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vrdivc_minmax_ukernel__f16c_x8;
++//       f16_vdiv_config.init.f16_minmax = xnn_init_f16_minmax_avx_params;
++//       f16_vdiv_config.element_tile = 8;
++//     }
++//   #endif
++// }
+ 
+-static void init_f16_vmax_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_vmax_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmax_ukernel__neonfp16arith_x16;
+-      f16_vmax_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmaxc_ukernel__neonfp16arith_x16;
+-      f16_vmax_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmaxc_ukernel__neonfp16arith_x16;
+-      f16_vmax_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_vmax_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmax_ukernel__neonfp16arith_x16;
+-      f16_vmax_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmaxc_ukernel__neonfp16arith_x16;
+-      f16_vmax_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmaxc_ukernel__neonfp16arith_x16;
+-      f16_vmax_config.element_tile = 16;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx2) {
+-      f16_vmax_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmax_ukernel__f16c_x16;
+-      f16_vmax_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmaxc_ukernel__f16c_x16;
+-      f16_vmax_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmaxc_ukernel__f16c_x16;
+-      f16_vmax_config.element_tile = 16;
+-    }
+-  #endif
+-}
++// static void init_f16_vmax_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_vmax_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmax_ukernel__neonfp16arith_x16;
++//       f16_vmax_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmaxc_ukernel__neonfp16arith_x16;
++//       f16_vmax_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmaxc_ukernel__neonfp16arith_x16;
++//       f16_vmax_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_vmax_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmax_ukernel__neonfp16arith_x16;
++//       f16_vmax_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmaxc_ukernel__neonfp16arith_x16;
++//       f16_vmax_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmaxc_ukernel__neonfp16arith_x16;
++//       f16_vmax_config.element_tile = 16;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx2) {
++//       f16_vmax_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmax_ukernel__f16c_x16;
++//       f16_vmax_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmaxc_ukernel__f16c_x16;
++//       f16_vmax_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmaxc_ukernel__f16c_x16;
++//       f16_vmax_config.element_tile = 16;
++//     }
++//   #endif
++// }
+ 
+-static void init_f16_vmin_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_vmin_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmin_ukernel__neonfp16arith_x16;
+-      f16_vmin_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vminc_ukernel__neonfp16arith_x16;
+-      f16_vmin_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vminc_ukernel__neonfp16arith_x16;
+-      f16_vmin_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_vmin_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmin_ukernel__neonfp16arith_x16;
+-      f16_vmin_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vminc_ukernel__neonfp16arith_x16;
+-      f16_vmin_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vminc_ukernel__neonfp16arith_x16;
+-      f16_vmin_config.element_tile = 16;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx2) {
+-      f16_vmin_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmin_ukernel__f16c_x16;
+-      f16_vmin_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vminc_ukernel__f16c_x16;
+-      f16_vmin_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vminc_ukernel__f16c_x16;
+-      f16_vmin_config.element_tile = 16;
+-    }
+-  #endif
+-}
++// static void init_f16_vmin_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_vmin_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmin_ukernel__neonfp16arith_x16;
++//       f16_vmin_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vminc_ukernel__neonfp16arith_x16;
++//       f16_vmin_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vminc_ukernel__neonfp16arith_x16;
++//       f16_vmin_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_vmin_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmin_ukernel__neonfp16arith_x16;
++//       f16_vmin_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vminc_ukernel__neonfp16arith_x16;
++//       f16_vmin_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vminc_ukernel__neonfp16arith_x16;
++//       f16_vmin_config.element_tile = 16;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx2) {
++//       f16_vmin_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmin_ukernel__f16c_x16;
++//       f16_vmin_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vminc_ukernel__f16c_x16;
++//       f16_vmin_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vminc_ukernel__f16c_x16;
++//       f16_vmin_config.element_tile = 16;
++//     }
++//   #endif
++// }
+ 
+-static void init_f16_vmul_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmul_minmax_ukernel__neonfp16arith_x16;
+-      f16_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmulc_minmax_ukernel__neonfp16arith_x16;
+-      f16_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmulc_minmax_ukernel__neonfp16arith_x16;
+-      f16_vmul_config.init.f16_minmax = xnn_init_f16_minmax_fp16arith_params;
+-      f16_vmul_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmul_minmax_ukernel__neonfp16arith_x16;
+-      f16_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmulc_minmax_ukernel__neonfp16arith_x16;
+-      f16_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmulc_minmax_ukernel__neonfp16arith_x16;
+-      f16_vmul_config.init.f16_minmax = xnn_init_f16_minmax_fp16arith_params;
+-      f16_vmul_config.element_tile = 16;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx2) {
+-      f16_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmul_minmax_ukernel__f16c_x16;
+-      f16_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmulc_minmax_ukernel__f16c_x16;
+-      f16_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmulc_minmax_ukernel__f16c_x16;
+-      f16_vmul_config.init.f16_minmax = xnn_init_f16_minmax_avx_params;
+-      f16_vmul_config.element_tile = 16;
+-    }
+-  #endif
+-}
++// static void init_f16_vmul_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmul_minmax_ukernel__neonfp16arith_x16;
++//       f16_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmulc_minmax_ukernel__neonfp16arith_x16;
++//       f16_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmulc_minmax_ukernel__neonfp16arith_x16;
++//       f16_vmul_config.init.f16_minmax = xnn_init_f16_minmax_fp16arith_params;
++//       f16_vmul_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmul_minmax_ukernel__neonfp16arith_x16;
++//       f16_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmulc_minmax_ukernel__neonfp16arith_x16;
++//       f16_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmulc_minmax_ukernel__neonfp16arith_x16;
++//       f16_vmul_config.init.f16_minmax = xnn_init_f16_minmax_fp16arith_params;
++//       f16_vmul_config.element_tile = 16;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx2) {
++//       f16_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmul_minmax_ukernel__f16c_x16;
++//       f16_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmulc_minmax_ukernel__f16c_x16;
++//       f16_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vmulc_minmax_ukernel__f16c_x16;
++//       f16_vmul_config.init.f16_minmax = xnn_init_f16_minmax_avx_params;
++//       f16_vmul_config.element_tile = 16;
++//     }
++//   #endif
++// }
+ 
+-static void init_f16_vsub_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_vsub_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsub_minmax_ukernel__neonfp16arith_x16;
+-      f16_vsub_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsubc_minmax_ukernel__neonfp16arith_x16;
+-      f16_vsub_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vrsubc_minmax_ukernel__neonfp16arith_x16;
+-      f16_vsub_config.init.f16_minmax = xnn_init_f16_minmax_fp16arith_params;
+-      f16_vsub_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_vsub_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsub_minmax_ukernel__neonfp16arith_x16;
+-      f16_vsub_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsubc_minmax_ukernel__neonfp16arith_x16;
+-      f16_vsub_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vrsubc_minmax_ukernel__neonfp16arith_x16;
+-      f16_vsub_config.init.f16_minmax = xnn_init_f16_minmax_fp16arith_params;
+-      f16_vsub_config.element_tile = 16;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx2) {
+-      f16_vsub_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsub_minmax_ukernel__f16c_x16;
+-      f16_vsub_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsubc_minmax_ukernel__f16c_x16;
+-      f16_vsub_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vrsubc_minmax_ukernel__f16c_x16;
+-      f16_vsub_config.init.f16_minmax = xnn_init_f16_minmax_avx_params;
+-      f16_vsub_config.element_tile = 16;
+-    }
+-  #endif
+-}
++// static void init_f16_vsub_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_vsub_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsub_minmax_ukernel__neonfp16arith_x16;
++//       f16_vsub_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsubc_minmax_ukernel__neonfp16arith_x16;
++//       f16_vsub_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vrsubc_minmax_ukernel__neonfp16arith_x16;
++//       f16_vsub_config.init.f16_minmax = xnn_init_f16_minmax_fp16arith_params;
++//       f16_vsub_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_vsub_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsub_minmax_ukernel__neonfp16arith_x16;
++//       f16_vsub_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsubc_minmax_ukernel__neonfp16arith_x16;
++//       f16_vsub_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vrsubc_minmax_ukernel__neonfp16arith_x16;
++//       f16_vsub_config.init.f16_minmax = xnn_init_f16_minmax_fp16arith_params;
++//       f16_vsub_config.element_tile = 16;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx2) {
++//       f16_vsub_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsub_minmax_ukernel__f16c_x16;
++//       f16_vsub_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsubc_minmax_ukernel__f16c_x16;
++//       f16_vsub_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vrsubc_minmax_ukernel__f16c_x16;
++//       f16_vsub_config.init.f16_minmax = xnn_init_f16_minmax_avx_params;
++//       f16_vsub_config.element_tile = 16;
++//     }
++//   #endif
++// }
+ 
+-static void init_f16_vsqrdiff_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_vsqrdiff_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsqrdiff_ukernel__neonfp16arith_x16;
+-      f16_vsqrdiff_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsqrdiffc_ukernel__neonfp16arith_x16;
+-      f16_vsqrdiff_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsqrdiffc_ukernel__neonfp16arith_x16;
+-      f16_vsqrdiff_config.init.f16_minmax = xnn_init_f16_minmax_fp16arith_params;
+-      f16_vsqrdiff_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_vsqrdiff_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsqrdiff_ukernel__neonfp16arith_x16;
+-      f16_vsqrdiff_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsqrdiffc_ukernel__neonfp16arith_x16;
+-      f16_vsqrdiff_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsqrdiffc_ukernel__neonfp16arith_x16;
+-      f16_vsqrdiff_config.init.f16_minmax = xnn_init_f16_minmax_fp16arith_params;
+-      f16_vsqrdiff_config.element_tile = 16;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx2) {
+-      f16_vsqrdiff_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsqrdiff_ukernel__f16c_x16;
+-      f16_vsqrdiff_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsqrdiffc_ukernel__f16c_x16;
+-      f16_vsqrdiff_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsqrdiffc_ukernel__f16c_x16;
+-      f16_vsqrdiff_config.init.f16_minmax = xnn_init_f16_minmax_avx_params;
+-      f16_vsqrdiff_config.element_tile = 16;
+-    }
+-  #endif
+-}
++// static void init_f16_vsqrdiff_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_vsqrdiff_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsqrdiff_ukernel__neonfp16arith_x16;
++//       f16_vsqrdiff_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsqrdiffc_ukernel__neonfp16arith_x16;
++//       f16_vsqrdiff_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsqrdiffc_ukernel__neonfp16arith_x16;
++//       f16_vsqrdiff_config.init.f16_minmax = xnn_init_f16_minmax_fp16arith_params;
++//       f16_vsqrdiff_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_vsqrdiff_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsqrdiff_ukernel__neonfp16arith_x16;
++//       f16_vsqrdiff_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsqrdiffc_ukernel__neonfp16arith_x16;
++//       f16_vsqrdiff_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsqrdiffc_ukernel__neonfp16arith_x16;
++//       f16_vsqrdiff_config.init.f16_minmax = xnn_init_f16_minmax_fp16arith_params;
++//       f16_vsqrdiff_config.element_tile = 16;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx2) {
++//       f16_vsqrdiff_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsqrdiff_ukernel__f16c_x16;
++//       f16_vsqrdiff_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsqrdiffc_ukernel__f16c_x16;
++//       f16_vsqrdiff_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f16_vsqrdiffc_ukernel__f16c_x16;
++//       f16_vsqrdiff_config.init.f16_minmax = xnn_init_f16_minmax_avx_params;
++//       f16_vsqrdiff_config.element_tile = 16;
++//     }
++//   #endif
++// }
+ 
+-static void init_f32_vadd_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon){
+-      f32_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vadd_minmax_ukernel__neon_x8;
+-      f32_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__neon_x8;
+-      f32_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__neon_x8;
+-      f32_vadd_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-      f32_vadd_config.element_tile = 8;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vadd_minmax_ukernel__scalar_x8;
+-      f32_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__scalar_x8;
+-      f32_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__scalar_x8;
+-      f32_vadd_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-      f32_vadd_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vadd_minmax_ukernel__neon_x8;
+-    f32_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__neon_x8;
+-    f32_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__neon_x8;
+-    f32_vadd_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-    f32_vadd_config.element_tile = 8;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
+-      f32_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vadd_minmax_ukernel__avx512f_x32;
+-      f32_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__avx512f_x32;
+-      f32_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__avx512f_x32;
+-      f32_vadd_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-      f32_vadd_config.element_tile = 32;
+-    } else if (hardware_config->use_x86_avx) {
+-      f32_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vadd_minmax_ukernel__avx_x16;
+-      f32_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__avx_x16;
+-      f32_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__avx_x16;
+-      f32_vadd_config.init.f32_minmax = xnn_init_f32_minmax_avx_params;
+-      f32_vadd_config.element_tile = 16;
+-    } else {
+-      f32_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vadd_minmax_ukernel__sse_x8;
+-      f32_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__sse_x8;
+-      f32_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__sse_x8;
+-      f32_vadd_config.init.f32_minmax = xnn_init_f32_minmax_sse_params;
+-      f32_vadd_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      f32_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vadd_minmax_ukernel__wasmsimd_x86_x16;
+-      f32_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__wasmsimd_x86_x16;
+-      f32_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__wasmsimd_x86_x16;
+-      f32_vadd_config.linear.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vadd_ukernel__wasmsimd_x16;
+-      f32_vadd_config.linear.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_ukernel__wasmsimd_x16;
+-      f32_vadd_config.linear.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_ukernel__wasmsimd_x16;
+-      f32_vadd_config.init.f32_minmax = xnn_init_f32_minmax_wasmsimd_params;
+-      f32_vadd_config.element_tile = 16;
+-    } else {
+-      f32_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vadd_minmax_ukernel__wasmsimd_arm_x16;
+-      f32_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__wasmsimd_arm_x16;
+-      f32_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__wasmsimd_arm_x16;
+-      f32_vadd_config.linear.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vadd_ukernel__wasmsimd_x16;
+-      f32_vadd_config.linear.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_ukernel__wasmsimd_x16;
+-      f32_vadd_config.linear.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_ukernel__wasmsimd_x16;
+-      f32_vadd_config.init.f32_minmax = xnn_init_f32_minmax_wasmsimd_params;
+-      f32_vadd_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_WASM
+-    f32_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vadd_minmax_ukernel__wasm_x8;
+-    f32_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__wasm_x8;
+-    f32_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__wasm_x8;
+-    f32_vadd_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-    f32_vadd_config.element_tile = 8;
+-  #elif XNN_ARCH_RISCV
+-    f32_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vadd_minmax_ukernel__scalar_x8;
+-    f32_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__scalar_x8;
+-    f32_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__scalar_x8;
+-    f32_vadd_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-    f32_vadd_config.element_tile = 8;
+-  #else
+-    #error "Unsupported architecture"
+-  #endif
+-}
++// static void init_f32_vadd_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon){
++//       f32_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vadd_minmax_ukernel__neon_x8;
++//       f32_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__neon_x8;
++//       f32_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__neon_x8;
++//       f32_vadd_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//       f32_vadd_config.element_tile = 8;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vadd_minmax_ukernel__scalar_x8;
++//       f32_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__scalar_x8;
++//       f32_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__scalar_x8;
++//       f32_vadd_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//       f32_vadd_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vadd_minmax_ukernel__neon_x8;
++//     f32_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__neon_x8;
++//     f32_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__neon_x8;
++//     f32_vadd_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//     f32_vadd_config.element_tile = 8;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
++//       f32_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vadd_minmax_ukernel__avx512f_x32;
++//       f32_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__avx512f_x32;
++//       f32_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__avx512f_x32;
++//       f32_vadd_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//       f32_vadd_config.element_tile = 32;
++//     } else if (hardware_config->use_x86_avx) {
++//       f32_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vadd_minmax_ukernel__avx_x16;
++//       f32_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__avx_x16;
++//       f32_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__avx_x16;
++//       f32_vadd_config.init.f32_minmax = xnn_init_f32_minmax_avx_params;
++//       f32_vadd_config.element_tile = 16;
++//     } else {
++//       f32_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vadd_minmax_ukernel__sse_x8;
++//       f32_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__sse_x8;
++//       f32_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__sse_x8;
++//       f32_vadd_config.init.f32_minmax = xnn_init_f32_minmax_sse_params;
++//       f32_vadd_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       f32_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vadd_minmax_ukernel__wasmsimd_x86_x16;
++//       f32_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__wasmsimd_x86_x16;
++//       f32_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__wasmsimd_x86_x16;
++//       f32_vadd_config.linear.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vadd_ukernel__wasmsimd_x16;
++//       f32_vadd_config.linear.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_ukernel__wasmsimd_x16;
++//       f32_vadd_config.linear.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_ukernel__wasmsimd_x16;
++//       f32_vadd_config.init.f32_minmax = xnn_init_f32_minmax_wasmsimd_params;
++//       f32_vadd_config.element_tile = 16;
++//     } else {
++//       f32_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vadd_minmax_ukernel__wasmsimd_arm_x16;
++//       f32_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__wasmsimd_arm_x16;
++//       f32_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__wasmsimd_arm_x16;
++//       f32_vadd_config.linear.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vadd_ukernel__wasmsimd_x16;
++//       f32_vadd_config.linear.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_ukernel__wasmsimd_x16;
++//       f32_vadd_config.linear.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_ukernel__wasmsimd_x16;
++//       f32_vadd_config.init.f32_minmax = xnn_init_f32_minmax_wasmsimd_params;
++//       f32_vadd_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_WASM
++//     f32_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vadd_minmax_ukernel__wasm_x8;
++//     f32_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__wasm_x8;
++//     f32_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__wasm_x8;
++//     f32_vadd_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//     f32_vadd_config.element_tile = 8;
++//   #elif XNN_ARCH_RISCV
++//     f32_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vadd_minmax_ukernel__scalar_x8;
++//     f32_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__scalar_x8;
++//     f32_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vaddc_minmax_ukernel__scalar_x8;
++//     f32_vadd_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//     f32_vadd_config.element_tile = 8;
++//   #else
++//     #error "Unsupported architecture"
++//   #endif
++// }
+ 
+-static void init_f32_vdiv_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon){
+-      f32_vdiv_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdiv_minmax_ukernel__scalar_x2;
+-      f32_vdiv_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdivc_minmax_ukernel__scalar_x2;
+-      f32_vdiv_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrdivc_minmax_ukernel__scalar_x2;
+-      f32_vdiv_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-      f32_vdiv_config.element_tile = 2;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_vdiv_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdiv_minmax_ukernel__scalar_x2;
+-      f32_vdiv_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdivc_minmax_ukernel__scalar_x2;
+-      f32_vdiv_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrdivc_minmax_ukernel__scalar_x2;
+-      f32_vdiv_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-      f32_vdiv_config.element_tile = 2;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_vdiv_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdiv_minmax_ukernel__aarch64_neon_x8;
+-    f32_vdiv_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdivc_minmax_ukernel__aarch64_neon_x8;
+-    f32_vdiv_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrdivc_minmax_ukernel__aarch64_neon_x8;
+-    f32_vdiv_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-    f32_vdiv_config.element_tile = 8;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
+-      f32_vdiv_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdiv_minmax_ukernel__avx512f_x32;
+-      f32_vdiv_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdivc_minmax_ukernel__avx512f_x32;
+-      f32_vdiv_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrdivc_minmax_ukernel__avx512f_x32;
+-      f32_vdiv_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-      f32_vdiv_config.element_tile = 32;
+-    } else if (hardware_config->use_x86_avx) {
+-      f32_vdiv_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdiv_minmax_ukernel__avx_x16;
+-      f32_vdiv_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdivc_minmax_ukernel__avx_x16;
+-      f32_vdiv_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrdivc_minmax_ukernel__avx_x16;
+-      f32_vdiv_config.init.f32_minmax = xnn_init_f32_minmax_avx_params;
+-      f32_vdiv_config.element_tile = 16;
+-    } else {
+-      f32_vdiv_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdiv_minmax_ukernel__sse_x8;
+-      f32_vdiv_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdivc_minmax_ukernel__sse_x8;
+-      f32_vdiv_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrdivc_minmax_ukernel__sse_x8;
+-      f32_vdiv_config.init.f32_minmax = xnn_init_f32_minmax_sse_params;
+-      f32_vdiv_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      f32_vdiv_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdiv_minmax_ukernel__wasmsimd_x86_x16;
+-      f32_vdiv_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdivc_minmax_ukernel__wasmsimd_x86_x16;
+-      f32_vdiv_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrdivc_minmax_ukernel__wasmsimd_x86_x16;
+-      f32_vdiv_config.linear.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdiv_ukernel__wasmsimd_x16;
+-      f32_vdiv_config.linear.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdivc_ukernel__wasmsimd_x16;
+-      f32_vdiv_config.linear.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrdivc_ukernel__wasmsimd_x16;
+-      f32_vdiv_config.init.f32_minmax = xnn_init_f32_minmax_wasmsimd_params;
+-      f32_vdiv_config.element_tile = 16;
+-    } else {
+-      f32_vdiv_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdiv_minmax_ukernel__wasmsimd_arm_x16;
+-      f32_vdiv_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdivc_minmax_ukernel__wasmsimd_arm_x16;
+-      f32_vdiv_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrdivc_minmax_ukernel__wasmsimd_arm_x16;
+-      f32_vdiv_config.linear.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdiv_ukernel__wasmsimd_x16;
+-      f32_vdiv_config.linear.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdivc_ukernel__wasmsimd_x16;
+-      f32_vdiv_config.linear.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrdivc_ukernel__wasmsimd_x16;
+-      f32_vdiv_config.init.f32_minmax = xnn_init_f32_minmax_wasmsimd_params;
+-      f32_vdiv_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_WASM
+-    f32_vdiv_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdiv_minmax_ukernel__wasm_x8;
+-    f32_vdiv_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdivc_minmax_ukernel__wasm_x8;
+-    f32_vdiv_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrdivc_minmax_ukernel__wasm_x8;
+-    f32_vdiv_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-    f32_vdiv_config.element_tile = 8;
+-  #elif XNN_ARCH_RISCV
+-    f32_vdiv_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdiv_minmax_ukernel__scalar_x2;
+-    f32_vdiv_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdivc_minmax_ukernel__scalar_x2;
+-    f32_vdiv_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrdivc_minmax_ukernel__scalar_x2;
+-    f32_vdiv_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-    f32_vdiv_config.element_tile = 2;
+-  #else
+-    #error "Unsupported architecture"
+-  #endif
+-}
++// static void init_f32_vdiv_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon){
++//       f32_vdiv_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdiv_minmax_ukernel__scalar_x2;
++//       f32_vdiv_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdivc_minmax_ukernel__scalar_x2;
++//       f32_vdiv_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrdivc_minmax_ukernel__scalar_x2;
++//       f32_vdiv_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//       f32_vdiv_config.element_tile = 2;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_vdiv_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdiv_minmax_ukernel__scalar_x2;
++//       f32_vdiv_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdivc_minmax_ukernel__scalar_x2;
++//       f32_vdiv_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrdivc_minmax_ukernel__scalar_x2;
++//       f32_vdiv_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//       f32_vdiv_config.element_tile = 2;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_vdiv_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdiv_minmax_ukernel__aarch64_neon_x8;
++//     f32_vdiv_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdivc_minmax_ukernel__aarch64_neon_x8;
++//     f32_vdiv_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrdivc_minmax_ukernel__aarch64_neon_x8;
++//     f32_vdiv_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//     f32_vdiv_config.element_tile = 8;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
++//       f32_vdiv_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdiv_minmax_ukernel__avx512f_x32;
++//       f32_vdiv_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdivc_minmax_ukernel__avx512f_x32;
++//       f32_vdiv_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrdivc_minmax_ukernel__avx512f_x32;
++//       f32_vdiv_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//       f32_vdiv_config.element_tile = 32;
++//     } else if (hardware_config->use_x86_avx) {
++//       f32_vdiv_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdiv_minmax_ukernel__avx_x16;
++//       f32_vdiv_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdivc_minmax_ukernel__avx_x16;
++//       f32_vdiv_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrdivc_minmax_ukernel__avx_x16;
++//       f32_vdiv_config.init.f32_minmax = xnn_init_f32_minmax_avx_params;
++//       f32_vdiv_config.element_tile = 16;
++//     } else {
++//       f32_vdiv_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdiv_minmax_ukernel__sse_x8;
++//       f32_vdiv_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdivc_minmax_ukernel__sse_x8;
++//       f32_vdiv_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrdivc_minmax_ukernel__sse_x8;
++//       f32_vdiv_config.init.f32_minmax = xnn_init_f32_minmax_sse_params;
++//       f32_vdiv_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       f32_vdiv_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdiv_minmax_ukernel__wasmsimd_x86_x16;
++//       f32_vdiv_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdivc_minmax_ukernel__wasmsimd_x86_x16;
++//       f32_vdiv_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrdivc_minmax_ukernel__wasmsimd_x86_x16;
++//       f32_vdiv_config.linear.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdiv_ukernel__wasmsimd_x16;
++//       f32_vdiv_config.linear.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdivc_ukernel__wasmsimd_x16;
++//       f32_vdiv_config.linear.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrdivc_ukernel__wasmsimd_x16;
++//       f32_vdiv_config.init.f32_minmax = xnn_init_f32_minmax_wasmsimd_params;
++//       f32_vdiv_config.element_tile = 16;
++//     } else {
++//       f32_vdiv_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdiv_minmax_ukernel__wasmsimd_arm_x16;
++//       f32_vdiv_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdivc_minmax_ukernel__wasmsimd_arm_x16;
++//       f32_vdiv_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrdivc_minmax_ukernel__wasmsimd_arm_x16;
++//       f32_vdiv_config.linear.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdiv_ukernel__wasmsimd_x16;
++//       f32_vdiv_config.linear.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdivc_ukernel__wasmsimd_x16;
++//       f32_vdiv_config.linear.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrdivc_ukernel__wasmsimd_x16;
++//       f32_vdiv_config.init.f32_minmax = xnn_init_f32_minmax_wasmsimd_params;
++//       f32_vdiv_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_WASM
++//     f32_vdiv_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdiv_minmax_ukernel__wasm_x8;
++//     f32_vdiv_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdivc_minmax_ukernel__wasm_x8;
++//     f32_vdiv_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrdivc_minmax_ukernel__wasm_x8;
++//     f32_vdiv_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//     f32_vdiv_config.element_tile = 8;
++//   #elif XNN_ARCH_RISCV
++//     f32_vdiv_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdiv_minmax_ukernel__scalar_x2;
++//     f32_vdiv_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vdivc_minmax_ukernel__scalar_x2;
++//     f32_vdiv_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrdivc_minmax_ukernel__scalar_x2;
++//     f32_vdiv_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//     f32_vdiv_config.element_tile = 2;
++//   #else
++//     #error "Unsupported architecture"
++//   #endif
++// }
+ 
+-static void init_f32_vmax_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon){
+-      f32_vmax_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmax_ukernel__neon_x8;
+-      f32_vmax_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__neon_x8;
+-      f32_vmax_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__neon_x8;
+-      f32_vmax_config.element_tile = 8;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_vmax_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmax_ukernel__scalar_x8;
+-      f32_vmax_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__scalar_x8;
+-      f32_vmax_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__scalar_x8;
+-      f32_vmax_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_vmax_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmax_ukernel__neon_x8;
+-    f32_vmax_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__neon_x8;
+-    f32_vmax_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__neon_x8;
+-    f32_vmax_config.element_tile = 8;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
+-      f32_vmax_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmax_ukernel__avx512f_x32;
+-      f32_vmax_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__avx512f_x32;
+-      f32_vmax_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__avx512f_x32;
+-      f32_vmax_config.element_tile = 32;
+-    } else if (hardware_config->use_x86_avx) {
+-      f32_vmax_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmax_ukernel__avx_x16;
+-      f32_vmax_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__avx_x16;
+-      f32_vmax_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__avx_x16;
+-      f32_vmax_config.init.f32_default = xnn_init_f32_default_avx_params;
+-      f32_vmax_config.element_tile = 16;
+-    } else {
+-      f32_vmax_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmax_ukernel__sse_x8;
+-      f32_vmax_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__sse_x8;
+-      f32_vmax_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__sse_x8;
+-      f32_vmax_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      f32_vmax_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmax_ukernel__wasmsimd_x86_x16;
+-      f32_vmax_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__wasmsimd_x86_x16;
+-      f32_vmax_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__wasmsimd_x86_x16;
+-      f32_vmax_config.element_tile = 16;
+-    } else {
+-      f32_vmax_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmax_ukernel__wasmsimd_arm_x16;
+-      f32_vmax_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__wasmsimd_arm_x16;
+-      f32_vmax_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__wasmsimd_arm_x16;
+-      f32_vmax_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_WASM
+-    f32_vmax_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmax_ukernel__wasm_x8;
+-    f32_vmax_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__wasm_x8;
+-    f32_vmax_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__wasm_x8;
+-    f32_vmax_config.element_tile = 8;
+-  #elif XNN_ARCH_RISCV
+-    f32_vmax_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmax_ukernel__scalar_x8;
+-    f32_vmax_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__scalar_x8;
+-    f32_vmax_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__scalar_x8;
+-    f32_vmax_config.element_tile = 8;
+-  #else
+-    #error "Unsupported architecture"
+-  #endif
+-}
++// static void init_f32_vmax_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon){
++//       f32_vmax_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmax_ukernel__neon_x8;
++//       f32_vmax_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__neon_x8;
++//       f32_vmax_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__neon_x8;
++//       f32_vmax_config.element_tile = 8;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_vmax_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmax_ukernel__scalar_x8;
++//       f32_vmax_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__scalar_x8;
++//       f32_vmax_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__scalar_x8;
++//       f32_vmax_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_vmax_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmax_ukernel__neon_x8;
++//     f32_vmax_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__neon_x8;
++//     f32_vmax_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__neon_x8;
++//     f32_vmax_config.element_tile = 8;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
++//       f32_vmax_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmax_ukernel__avx512f_x32;
++//       f32_vmax_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__avx512f_x32;
++//       f32_vmax_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__avx512f_x32;
++//       f32_vmax_config.element_tile = 32;
++//     } else if (hardware_config->use_x86_avx) {
++//       f32_vmax_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmax_ukernel__avx_x16;
++//       f32_vmax_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__avx_x16;
++//       f32_vmax_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__avx_x16;
++//       f32_vmax_config.init.f32_default = xnn_init_f32_default_avx_params;
++//       f32_vmax_config.element_tile = 16;
++//     } else {
++//       f32_vmax_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmax_ukernel__sse_x8;
++//       f32_vmax_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__sse_x8;
++//       f32_vmax_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__sse_x8;
++//       f32_vmax_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       f32_vmax_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmax_ukernel__wasmsimd_x86_x16;
++//       f32_vmax_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__wasmsimd_x86_x16;
++//       f32_vmax_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__wasmsimd_x86_x16;
++//       f32_vmax_config.element_tile = 16;
++//     } else {
++//       f32_vmax_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmax_ukernel__wasmsimd_arm_x16;
++//       f32_vmax_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__wasmsimd_arm_x16;
++//       f32_vmax_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__wasmsimd_arm_x16;
++//       f32_vmax_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_WASM
++//     f32_vmax_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmax_ukernel__wasm_x8;
++//     f32_vmax_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__wasm_x8;
++//     f32_vmax_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__wasm_x8;
++//     f32_vmax_config.element_tile = 8;
++//   #elif XNN_ARCH_RISCV
++//     f32_vmax_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmax_ukernel__scalar_x8;
++//     f32_vmax_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__scalar_x8;
++//     f32_vmax_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmaxc_ukernel__scalar_x8;
++//     f32_vmax_config.element_tile = 8;
++//   #else
++//     #error "Unsupported architecture"
++//   #endif
++// }
+ 
+-static void init_f32_vmin_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon){
+-      f32_vmin_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmin_ukernel__neon_x8;
+-      f32_vmin_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__neon_x8;
+-      f32_vmin_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__neon_x8;
+-      f32_vmin_config.element_tile = 8;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_vmin_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmin_ukernel__scalar_x8;
+-      f32_vmin_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__scalar_x8;
+-      f32_vmin_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__scalar_x8;
+-      f32_vmin_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_vmin_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmin_ukernel__neon_x8;
+-    f32_vmin_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__neon_x8;
+-    f32_vmin_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__neon_x8;
+-    f32_vmin_config.element_tile = 8;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
+-      f32_vmin_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmin_ukernel__avx512f_x32;
+-      f32_vmin_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__avx512f_x32;
+-      f32_vmin_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__avx512f_x32;
+-      f32_vmin_config.element_tile = 32;
+-    } else if (hardware_config->use_x86_avx) {
+-      f32_vmin_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmin_ukernel__avx_x16;
+-      f32_vmin_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__avx_x16;
+-      f32_vmin_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__avx_x16;
+-      f32_vmin_config.init.f32_default = xnn_init_f32_default_avx_params;
+-      f32_vmin_config.element_tile = 16;
+-    } else {
+-      f32_vmin_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmin_ukernel__sse_x8;
+-      f32_vmin_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__sse_x8;
+-      f32_vmin_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__sse_x8;
+-      f32_vmin_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      f32_vmin_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmin_ukernel__wasmsimd_x86_x16;
+-      f32_vmin_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__wasmsimd_x86_x16;
+-      f32_vmin_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__wasmsimd_x86_x16;
+-      f32_vmin_config.element_tile = 16;
+-    } else {
+-      f32_vmin_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmin_ukernel__wasmsimd_arm_x16;
+-      f32_vmin_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__wasmsimd_arm_x16;
+-      f32_vmin_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__wasmsimd_arm_x16;
+-      f32_vmin_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_WASM
+-    f32_vmin_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmin_ukernel__wasm_x8;
+-    f32_vmin_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__wasm_x8;
+-    f32_vmin_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__wasm_x8;
+-    f32_vmin_config.element_tile = 8;
+-  #elif XNN_ARCH_RISCV
+-    f32_vmin_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmin_ukernel__scalar_x8;
+-    f32_vmin_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__scalar_x8;
+-    f32_vmin_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__scalar_x8;
+-    f32_vmin_config.element_tile = 8;
+-  #else
+-    #error "Unsupported architecture"
+-  #endif
+-}
++// static void init_f32_vmin_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon){
++//       f32_vmin_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmin_ukernel__neon_x8;
++//       f32_vmin_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__neon_x8;
++//       f32_vmin_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__neon_x8;
++//       f32_vmin_config.element_tile = 8;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_vmin_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmin_ukernel__scalar_x8;
++//       f32_vmin_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__scalar_x8;
++//       f32_vmin_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__scalar_x8;
++//       f32_vmin_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_vmin_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmin_ukernel__neon_x8;
++//     f32_vmin_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__neon_x8;
++//     f32_vmin_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__neon_x8;
++//     f32_vmin_config.element_tile = 8;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
++//       f32_vmin_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmin_ukernel__avx512f_x32;
++//       f32_vmin_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__avx512f_x32;
++//       f32_vmin_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__avx512f_x32;
++//       f32_vmin_config.element_tile = 32;
++//     } else if (hardware_config->use_x86_avx) {
++//       f32_vmin_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmin_ukernel__avx_x16;
++//       f32_vmin_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__avx_x16;
++//       f32_vmin_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__avx_x16;
++//       f32_vmin_config.init.f32_default = xnn_init_f32_default_avx_params;
++//       f32_vmin_config.element_tile = 16;
++//     } else {
++//       f32_vmin_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmin_ukernel__sse_x8;
++//       f32_vmin_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__sse_x8;
++//       f32_vmin_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__sse_x8;
++//       f32_vmin_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       f32_vmin_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmin_ukernel__wasmsimd_x86_x16;
++//       f32_vmin_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__wasmsimd_x86_x16;
++//       f32_vmin_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__wasmsimd_x86_x16;
++//       f32_vmin_config.element_tile = 16;
++//     } else {
++//       f32_vmin_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmin_ukernel__wasmsimd_arm_x16;
++//       f32_vmin_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__wasmsimd_arm_x16;
++//       f32_vmin_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__wasmsimd_arm_x16;
++//       f32_vmin_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_WASM
++//     f32_vmin_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmin_ukernel__wasm_x8;
++//     f32_vmin_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__wasm_x8;
++//     f32_vmin_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__wasm_x8;
++//     f32_vmin_config.element_tile = 8;
++//   #elif XNN_ARCH_RISCV
++//     f32_vmin_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmin_ukernel__scalar_x8;
++//     f32_vmin_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__scalar_x8;
++//     f32_vmin_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vminc_ukernel__scalar_x8;
++//     f32_vmin_config.element_tile = 8;
++//   #else
++//     #error "Unsupported architecture"
++//   #endif
++// }
+ 
+-static void init_f32_vmul_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon){
+-      f32_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmul_minmax_ukernel__neon_x8;
+-      f32_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__neon_x8;
+-      f32_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__neon_x8;
+-      f32_vmul_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-      f32_vmul_config.element_tile = 8;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmul_minmax_ukernel__scalar_x8;
+-      f32_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__scalar_x8;
+-      f32_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__scalar_x8;
+-      f32_vmul_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-      f32_vmul_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmul_minmax_ukernel__neon_x8;
+-    f32_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__neon_x8;
+-    f32_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__neon_x8;
+-    f32_vmul_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-    f32_vmul_config.element_tile = 8;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
+-      f32_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmul_minmax_ukernel__avx512f_x32;
+-      f32_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__avx512f_x32;
+-      f32_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__avx512f_x32;
+-      f32_vmul_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-      f32_vmul_config.element_tile = 32;
+-    } else if (hardware_config->use_x86_avx) {
+-      f32_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmul_minmax_ukernel__avx_x16;
+-      f32_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__avx_x16;
+-      f32_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__avx_x16;
+-      f32_vmul_config.init.f32_minmax = xnn_init_f32_minmax_avx_params;
+-      f32_vmul_config.element_tile = 16;
+-    } else {
+-      f32_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmul_minmax_ukernel__sse_x8;
+-      f32_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__sse_x8;
+-      f32_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__sse_x8;
+-      f32_vmul_config.init.f32_minmax = xnn_init_f32_minmax_sse_params;
+-      f32_vmul_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      f32_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmul_minmax_ukernel__wasmsimd_x86_x16;
+-      f32_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__wasmsimd_x86_x16;
+-      f32_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__wasmsimd_x86_x16;
+-      f32_vmul_config.linear.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmul_ukernel__wasmsimd_x16;
+-      f32_vmul_config.linear.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_ukernel__wasmsimd_x16;
+-      f32_vmul_config.linear.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_ukernel__wasmsimd_x16;
+-      f32_vmul_config.init.f32_minmax = xnn_init_f32_minmax_wasmsimd_params;
+-      f32_vmul_config.element_tile = 16;
+-    } else {
+-      f32_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmul_minmax_ukernel__wasmsimd_arm_x16;
+-      f32_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__wasmsimd_arm_x16;
+-      f32_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__wasmsimd_arm_x16;
+-      f32_vmul_config.linear.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmul_ukernel__wasmsimd_x16;
+-      f32_vmul_config.linear.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_ukernel__wasmsimd_x16;
+-      f32_vmul_config.linear.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_ukernel__wasmsimd_x16;
+-      f32_vmul_config.init.f32_minmax = xnn_init_f32_minmax_wasmsimd_params;
+-      f32_vmul_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_WASM
+-    f32_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmul_minmax_ukernel__wasm_x8;
+-    f32_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__wasm_x8;
+-    f32_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__wasm_x8;
+-    f32_vmul_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-    f32_vmul_config.element_tile = 8;
+-  #elif XNN_ARCH_RISCV
+-    f32_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmul_minmax_ukernel__scalar_x8;
+-    f32_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__scalar_x8;
+-    f32_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__scalar_x8;
+-    f32_vmul_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-    f32_vmul_config.element_tile = 8;
+-  #else
+-    #error "Unsupported architecture"
+-  #endif
+-}
++// static void init_f32_vmul_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon){
++//       f32_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmul_minmax_ukernel__neon_x8;
++//       f32_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__neon_x8;
++//       f32_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__neon_x8;
++//       f32_vmul_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//       f32_vmul_config.element_tile = 8;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmul_minmax_ukernel__scalar_x8;
++//       f32_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__scalar_x8;
++//       f32_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__scalar_x8;
++//       f32_vmul_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//       f32_vmul_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmul_minmax_ukernel__neon_x8;
++//     f32_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__neon_x8;
++//     f32_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__neon_x8;
++//     f32_vmul_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//     f32_vmul_config.element_tile = 8;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
++//       f32_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmul_minmax_ukernel__avx512f_x32;
++//       f32_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__avx512f_x32;
++//       f32_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__avx512f_x32;
++//       f32_vmul_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//       f32_vmul_config.element_tile = 32;
++//     } else if (hardware_config->use_x86_avx) {
++//       f32_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmul_minmax_ukernel__avx_x16;
++//       f32_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__avx_x16;
++//       f32_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__avx_x16;
++//       f32_vmul_config.init.f32_minmax = xnn_init_f32_minmax_avx_params;
++//       f32_vmul_config.element_tile = 16;
++//     } else {
++//       f32_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmul_minmax_ukernel__sse_x8;
++//       f32_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__sse_x8;
++//       f32_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__sse_x8;
++//       f32_vmul_config.init.f32_minmax = xnn_init_f32_minmax_sse_params;
++//       f32_vmul_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       f32_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmul_minmax_ukernel__wasmsimd_x86_x16;
++//       f32_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__wasmsimd_x86_x16;
++//       f32_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__wasmsimd_x86_x16;
++//       f32_vmul_config.linear.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmul_ukernel__wasmsimd_x16;
++//       f32_vmul_config.linear.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_ukernel__wasmsimd_x16;
++//       f32_vmul_config.linear.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_ukernel__wasmsimd_x16;
++//       f32_vmul_config.init.f32_minmax = xnn_init_f32_minmax_wasmsimd_params;
++//       f32_vmul_config.element_tile = 16;
++//     } else {
++//       f32_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmul_minmax_ukernel__wasmsimd_arm_x16;
++//       f32_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__wasmsimd_arm_x16;
++//       f32_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__wasmsimd_arm_x16;
++//       f32_vmul_config.linear.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmul_ukernel__wasmsimd_x16;
++//       f32_vmul_config.linear.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_ukernel__wasmsimd_x16;
++//       f32_vmul_config.linear.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_ukernel__wasmsimd_x16;
++//       f32_vmul_config.init.f32_minmax = xnn_init_f32_minmax_wasmsimd_params;
++//       f32_vmul_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_WASM
++//     f32_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmul_minmax_ukernel__wasm_x8;
++//     f32_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__wasm_x8;
++//     f32_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__wasm_x8;
++//     f32_vmul_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//     f32_vmul_config.element_tile = 8;
++//   #elif XNN_ARCH_RISCV
++//     f32_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmul_minmax_ukernel__scalar_x8;
++//     f32_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__scalar_x8;
++//     f32_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vmulc_minmax_ukernel__scalar_x8;
++//     f32_vmul_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//     f32_vmul_config.element_tile = 8;
++//   #else
++//     #error "Unsupported architecture"
++//   #endif
++// }
+ 
+-static void init_f32_vsub_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon){
+-      f32_vsub_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsub_minmax_ukernel__neon_x8;
+-      f32_vsub_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsubc_minmax_ukernel__neon_x8;
+-      f32_vsub_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrsubc_minmax_ukernel__neon_x8;
+-      f32_vsub_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-      f32_vsub_config.element_tile = 8;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_vsub_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsub_minmax_ukernel__scalar_x8;
+-      f32_vsub_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsubc_minmax_ukernel__scalar_x8;
+-      f32_vsub_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrsubc_minmax_ukernel__scalar_x8;
+-      f32_vsub_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-      f32_vsub_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_vsub_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsub_minmax_ukernel__neon_x8;
+-    f32_vsub_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsubc_minmax_ukernel__neon_x8;
+-    f32_vsub_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrsubc_minmax_ukernel__neon_x8;
+-    f32_vsub_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-    f32_vsub_config.element_tile = 8;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
+-      f32_vsub_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsub_minmax_ukernel__avx512f_x32;
+-      f32_vsub_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsubc_minmax_ukernel__avx512f_x32;
+-      f32_vsub_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrsubc_minmax_ukernel__avx512f_x32;
+-      f32_vsub_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-      f32_vsub_config.element_tile = 32;
+-    } else if (hardware_config->use_x86_avx) {
+-      f32_vsub_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsub_minmax_ukernel__avx_x16;
+-      f32_vsub_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsubc_minmax_ukernel__avx_x16;
+-      f32_vsub_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrsubc_minmax_ukernel__avx_x16;
+-      f32_vsub_config.init.f32_minmax = xnn_init_f32_minmax_avx_params;
+-      f32_vsub_config.element_tile = 16;
+-    } else {
+-      f32_vsub_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsub_minmax_ukernel__sse_x8;
+-      f32_vsub_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsubc_minmax_ukernel__sse_x8;
+-      f32_vsub_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrsubc_minmax_ukernel__sse_x8;
+-      f32_vsub_config.init.f32_minmax = xnn_init_f32_minmax_sse_params;
+-      f32_vsub_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      f32_vsub_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsub_minmax_ukernel__wasmsimd_x86_x16;
+-      f32_vsub_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsubc_minmax_ukernel__wasmsimd_x86_x16;
+-      f32_vsub_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrsubc_minmax_ukernel__wasmsimd_x86_x16;
+-      f32_vsub_config.linear.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsub_ukernel__wasmsimd_x16;
+-      f32_vsub_config.linear.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsubc_ukernel__wasmsimd_x16;
+-      f32_vsub_config.linear.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrsubc_ukernel__wasmsimd_x16;
+-      f32_vsub_config.init.f32_minmax = xnn_init_f32_minmax_wasmsimd_params;
+-      f32_vsub_config.element_tile = 16;
+-    } else {
+-      f32_vsub_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsub_minmax_ukernel__wasmsimd_arm_x16;
+-      f32_vsub_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsubc_minmax_ukernel__wasmsimd_arm_x16;
+-      f32_vsub_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrsubc_minmax_ukernel__wasmsimd_arm_x16;
+-      f32_vsub_config.linear.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsub_ukernel__wasmsimd_x16;
+-      f32_vsub_config.linear.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsubc_ukernel__wasmsimd_x16;
+-      f32_vsub_config.linear.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrsubc_ukernel__wasmsimd_x16;
+-      f32_vsub_config.init.f32_minmax = xnn_init_f32_minmax_wasmsimd_params;
+-      f32_vsub_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_WASM
+-    f32_vsub_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsub_minmax_ukernel__wasm_x8;
+-    f32_vsub_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsubc_minmax_ukernel__wasm_x8;
+-    f32_vsub_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrsubc_minmax_ukernel__wasm_x8;
+-    f32_vsub_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-    f32_vsub_config.element_tile = 8;
+-  #elif XNN_ARCH_RISCV
+-    f32_vsub_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsub_minmax_ukernel__scalar_x8;
+-    f32_vsub_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsubc_minmax_ukernel__scalar_x8;
+-    f32_vsub_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrsubc_minmax_ukernel__scalar_x8;
+-    f32_vsub_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-    f32_vsub_config.element_tile = 8;
+-  #else
+-    #error "Unsupported architecture"
+-  #endif
+-}
++// static void init_f32_vsub_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon){
++//       f32_vsub_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsub_minmax_ukernel__neon_x8;
++//       f32_vsub_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsubc_minmax_ukernel__neon_x8;
++//       f32_vsub_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrsubc_minmax_ukernel__neon_x8;
++//       f32_vsub_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//       f32_vsub_config.element_tile = 8;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_vsub_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsub_minmax_ukernel__scalar_x8;
++//       f32_vsub_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsubc_minmax_ukernel__scalar_x8;
++//       f32_vsub_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrsubc_minmax_ukernel__scalar_x8;
++//       f32_vsub_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//       f32_vsub_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_vsub_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsub_minmax_ukernel__neon_x8;
++//     f32_vsub_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsubc_minmax_ukernel__neon_x8;
++//     f32_vsub_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrsubc_minmax_ukernel__neon_x8;
++//     f32_vsub_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//     f32_vsub_config.element_tile = 8;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
++//       f32_vsub_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsub_minmax_ukernel__avx512f_x32;
++//       f32_vsub_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsubc_minmax_ukernel__avx512f_x32;
++//       f32_vsub_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrsubc_minmax_ukernel__avx512f_x32;
++//       f32_vsub_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//       f32_vsub_config.element_tile = 32;
++//     } else if (hardware_config->use_x86_avx) {
++//       f32_vsub_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsub_minmax_ukernel__avx_x16;
++//       f32_vsub_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsubc_minmax_ukernel__avx_x16;
++//       f32_vsub_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrsubc_minmax_ukernel__avx_x16;
++//       f32_vsub_config.init.f32_minmax = xnn_init_f32_minmax_avx_params;
++//       f32_vsub_config.element_tile = 16;
++//     } else {
++//       f32_vsub_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsub_minmax_ukernel__sse_x8;
++//       f32_vsub_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsubc_minmax_ukernel__sse_x8;
++//       f32_vsub_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrsubc_minmax_ukernel__sse_x8;
++//       f32_vsub_config.init.f32_minmax = xnn_init_f32_minmax_sse_params;
++//       f32_vsub_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       f32_vsub_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsub_minmax_ukernel__wasmsimd_x86_x16;
++//       f32_vsub_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsubc_minmax_ukernel__wasmsimd_x86_x16;
++//       f32_vsub_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrsubc_minmax_ukernel__wasmsimd_x86_x16;
++//       f32_vsub_config.linear.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsub_ukernel__wasmsimd_x16;
++//       f32_vsub_config.linear.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsubc_ukernel__wasmsimd_x16;
++//       f32_vsub_config.linear.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrsubc_ukernel__wasmsimd_x16;
++//       f32_vsub_config.init.f32_minmax = xnn_init_f32_minmax_wasmsimd_params;
++//       f32_vsub_config.element_tile = 16;
++//     } else {
++//       f32_vsub_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsub_minmax_ukernel__wasmsimd_arm_x16;
++//       f32_vsub_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsubc_minmax_ukernel__wasmsimd_arm_x16;
++//       f32_vsub_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrsubc_minmax_ukernel__wasmsimd_arm_x16;
++//       f32_vsub_config.linear.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsub_ukernel__wasmsimd_x16;
++//       f32_vsub_config.linear.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsubc_ukernel__wasmsimd_x16;
++//       f32_vsub_config.linear.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrsubc_ukernel__wasmsimd_x16;
++//       f32_vsub_config.init.f32_minmax = xnn_init_f32_minmax_wasmsimd_params;
++//       f32_vsub_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_WASM
++//     f32_vsub_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsub_minmax_ukernel__wasm_x8;
++//     f32_vsub_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsubc_minmax_ukernel__wasm_x8;
++//     f32_vsub_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrsubc_minmax_ukernel__wasm_x8;
++//     f32_vsub_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//     f32_vsub_config.element_tile = 8;
++//   #elif XNN_ARCH_RISCV
++//     f32_vsub_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsub_minmax_ukernel__scalar_x8;
++//     f32_vsub_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsubc_minmax_ukernel__scalar_x8;
++//     f32_vsub_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vrsubc_minmax_ukernel__scalar_x8;
++//     f32_vsub_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//     f32_vsub_config.element_tile = 8;
++//   #else
++//     #error "Unsupported architecture"
++//   #endif
++// }
+ 
+-static void init_f32_vsqrdiff_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon){
+-      f32_vsqrdiff_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiff_ukernel__neon_x8;
+-      f32_vsqrdiff_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__neon_x8;
+-      f32_vsqrdiff_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__neon_x8;
+-      f32_vsqrdiff_config.element_tile = 8;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_vsqrdiff_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiff_ukernel__scalar_x8;
+-      f32_vsqrdiff_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__scalar_x8;
+-      f32_vsqrdiff_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__scalar_x8;
+-      f32_vsqrdiff_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_vsqrdiff_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiff_ukernel__neon_x8;
+-    f32_vsqrdiff_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__neon_x8;
+-    f32_vsqrdiff_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__neon_x8;
+-    f32_vsqrdiff_config.element_tile = 8;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
+-      f32_vsqrdiff_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiff_ukernel__avx512f_x32;
+-      f32_vsqrdiff_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__avx512f_x32;
+-      f32_vsqrdiff_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__avx512f_x32;
+-      f32_vsqrdiff_config.element_tile = 32;
+-    } else if (hardware_config->use_x86_avx) {
+-      f32_vsqrdiff_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiff_ukernel__avx_x16;
+-      f32_vsqrdiff_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__avx_x16;
+-      f32_vsqrdiff_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__avx_x16;
+-      f32_vsqrdiff_config.init.f32_default = xnn_init_f32_default_avx_params;
+-      f32_vsqrdiff_config.element_tile = 16;
+-    } else {
+-      f32_vsqrdiff_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiff_ukernel__sse_x8;
+-      f32_vsqrdiff_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__sse_x8;
+-      f32_vsqrdiff_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__sse_x8;
+-      f32_vsqrdiff_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    f32_vsqrdiff_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiff_ukernel__wasmsimd_x16;
+-    f32_vsqrdiff_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__wasmsimd_x16;
+-    f32_vsqrdiff_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__wasmsimd_x16;
+-    f32_vsqrdiff_config.element_tile = 16;
+-  #elif XNN_ARCH_WASM
+-    f32_vsqrdiff_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiff_ukernel__scalar_x8;
+-    f32_vsqrdiff_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__scalar_x8;
+-    f32_vsqrdiff_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__scalar_x8;
+-    f32_vsqrdiff_config.element_tile = 8;
+-  #elif XNN_ARCH_RISCV
+-    f32_vsqrdiff_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiff_ukernel__scalar_x8;
+-    f32_vsqrdiff_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__scalar_x8;
+-    f32_vsqrdiff_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__scalar_x8;
+-    f32_vsqrdiff_config.element_tile = 8;
+-  #else
+-    #error "Unsupported architecture"
+-  #endif
+-}
++// static void init_f32_vsqrdiff_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon){
++//       f32_vsqrdiff_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiff_ukernel__neon_x8;
++//       f32_vsqrdiff_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__neon_x8;
++//       f32_vsqrdiff_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__neon_x8;
++//       f32_vsqrdiff_config.element_tile = 8;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_vsqrdiff_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiff_ukernel__scalar_x8;
++//       f32_vsqrdiff_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__scalar_x8;
++//       f32_vsqrdiff_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__scalar_x8;
++//       f32_vsqrdiff_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_vsqrdiff_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiff_ukernel__neon_x8;
++//     f32_vsqrdiff_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__neon_x8;
++//     f32_vsqrdiff_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__neon_x8;
++//     f32_vsqrdiff_config.element_tile = 8;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
++//       f32_vsqrdiff_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiff_ukernel__avx512f_x32;
++//       f32_vsqrdiff_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__avx512f_x32;
++//       f32_vsqrdiff_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__avx512f_x32;
++//       f32_vsqrdiff_config.element_tile = 32;
++//     } else if (hardware_config->use_x86_avx) {
++//       f32_vsqrdiff_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiff_ukernel__avx_x16;
++//       f32_vsqrdiff_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__avx_x16;
++//       f32_vsqrdiff_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__avx_x16;
++//       f32_vsqrdiff_config.init.f32_default = xnn_init_f32_default_avx_params;
++//       f32_vsqrdiff_config.element_tile = 16;
++//     } else {
++//       f32_vsqrdiff_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiff_ukernel__sse_x8;
++//       f32_vsqrdiff_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__sse_x8;
++//       f32_vsqrdiff_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__sse_x8;
++//       f32_vsqrdiff_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     f32_vsqrdiff_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiff_ukernel__wasmsimd_x16;
++//     f32_vsqrdiff_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__wasmsimd_x16;
++//     f32_vsqrdiff_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__wasmsimd_x16;
++//     f32_vsqrdiff_config.element_tile = 16;
++//   #elif XNN_ARCH_WASM
++//     f32_vsqrdiff_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiff_ukernel__scalar_x8;
++//     f32_vsqrdiff_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__scalar_x8;
++//     f32_vsqrdiff_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__scalar_x8;
++//     f32_vsqrdiff_config.element_tile = 8;
++//   #elif XNN_ARCH_RISCV
++//     f32_vsqrdiff_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiff_ukernel__scalar_x8;
++//     f32_vsqrdiff_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__scalar_x8;
++//     f32_vsqrdiff_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_f32_vsqrdiffc_ukernel__scalar_x8;
++//     f32_vsqrdiff_config.element_tile = 8;
++//   #else
++//     #error "Unsupported architecture"
++//   #endif
++// }
+ 
+-static void init_qs8_vadd_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon){
+-      qs8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vadd_minmax_ukernel__neon_ld64_x16;
+-      qs8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__neon_ld64_x16;
+-      qs8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__neon_ld64_x16;
+-      qs8_vadd_config.init.qs8_add = xnn_init_qs8_add_minmax_neon_params;
+-      qs8_vadd_config.element_tile = 16;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      qs8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vadd_minmax_ukernel__scalar_x1;
+-      qs8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__scalar_x1;
+-      qs8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__scalar_x1;
+-      qs8_vadd_config.init.qs8_add = xnn_init_qs8_add_minmax_scalar_params;
+-      qs8_vadd_config.element_tile = 1;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    qs8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vadd_minmax_ukernel__neon_ld64_x32;
+-    qs8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__neon_ld64_x32;
+-    qs8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__neon_ld64_x32;
+-    qs8_vadd_config.init.qs8_add = xnn_init_qs8_add_minmax_neon_params;
+-    qs8_vadd_config.element_tile = 32;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512skx) {
+-      qs8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vadd_minmax_ukernel__avx512skx_mul32_ld128_x16;
+-      qs8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__avx512skx_mul32_ld128_x16;
+-      qs8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__avx512skx_mul32_ld128_x16;
+-      qs8_vadd_config.init.qs8_add = xnn_init_qs8_add_minmax_avx512_params;
+-      qs8_vadd_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_xop) {
+-      qs8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vadd_minmax_ukernel__xop_mul32_ld32_x8;
+-      qs8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__xop_mul32_ld32_x8;
+-      qs8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__xop_mul32_ld32_x8;
+-      qs8_vadd_config.init.qs8_add = xnn_init_qs8_add_minmax_sse4_mul32_params;
+-      qs8_vadd_config.element_tile = 8;
+-    } else if (hardware_config->use_x86_avx2) {
+-      qs8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vadd_minmax_ukernel__avx2_mul32_ld64_x16;
+-      qs8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__avx2_mul32_ld64_x16;
+-      qs8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__avx2_mul32_ld64_x16;
+-      qs8_vadd_config.init.qs8_add = xnn_init_qs8_add_minmax_avx2_params;
+-      qs8_vadd_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_avx) {
+-      qs8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vadd_minmax_ukernel__avx_mul32_ld32_x8;
+-      qs8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__avx_mul32_ld32_x8;
+-      qs8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__avx_mul32_ld32_x8;
+-      qs8_vadd_config.init.qs8_add = xnn_init_qs8_add_minmax_sse4_mul32_params;
+-      qs8_vadd_config.element_tile = 8;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      qs8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vadd_minmax_ukernel__sse41_mul16_ld64_x8;
+-      qs8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__sse41_mul16_ld64_x8;
+-      qs8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__sse41_mul16_ld64_x8;
+-      qs8_vadd_config.init.qs8_add = xnn_init_qs8_add_minmax_sse4_mul16_params;
+-      qs8_vadd_config.element_tile = 8;
+-    } else {
+-      qs8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vadd_minmax_ukernel__sse2_mul16_ld64_x8;
+-      qs8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__sse2_mul16_ld64_x8;
+-      qs8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__sse2_mul16_ld64_x8;
+-      qs8_vadd_config.init.qs8_add = xnn_init_qs8_add_minmax_sse2_params;
+-      qs8_vadd_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    qs8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vadd_minmax_ukernel__wasmsimd_x32;
+-    qs8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__wasmsimd_x32;
+-    qs8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__wasmsimd_x32;
+-    qs8_vadd_config.init.qs8_add = xnn_init_qs8_add_minmax_wasmsimd_params;
+-    qs8_vadd_config.element_tile = 32;
+-  #elif XNN_ARCH_WASM
+-    qs8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vadd_minmax_ukernel__scalar_x4;
+-    qs8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__scalar_x4;
+-    qs8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__scalar_x4;
+-    qs8_vadd_config.init.qs8_add = xnn_init_qs8_add_minmax_scalar_params;
+-    qs8_vadd_config.element_tile = 4;
+-  #elif XNN_ARCH_RISCV
+-    qs8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vadd_minmax_ukernel__scalar_x4;
+-    qs8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__scalar_x4;
+-    qs8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__scalar_x4;
+-    qs8_vadd_config.init.qs8_add = xnn_init_qs8_add_minmax_scalar_params;
+-    qs8_vadd_config.element_tile = 4;
+-  #else
+-    #error "Unsupported architecture"
+-  #endif
+-}
++// static void init_qs8_vadd_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon){
++//       qs8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vadd_minmax_ukernel__neon_ld64_x16;
++//       qs8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__neon_ld64_x16;
++//       qs8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__neon_ld64_x16;
++//       qs8_vadd_config.init.qs8_add = xnn_init_qs8_add_minmax_neon_params;
++//       qs8_vadd_config.element_tile = 16;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       qs8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vadd_minmax_ukernel__scalar_x1;
++//       qs8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__scalar_x1;
++//       qs8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__scalar_x1;
++//       qs8_vadd_config.init.qs8_add = xnn_init_qs8_add_minmax_scalar_params;
++//       qs8_vadd_config.element_tile = 1;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     qs8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vadd_minmax_ukernel__neon_ld64_x32;
++//     qs8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__neon_ld64_x32;
++//     qs8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__neon_ld64_x32;
++//     qs8_vadd_config.init.qs8_add = xnn_init_qs8_add_minmax_neon_params;
++//     qs8_vadd_config.element_tile = 32;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512skx) {
++//       qs8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vadd_minmax_ukernel__avx512skx_mul32_ld128_x16;
++//       qs8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__avx512skx_mul32_ld128_x16;
++//       qs8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__avx512skx_mul32_ld128_x16;
++//       qs8_vadd_config.init.qs8_add = xnn_init_qs8_add_minmax_avx512_params;
++//       qs8_vadd_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_xop) {
++//       qs8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vadd_minmax_ukernel__xop_mul32_ld32_x8;
++//       qs8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__xop_mul32_ld32_x8;
++//       qs8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__xop_mul32_ld32_x8;
++//       qs8_vadd_config.init.qs8_add = xnn_init_qs8_add_minmax_sse4_mul32_params;
++//       qs8_vadd_config.element_tile = 8;
++//     } else if (hardware_config->use_x86_avx2) {
++//       qs8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vadd_minmax_ukernel__avx2_mul32_ld64_x16;
++//       qs8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__avx2_mul32_ld64_x16;
++//       qs8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__avx2_mul32_ld64_x16;
++//       qs8_vadd_config.init.qs8_add = xnn_init_qs8_add_minmax_avx2_params;
++//       qs8_vadd_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_avx) {
++//       qs8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vadd_minmax_ukernel__avx_mul32_ld32_x8;
++//       qs8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__avx_mul32_ld32_x8;
++//       qs8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__avx_mul32_ld32_x8;
++//       qs8_vadd_config.init.qs8_add = xnn_init_qs8_add_minmax_sse4_mul32_params;
++//       qs8_vadd_config.element_tile = 8;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       qs8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vadd_minmax_ukernel__sse41_mul16_ld64_x8;
++//       qs8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__sse41_mul16_ld64_x8;
++//       qs8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__sse41_mul16_ld64_x8;
++//       qs8_vadd_config.init.qs8_add = xnn_init_qs8_add_minmax_sse4_mul16_params;
++//       qs8_vadd_config.element_tile = 8;
++//     } else {
++//       qs8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vadd_minmax_ukernel__sse2_mul16_ld64_x8;
++//       qs8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__sse2_mul16_ld64_x8;
++//       qs8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__sse2_mul16_ld64_x8;
++//       qs8_vadd_config.init.qs8_add = xnn_init_qs8_add_minmax_sse2_params;
++//       qs8_vadd_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     qs8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vadd_minmax_ukernel__wasmsimd_x32;
++//     qs8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__wasmsimd_x32;
++//     qs8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__wasmsimd_x32;
++//     qs8_vadd_config.init.qs8_add = xnn_init_qs8_add_minmax_wasmsimd_params;
++//     qs8_vadd_config.element_tile = 32;
++//   #elif XNN_ARCH_WASM
++//     qs8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vadd_minmax_ukernel__scalar_x4;
++//     qs8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__scalar_x4;
++//     qs8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__scalar_x4;
++//     qs8_vadd_config.init.qs8_add = xnn_init_qs8_add_minmax_scalar_params;
++//     qs8_vadd_config.element_tile = 4;
++//   #elif XNN_ARCH_RISCV
++//     qs8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vadd_minmax_ukernel__scalar_x4;
++//     qs8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__scalar_x4;
++//     qs8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vaddc_minmax_ukernel__scalar_x4;
++//     qs8_vadd_config.init.qs8_add = xnn_init_qs8_add_minmax_scalar_params;
++//     qs8_vadd_config.element_tile = 4;
++//   #else
++//     #error "Unsupported architecture"
++//   #endif
++// }
+ 
+-static void init_qs8_vmul_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon){
+-      qs8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmul_minmax_rndnu_ukernel__neon_ld64_x16;
+-      qs8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_rndnu_ukernel__neon_ld64_x16;
+-      qs8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_rndnu_ukernel__neon_ld64_x16;
+-      qs8_vmul_config.init.qs8_mul = xnn_init_qs8_mul_minmax_rndnu_neon_params;
+-      qs8_vmul_config.element_tile = 16;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      qs8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmul_minmax_fp32_ukernel__scalar_x4;
+-      qs8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__scalar_x4;
+-      qs8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__scalar_x4;
+-      qs8_vmul_config.init.qs8_mul = xnn_init_qs8_mul_minmax_fp32_scalar_params;
+-      qs8_vmul_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    qs8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmul_minmax_rndnu_ukernel__neon_ld64_x16;
+-    qs8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_rndnu_ukernel__neon_ld64_x16;
+-    qs8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_rndnu_ukernel__neon_ld64_x16;
+-    qs8_vmul_config.init.qs8_mul = xnn_init_qs8_mul_minmax_rndnu_neon_params;
+-    qs8_vmul_config.element_tile = 16;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx) {
+-      qs8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmul_minmax_fp32_ukernel__avx_mul16_ld64_x16;
+-      qs8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__avx_mul16_ld64_x16;
+-      qs8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__avx_mul16_ld64_x16;
+-      qs8_vmul_config.init.qs8_mul = xnn_init_qs8_mul_minmax_fp32_sse4_params;
+-      qs8_vmul_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      qs8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmul_minmax_fp32_ukernel__sse41_mul16_ld64_x16;
+-      qs8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__sse41_mul16_ld64_x16;
+-      qs8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__sse41_mul16_ld64_x16;
+-      qs8_vmul_config.init.qs8_mul = xnn_init_qs8_mul_minmax_fp32_sse4_params;
+-      qs8_vmul_config.element_tile = 16;
+-    } else {
+-      qs8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmul_minmax_fp32_ukernel__sse2_mul16_ld64_x8;
+-      qs8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__sse2_mul16_ld64_x8;
+-      qs8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__sse2_mul16_ld64_x8;
+-      qs8_vmul_config.init.qs8_mul = xnn_init_qs8_mul_minmax_fp32_sse2_params;
+-      qs8_vmul_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    qs8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmul_minmax_fp32_ukernel__wasmsimd_mul32_ld64_x8;
+-    qs8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__wasmsimd_mul32_ld64_x8;
+-    qs8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__wasmsimd_mul32_ld64_x8;
+-    qs8_vmul_config.init.qs8_mul = xnn_init_qs8_mul_minmax_fp32_wasmsimd_params;
+-    qs8_vmul_config.element_tile = 8;
+-  #elif XNN_ARCH_WASM
+-    qs8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmul_minmax_fp32_ukernel__scalar_x4;
+-    qs8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__scalar_x4;
+-    qs8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__scalar_x4;
+-    qs8_vmul_config.init.qs8_mul = xnn_init_qs8_mul_minmax_fp32_scalar_params;
+-    qs8_vmul_config.element_tile = 4;
+-  #elif XNN_ARCH_RISCV
+-    qs8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmul_minmax_fp32_ukernel__scalar_x4;
+-    qs8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__scalar_x4;
+-    qs8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__scalar_x4;
+-    qs8_vmul_config.init.qs8_mul = xnn_init_qs8_mul_minmax_fp32_scalar_params;
+-    qs8_vmul_config.element_tile = 4;
+-  #else
+-    #error "Unsupported architecture"
+-  #endif
+-}
++// static void init_qs8_vmul_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon){
++//       qs8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmul_minmax_rndnu_ukernel__neon_ld64_x16;
++//       qs8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_rndnu_ukernel__neon_ld64_x16;
++//       qs8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_rndnu_ukernel__neon_ld64_x16;
++//       qs8_vmul_config.init.qs8_mul = xnn_init_qs8_mul_minmax_rndnu_neon_params;
++//       qs8_vmul_config.element_tile = 16;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       qs8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmul_minmax_fp32_ukernel__scalar_x4;
++//       qs8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__scalar_x4;
++//       qs8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__scalar_x4;
++//       qs8_vmul_config.init.qs8_mul = xnn_init_qs8_mul_minmax_fp32_scalar_params;
++//       qs8_vmul_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     qs8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmul_minmax_rndnu_ukernel__neon_ld64_x16;
++//     qs8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_rndnu_ukernel__neon_ld64_x16;
++//     qs8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_rndnu_ukernel__neon_ld64_x16;
++//     qs8_vmul_config.init.qs8_mul = xnn_init_qs8_mul_minmax_rndnu_neon_params;
++//     qs8_vmul_config.element_tile = 16;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx) {
++//       qs8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmul_minmax_fp32_ukernel__avx_mul16_ld64_x16;
++//       qs8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__avx_mul16_ld64_x16;
++//       qs8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__avx_mul16_ld64_x16;
++//       qs8_vmul_config.init.qs8_mul = xnn_init_qs8_mul_minmax_fp32_sse4_params;
++//       qs8_vmul_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       qs8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmul_minmax_fp32_ukernel__sse41_mul16_ld64_x16;
++//       qs8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__sse41_mul16_ld64_x16;
++//       qs8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__sse41_mul16_ld64_x16;
++//       qs8_vmul_config.init.qs8_mul = xnn_init_qs8_mul_minmax_fp32_sse4_params;
++//       qs8_vmul_config.element_tile = 16;
++//     } else {
++//       qs8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmul_minmax_fp32_ukernel__sse2_mul16_ld64_x8;
++//       qs8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__sse2_mul16_ld64_x8;
++//       qs8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__sse2_mul16_ld64_x8;
++//       qs8_vmul_config.init.qs8_mul = xnn_init_qs8_mul_minmax_fp32_sse2_params;
++//       qs8_vmul_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     qs8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmul_minmax_fp32_ukernel__wasmsimd_mul32_ld64_x8;
++//     qs8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__wasmsimd_mul32_ld64_x8;
++//     qs8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__wasmsimd_mul32_ld64_x8;
++//     qs8_vmul_config.init.qs8_mul = xnn_init_qs8_mul_minmax_fp32_wasmsimd_params;
++//     qs8_vmul_config.element_tile = 8;
++//   #elif XNN_ARCH_WASM
++//     qs8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmul_minmax_fp32_ukernel__scalar_x4;
++//     qs8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__scalar_x4;
++//     qs8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__scalar_x4;
++//     qs8_vmul_config.init.qs8_mul = xnn_init_qs8_mul_minmax_fp32_scalar_params;
++//     qs8_vmul_config.element_tile = 4;
++//   #elif XNN_ARCH_RISCV
++//     qs8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmul_minmax_fp32_ukernel__scalar_x4;
++//     qs8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__scalar_x4;
++//     qs8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qs8_vmulc_minmax_fp32_ukernel__scalar_x4;
++//     qs8_vmul_config.init.qs8_mul = xnn_init_qs8_mul_minmax_fp32_scalar_params;
++//     qs8_vmul_config.element_tile = 4;
++//   #else
++//     #error "Unsupported architecture"
++//   #endif
++// }
+ 
+-static void init_qu8_vadd_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon){
+-      qu8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vadd_minmax_ukernel__neon_ld64_x16;
+-      qu8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__neon_ld64_x16;
+-      qu8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__neon_ld64_x16;
+-      qu8_vadd_config.init.qu8_add = xnn_init_qu8_add_minmax_neon_params;
+-      qu8_vadd_config.element_tile = 8;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      qu8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vadd_minmax_ukernel__scalar_x1;
+-      qu8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__scalar_x1;
+-      qu8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__scalar_x1;
+-      qu8_vadd_config.init.qu8_add = xnn_init_qu8_add_minmax_scalar_params;
+-      qu8_vadd_config.element_tile = 1;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    qu8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vadd_minmax_ukernel__neon_ld64_x32;
+-    qu8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__neon_ld64_x32;
+-    qu8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__neon_ld64_x32;
+-    qu8_vadd_config.init.qu8_add = xnn_init_qu8_add_minmax_neon_params;
+-    qu8_vadd_config.element_tile = 8;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512skx) {
+-      qu8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vadd_minmax_ukernel__avx512skx_mul32_ld128_x16;
+-      qu8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__avx512skx_mul32_ld128_x16;
+-      qu8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__avx512skx_mul32_ld128_x16;
+-      qu8_vadd_config.init.qu8_add = xnn_init_qu8_add_minmax_avx512_params;
+-      qu8_vadd_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_xop) {
+-      qu8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vadd_minmax_ukernel__xop_mul32_ld32_x8;
+-      qu8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__xop_mul32_ld32_x8;
+-      qu8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__xop_mul32_ld32_x8;
+-      qu8_vadd_config.init.qu8_add = xnn_init_qu8_add_minmax_sse4_params;
+-      qu8_vadd_config.element_tile = 8;
+-    } else if (hardware_config->use_x86_avx2) {
+-      qu8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vadd_minmax_ukernel__avx2_mul32_ld64_x16;
+-      qu8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__avx2_mul32_ld64_x16;
+-      qu8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__avx2_mul32_ld64_x16;
+-      qu8_vadd_config.init.qu8_add = xnn_init_qu8_add_minmax_avx2_params;
+-      qu8_vadd_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_avx) {
+-      qu8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vadd_minmax_ukernel__avx_mul32_ld32_x8;
+-      qu8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__avx_mul32_ld32_x8;
+-      qu8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__avx_mul32_ld32_x8;
+-      qu8_vadd_config.init.qu8_add = xnn_init_qu8_add_minmax_sse4_params;
+-      qu8_vadd_config.element_tile = 8;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      qu8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vadd_minmax_ukernel__sse41_mul16_ld64_x8;
+-      qu8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__sse41_mul16_ld64_x8;
+-      qu8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__sse41_mul16_ld64_x8;
+-      qu8_vadd_config.init.qu8_add = xnn_init_qu8_add_minmax_sse2_params;
+-      qu8_vadd_config.element_tile = 8;
+-    } else {
+-      qu8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vadd_minmax_ukernel__sse2_mul16_ld64_x8;
+-      qu8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__sse2_mul16_ld64_x8;
+-      qu8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__sse2_mul16_ld64_x8;
+-      qu8_vadd_config.init.qu8_add = xnn_init_qu8_add_minmax_sse2_params;
+-      qu8_vadd_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    qu8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vadd_minmax_ukernel__wasmsimd_x32;
+-    qu8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__wasmsimd_x32;
+-    qu8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__wasmsimd_x32;
+-    qu8_vadd_config.init.qu8_add = xnn_init_qu8_add_minmax_wasmsimd_params;
+-    qu8_vadd_config.element_tile = 32;
+-  #elif XNN_ARCH_WASM
+-    qu8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vadd_minmax_ukernel__scalar_x4;
+-    qu8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__scalar_x4;
+-    qu8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__scalar_x4;
+-    qu8_vadd_config.init.qu8_add = xnn_init_qu8_add_minmax_scalar_params;
+-    qu8_vadd_config.element_tile = 4;
+-  #elif XNN_ARCH_RISCV
+-    qu8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vadd_minmax_ukernel__scalar_x4;
+-    qu8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__scalar_x4;
+-    qu8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__scalar_x4;
+-    qu8_vadd_config.init.qu8_add = xnn_init_qu8_add_minmax_scalar_params;
+-    qu8_vadd_config.element_tile = 4;
+-  #else
+-    #error "Unsupported architecture"
+-  #endif
+-}
++// static void init_qu8_vadd_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon){
++//       qu8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vadd_minmax_ukernel__neon_ld64_x16;
++//       qu8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__neon_ld64_x16;
++//       qu8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__neon_ld64_x16;
++//       qu8_vadd_config.init.qu8_add = xnn_init_qu8_add_minmax_neon_params;
++//       qu8_vadd_config.element_tile = 8;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       qu8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vadd_minmax_ukernel__scalar_x1;
++//       qu8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__scalar_x1;
++//       qu8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__scalar_x1;
++//       qu8_vadd_config.init.qu8_add = xnn_init_qu8_add_minmax_scalar_params;
++//       qu8_vadd_config.element_tile = 1;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     qu8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vadd_minmax_ukernel__neon_ld64_x32;
++//     qu8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__neon_ld64_x32;
++//     qu8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__neon_ld64_x32;
++//     qu8_vadd_config.init.qu8_add = xnn_init_qu8_add_minmax_neon_params;
++//     qu8_vadd_config.element_tile = 8;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512skx) {
++//       qu8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vadd_minmax_ukernel__avx512skx_mul32_ld128_x16;
++//       qu8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__avx512skx_mul32_ld128_x16;
++//       qu8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__avx512skx_mul32_ld128_x16;
++//       qu8_vadd_config.init.qu8_add = xnn_init_qu8_add_minmax_avx512_params;
++//       qu8_vadd_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_xop) {
++//       qu8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vadd_minmax_ukernel__xop_mul32_ld32_x8;
++//       qu8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__xop_mul32_ld32_x8;
++//       qu8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__xop_mul32_ld32_x8;
++//       qu8_vadd_config.init.qu8_add = xnn_init_qu8_add_minmax_sse4_params;
++//       qu8_vadd_config.element_tile = 8;
++//     } else if (hardware_config->use_x86_avx2) {
++//       qu8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vadd_minmax_ukernel__avx2_mul32_ld64_x16;
++//       qu8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__avx2_mul32_ld64_x16;
++//       qu8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__avx2_mul32_ld64_x16;
++//       qu8_vadd_config.init.qu8_add = xnn_init_qu8_add_minmax_avx2_params;
++//       qu8_vadd_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_avx) {
++//       qu8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vadd_minmax_ukernel__avx_mul32_ld32_x8;
++//       qu8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__avx_mul32_ld32_x8;
++//       qu8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__avx_mul32_ld32_x8;
++//       qu8_vadd_config.init.qu8_add = xnn_init_qu8_add_minmax_sse4_params;
++//       qu8_vadd_config.element_tile = 8;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       qu8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vadd_minmax_ukernel__sse41_mul16_ld64_x8;
++//       qu8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__sse41_mul16_ld64_x8;
++//       qu8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__sse41_mul16_ld64_x8;
++//       qu8_vadd_config.init.qu8_add = xnn_init_qu8_add_minmax_sse2_params;
++//       qu8_vadd_config.element_tile = 8;
++//     } else {
++//       qu8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vadd_minmax_ukernel__sse2_mul16_ld64_x8;
++//       qu8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__sse2_mul16_ld64_x8;
++//       qu8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__sse2_mul16_ld64_x8;
++//       qu8_vadd_config.init.qu8_add = xnn_init_qu8_add_minmax_sse2_params;
++//       qu8_vadd_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     qu8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vadd_minmax_ukernel__wasmsimd_x32;
++//     qu8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__wasmsimd_x32;
++//     qu8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__wasmsimd_x32;
++//     qu8_vadd_config.init.qu8_add = xnn_init_qu8_add_minmax_wasmsimd_params;
++//     qu8_vadd_config.element_tile = 32;
++//   #elif XNN_ARCH_WASM
++//     qu8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vadd_minmax_ukernel__scalar_x4;
++//     qu8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__scalar_x4;
++//     qu8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__scalar_x4;
++//     qu8_vadd_config.init.qu8_add = xnn_init_qu8_add_minmax_scalar_params;
++//     qu8_vadd_config.element_tile = 4;
++//   #elif XNN_ARCH_RISCV
++//     qu8_vadd_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vadd_minmax_ukernel__scalar_x4;
++//     qu8_vadd_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__scalar_x4;
++//     qu8_vadd_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vaddc_minmax_ukernel__scalar_x4;
++//     qu8_vadd_config.init.qu8_add = xnn_init_qu8_add_minmax_scalar_params;
++//     qu8_vadd_config.element_tile = 4;
++//   #else
++//     #error "Unsupported architecture"
++//   #endif
++// }
+ 
+-static void init_qu8_vmul_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon){
+-      qu8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmul_minmax_rndnu_ukernel__neon_ld64_x16;
+-      qu8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_rndnu_ukernel__neon_ld64_x16;
+-      qu8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_rndnu_ukernel__neon_ld64_x16;
+-      qu8_vmul_config.init.qu8_mul = xnn_init_qu8_mul_minmax_rndnu_neon_params;
+-      qu8_vmul_config.element_tile = 16;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      qu8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmul_minmax_fp32_ukernel__scalar_x4;
+-      qu8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__scalar_x4;
+-      qu8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__scalar_x4;
+-      qu8_vmul_config.init.qu8_mul = xnn_init_qu8_mul_minmax_fp32_scalar_params;
+-      qu8_vmul_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    qu8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmul_minmax_rndnu_ukernel__neon_ld64_x16;
+-    qu8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_rndnu_ukernel__neon_ld64_x16;
+-    qu8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_rndnu_ukernel__neon_ld64_x16;
+-    qu8_vmul_config.init.qu8_mul = xnn_init_qu8_mul_minmax_rndnu_neon_params;
+-    qu8_vmul_config.element_tile = 16;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx) {
+-      qu8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmul_minmax_fp32_ukernel__avx_mul16_ld64_x16;
+-      qu8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__avx_mul16_ld64_x16;
+-      qu8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__avx_mul16_ld64_x16;
+-      qu8_vmul_config.init.qu8_mul = xnn_init_qu8_mul_minmax_fp32_sse2_params;
+-      qu8_vmul_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      qu8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmul_minmax_fp32_ukernel__sse41_mul16_ld64_x16;
+-      qu8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__sse41_mul16_ld64_x16;
+-      qu8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__sse41_mul16_ld64_x16;
+-      qu8_vmul_config.init.qu8_mul = xnn_init_qu8_mul_minmax_fp32_sse2_params;
+-      qu8_vmul_config.element_tile = 16;
+-    } else {
+-      qu8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmul_minmax_fp32_ukernel__sse2_mul16_ld64_x8;
+-      qu8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__sse2_mul16_ld64_x8;
+-      qu8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__sse2_mul16_ld64_x8;
+-      qu8_vmul_config.init.qu8_mul = xnn_init_qu8_mul_minmax_fp32_sse2_params;
+-      qu8_vmul_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    qu8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmul_minmax_fp32_ukernel__wasmsimd_mul32_ld64_x8;
+-    qu8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__wasmsimd_mul32_ld64_x8;
+-    qu8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__wasmsimd_mul32_ld64_x8;
+-    qu8_vmul_config.init.qu8_mul = xnn_init_qu8_mul_minmax_fp32_wasmsimd_params;
+-    qu8_vmul_config.element_tile = 8;
+-  #elif XNN_ARCH_WASM
+-    qu8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmul_minmax_fp32_ukernel__scalar_x4;
+-    qu8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__scalar_x4;
+-    qu8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__scalar_x4;
+-    qu8_vmul_config.init.qu8_mul = xnn_init_qu8_mul_minmax_fp32_scalar_params;
+-    qu8_vmul_config.element_tile = 4;
+-  #elif XNN_ARCH_RISCV
+-    qu8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmul_minmax_fp32_ukernel__scalar_x4;
+-    qu8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__scalar_x4;
+-    qu8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__scalar_x4;
+-    qu8_vmul_config.init.qu8_mul = xnn_init_qu8_mul_minmax_fp32_scalar_params;
+-    qu8_vmul_config.element_tile = 4;
+-  #else
+-    #error "Unsupported architecture"
+-  #endif
+-}
++// static void init_qu8_vmul_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon){
++//       qu8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmul_minmax_rndnu_ukernel__neon_ld64_x16;
++//       qu8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_rndnu_ukernel__neon_ld64_x16;
++//       qu8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_rndnu_ukernel__neon_ld64_x16;
++//       qu8_vmul_config.init.qu8_mul = xnn_init_qu8_mul_minmax_rndnu_neon_params;
++//       qu8_vmul_config.element_tile = 16;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       qu8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmul_minmax_fp32_ukernel__scalar_x4;
++//       qu8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__scalar_x4;
++//       qu8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__scalar_x4;
++//       qu8_vmul_config.init.qu8_mul = xnn_init_qu8_mul_minmax_fp32_scalar_params;
++//       qu8_vmul_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     qu8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmul_minmax_rndnu_ukernel__neon_ld64_x16;
++//     qu8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_rndnu_ukernel__neon_ld64_x16;
++//     qu8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_rndnu_ukernel__neon_ld64_x16;
++//     qu8_vmul_config.init.qu8_mul = xnn_init_qu8_mul_minmax_rndnu_neon_params;
++//     qu8_vmul_config.element_tile = 16;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx) {
++//       qu8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmul_minmax_fp32_ukernel__avx_mul16_ld64_x16;
++//       qu8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__avx_mul16_ld64_x16;
++//       qu8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__avx_mul16_ld64_x16;
++//       qu8_vmul_config.init.qu8_mul = xnn_init_qu8_mul_minmax_fp32_sse2_params;
++//       qu8_vmul_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       qu8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmul_minmax_fp32_ukernel__sse41_mul16_ld64_x16;
++//       qu8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__sse41_mul16_ld64_x16;
++//       qu8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__sse41_mul16_ld64_x16;
++//       qu8_vmul_config.init.qu8_mul = xnn_init_qu8_mul_minmax_fp32_sse2_params;
++//       qu8_vmul_config.element_tile = 16;
++//     } else {
++//       qu8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmul_minmax_fp32_ukernel__sse2_mul16_ld64_x8;
++//       qu8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__sse2_mul16_ld64_x8;
++//       qu8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__sse2_mul16_ld64_x8;
++//       qu8_vmul_config.init.qu8_mul = xnn_init_qu8_mul_minmax_fp32_sse2_params;
++//       qu8_vmul_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     qu8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmul_minmax_fp32_ukernel__wasmsimd_mul32_ld64_x8;
++//     qu8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__wasmsimd_mul32_ld64_x8;
++//     qu8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__wasmsimd_mul32_ld64_x8;
++//     qu8_vmul_config.init.qu8_mul = xnn_init_qu8_mul_minmax_fp32_wasmsimd_params;
++//     qu8_vmul_config.element_tile = 8;
++//   #elif XNN_ARCH_WASM
++//     qu8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmul_minmax_fp32_ukernel__scalar_x4;
++//     qu8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__scalar_x4;
++//     qu8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__scalar_x4;
++//     qu8_vmul_config.init.qu8_mul = xnn_init_qu8_mul_minmax_fp32_scalar_params;
++//     qu8_vmul_config.element_tile = 4;
++//   #elif XNN_ARCH_RISCV
++//     qu8_vmul_config.minmax.op_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmul_minmax_fp32_ukernel__scalar_x4;
++//     qu8_vmul_config.minmax.opc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__scalar_x4;
++//     qu8_vmul_config.minmax.ropc_ukernel = (xnn_vbinary_ukernel_fn) xnn_qu8_vmulc_minmax_fp32_ukernel__scalar_x4;
++//     qu8_vmul_config.init.qu8_mul = xnn_init_qu8_mul_minmax_fp32_scalar_params;
++//     qu8_vmul_config.element_tile = 4;
++//   #else
++//     #error "Unsupported architecture"
++//   #endif
++// }
+ 
+ #if XNN_PLATFORM_WINDOWS
+   static BOOL CALLBACK init_f16_vadd_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_vadd_config();
++    //init_f16_vadd_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f16_vdiv_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_vdiv_config();
++    //init_f16_vdiv_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f16_vmax_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_vmax_config();
++    //init_f16_vmax_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f16_vmin_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_vmin_config();
++    //init_f16_vmin_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f16_vmul_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_vmul_config();
++    //init_f16_vmul_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f16_vsub_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_vsub_config();
++    //init_f16_vsub_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f16_vsqrdiff_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_vsqrdiff_config();
++    //init_f16_vsqrdiff_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_vadd_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_vadd_config();
++    //init_f32_vadd_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_vdiv_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_vdiv_config();
++    //init_f32_vdiv_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_vmax_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_vmax_config();
++    //init_f32_vmax_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_vmin_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_vmin_config();
++    //init_f32_vmin_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_vmul_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_vmul_config();
++    //init_f32_vmul_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_vsub_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_vsub_config();
++    //init_f32_vsub_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_vsqrdiff_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_vsqrdiff_config();
++    //init_f32_vsqrdiff_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_qs8_vadd_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_qs8_vadd_config();
++    //init_qs8_vadd_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_qs8_vmul_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_qs8_vmul_config();
++    //init_qs8_vmul_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_qu8_vadd_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_qu8_vadd_config();
++    //init_qu8_vadd_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_qu8_vmul_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_qu8_vmul_config();
++    //init_qu8_vmul_config();
+     return TRUE;
+   }
+ #endif
+diff --git a/src/conv-hwc2chw-config.c b/src/conv-hwc2chw-config.c
+index 63ff0cfdc..f6d8c4e8e 100644
+--- a/src/conv-hwc2chw-config.c
++++ b/src/conv-hwc2chw-config.c
+@@ -29,97 +29,97 @@ static struct xnn_conv_hwc2chw_config f32_conv_hwc2chw_3x3c3s2_config = {0};
+   static pthread_once_t init_guard_f32_conv_hwc2chw_3x3c3s2 = PTHREAD_ONCE_INIT;
+ #endif
+ 
+-static void init_f16_conv_hwc2chw_3x3c3s2_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_conv_hwc2chw_3x3c3s2_config.ukernel_with_symm_padding =
+-        (xnn_conv_hwc2chw_ukernel_fn) xnn_f16_conv_hwc2chw_ukernel_3x3s2p1c3x4__neonfp16arith_2x2;
+-      f16_conv_hwc2chw_3x3c3s2_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
+-      f16_conv_hwc2chw_3x3c3s2_config.output_channel_tile = 4;
+-      f16_conv_hwc2chw_3x3c3s2_config.output_height_tile = 2;
+-      f16_conv_hwc2chw_3x3c3s2_config.output_width_tile = 2;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_conv_hwc2chw_3x3c3s2_config.ukernel_with_symm_padding =
+-        (xnn_conv_hwc2chw_ukernel_fn) xnn_f16_conv_hwc2chw_ukernel_3x3s2p1c3x4__neonfp16arith_2x2;
+-      f16_conv_hwc2chw_3x3c3s2_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
+-      f16_conv_hwc2chw_3x3c3s2_config.output_channel_tile = 4;
+-      f16_conv_hwc2chw_3x3c3s2_config.output_height_tile = 2;
+-      f16_conv_hwc2chw_3x3c3s2_config.output_width_tile = 2;
+-    }
+-  #endif
+-}
++// static void init_f16_conv_hwc2chw_3x3c3s2_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_conv_hwc2chw_3x3c3s2_config.ukernel_with_symm_padding =
++//         (xnn_conv_hwc2chw_ukernel_fn) xnn_f16_conv_hwc2chw_ukernel_3x3s2p1c3x4__neonfp16arith_2x2;
++//       f16_conv_hwc2chw_3x3c3s2_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
++//       f16_conv_hwc2chw_3x3c3s2_config.output_channel_tile = 4;
++//       f16_conv_hwc2chw_3x3c3s2_config.output_height_tile = 2;
++//       f16_conv_hwc2chw_3x3c3s2_config.output_width_tile = 2;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_conv_hwc2chw_3x3c3s2_config.ukernel_with_symm_padding =
++//         (xnn_conv_hwc2chw_ukernel_fn) xnn_f16_conv_hwc2chw_ukernel_3x3s2p1c3x4__neonfp16arith_2x2;
++//       f16_conv_hwc2chw_3x3c3s2_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
++//       f16_conv_hwc2chw_3x3c3s2_config.output_channel_tile = 4;
++//       f16_conv_hwc2chw_3x3c3s2_config.output_height_tile = 2;
++//       f16_conv_hwc2chw_3x3c3s2_config.output_width_tile = 2;
++//     }
++//   #endif
++// }
+ 
+-static void init_f32_conv_hwc2chw_3x3c3s2_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      f32_conv_hwc2chw_3x3c3s2_config.ukernel_with_symm_padding =
+-        (xnn_conv_hwc2chw_ukernel_fn) xnn_f32_conv_hwc2chw_ukernel_3x3s2p1c3x4__neon_2x2;
+-      f32_conv_hwc2chw_3x3c3s2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_conv_hwc2chw_3x3c3s2_config.output_channel_tile = 4;
+-      f32_conv_hwc2chw_3x3c3s2_config.output_height_tile = 2;
+-      f32_conv_hwc2chw_3x3c3s2_config.output_width_tile = 2;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_conv_hwc2chw_3x3c3s2_config.ukernel_with_symm_padding =
+-        (xnn_conv_hwc2chw_ukernel_fn) xnn_f32_conv_hwc2chw_ukernel_3x3s2p1c3x4__scalar_1x1;
+-      f32_conv_hwc2chw_3x3c3s2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_conv_hwc2chw_3x3c3s2_config.output_channel_tile = 4;
+-      f32_conv_hwc2chw_3x3c3s2_config.output_height_tile = 1;
+-      f32_conv_hwc2chw_3x3c3s2_config.output_width_tile = 1;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_conv_hwc2chw_3x3c3s2_config.ukernel_with_symm_padding =
+-      (xnn_conv_hwc2chw_ukernel_fn) xnn_f32_conv_hwc2chw_ukernel_3x3s2p1c3x4__aarch64_neonfma_2x2;
+-    f32_conv_hwc2chw_3x3c3s2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_conv_hwc2chw_3x3c3s2_config.output_channel_tile = 4;
+-    f32_conv_hwc2chw_3x3c3s2_config.output_height_tile = 2;
+-    f32_conv_hwc2chw_3x3c3s2_config.output_width_tile = 2;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    f32_conv_hwc2chw_3x3c3s2_config.ukernel_with_symm_padding =
+-      (xnn_conv_hwc2chw_ukernel_fn) xnn_f32_conv_hwc2chw_ukernel_3x3s2p1c3x4__sse_2x2;
+-    f32_conv_hwc2chw_3x3c3s2_config.init.f32 = xnn_init_f32_minmax_sse_params;
+-    f32_conv_hwc2chw_3x3c3s2_config.output_channel_tile = 4;
+-    f32_conv_hwc2chw_3x3c3s2_config.output_height_tile = 2;
+-    f32_conv_hwc2chw_3x3c3s2_config.output_width_tile = 2;
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    f32_conv_hwc2chw_3x3c3s2_config.ukernel_with_symm_padding =
+-      (xnn_conv_hwc2chw_ukernel_fn) xnn_f32_conv_hwc2chw_ukernel_3x3s2p1c3x4__wasmsimd_2x2;
+-    f32_conv_hwc2chw_3x3c3s2_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-    f32_conv_hwc2chw_3x3c3s2_config.output_channel_tile = 4;
+-    f32_conv_hwc2chw_3x3c3s2_config.output_height_tile = 2;
+-    f32_conv_hwc2chw_3x3c3s2_config.output_width_tile = 2;
+-  #elif XNN_ARCH_WASM
+-    f32_conv_hwc2chw_3x3c3s2_config.ukernel_with_symm_padding =
+-      (xnn_conv_hwc2chw_ukernel_fn) xnn_f32_conv_hwc2chw_ukernel_3x3s2p1c3x4__scalar_1x1;
+-    f32_conv_hwc2chw_3x3c3s2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_conv_hwc2chw_3x3c3s2_config.output_channel_tile = 4;
+-    f32_conv_hwc2chw_3x3c3s2_config.output_height_tile = 1;
+-    f32_conv_hwc2chw_3x3c3s2_config.output_width_tile = 1;
+-  #elif XNN_ARCH_RISCV
+-    f32_conv_hwc2chw_3x3c3s2_config.ukernel_with_symm_padding =
+-      (xnn_conv_hwc2chw_ukernel_fn) xnn_f32_conv_hwc2chw_ukernel_3x3s2p1c3x4__scalar_1x1;
+-    f32_conv_hwc2chw_3x3c3s2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_conv_hwc2chw_3x3c3s2_config.output_channel_tile = 4;
+-    f32_conv_hwc2chw_3x3c3s2_config.output_height_tile = 1;
+-    f32_conv_hwc2chw_3x3c3s2_config.output_width_tile = 1;
+-  #endif
+-}
++// static void init_f32_conv_hwc2chw_3x3c3s2_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       f32_conv_hwc2chw_3x3c3s2_config.ukernel_with_symm_padding =
++//         (xnn_conv_hwc2chw_ukernel_fn) xnn_f32_conv_hwc2chw_ukernel_3x3s2p1c3x4__neon_2x2;
++//       f32_conv_hwc2chw_3x3c3s2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_conv_hwc2chw_3x3c3s2_config.output_channel_tile = 4;
++//       f32_conv_hwc2chw_3x3c3s2_config.output_height_tile = 2;
++//       f32_conv_hwc2chw_3x3c3s2_config.output_width_tile = 2;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_conv_hwc2chw_3x3c3s2_config.ukernel_with_symm_padding =
++//         (xnn_conv_hwc2chw_ukernel_fn) xnn_f32_conv_hwc2chw_ukernel_3x3s2p1c3x4__scalar_1x1;
++//       f32_conv_hwc2chw_3x3c3s2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_conv_hwc2chw_3x3c3s2_config.output_channel_tile = 4;
++//       f32_conv_hwc2chw_3x3c3s2_config.output_height_tile = 1;
++//       f32_conv_hwc2chw_3x3c3s2_config.output_width_tile = 1;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_conv_hwc2chw_3x3c3s2_config.ukernel_with_symm_padding =
++//       (xnn_conv_hwc2chw_ukernel_fn) xnn_f32_conv_hwc2chw_ukernel_3x3s2p1c3x4__aarch64_neonfma_2x2;
++//     f32_conv_hwc2chw_3x3c3s2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_conv_hwc2chw_3x3c3s2_config.output_channel_tile = 4;
++//     f32_conv_hwc2chw_3x3c3s2_config.output_height_tile = 2;
++//     f32_conv_hwc2chw_3x3c3s2_config.output_width_tile = 2;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     f32_conv_hwc2chw_3x3c3s2_config.ukernel_with_symm_padding =
++//       (xnn_conv_hwc2chw_ukernel_fn) xnn_f32_conv_hwc2chw_ukernel_3x3s2p1c3x4__sse_2x2;
++//     f32_conv_hwc2chw_3x3c3s2_config.init.f32 = xnn_init_f32_minmax_sse_params;
++//     f32_conv_hwc2chw_3x3c3s2_config.output_channel_tile = 4;
++//     f32_conv_hwc2chw_3x3c3s2_config.output_height_tile = 2;
++//     f32_conv_hwc2chw_3x3c3s2_config.output_width_tile = 2;
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     f32_conv_hwc2chw_3x3c3s2_config.ukernel_with_symm_padding =
++//       (xnn_conv_hwc2chw_ukernel_fn) xnn_f32_conv_hwc2chw_ukernel_3x3s2p1c3x4__wasmsimd_2x2;
++//     f32_conv_hwc2chw_3x3c3s2_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//     f32_conv_hwc2chw_3x3c3s2_config.output_channel_tile = 4;
++//     f32_conv_hwc2chw_3x3c3s2_config.output_height_tile = 2;
++//     f32_conv_hwc2chw_3x3c3s2_config.output_width_tile = 2;
++//   #elif XNN_ARCH_WASM
++//     f32_conv_hwc2chw_3x3c3s2_config.ukernel_with_symm_padding =
++//       (xnn_conv_hwc2chw_ukernel_fn) xnn_f32_conv_hwc2chw_ukernel_3x3s2p1c3x4__scalar_1x1;
++//     f32_conv_hwc2chw_3x3c3s2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_conv_hwc2chw_3x3c3s2_config.output_channel_tile = 4;
++//     f32_conv_hwc2chw_3x3c3s2_config.output_height_tile = 1;
++//     f32_conv_hwc2chw_3x3c3s2_config.output_width_tile = 1;
++//   #elif XNN_ARCH_RISCV
++//     f32_conv_hwc2chw_3x3c3s2_config.ukernel_with_symm_padding =
++//       (xnn_conv_hwc2chw_ukernel_fn) xnn_f32_conv_hwc2chw_ukernel_3x3s2p1c3x4__scalar_1x1;
++//     f32_conv_hwc2chw_3x3c3s2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_conv_hwc2chw_3x3c3s2_config.output_channel_tile = 4;
++//     f32_conv_hwc2chw_3x3c3s2_config.output_height_tile = 1;
++//     f32_conv_hwc2chw_3x3c3s2_config.output_width_tile = 1;
++//   #endif
++// }
+ 
+ #if XNN_PLATFORM_WINDOWS
+   static BOOL CALLBACK init_f16_conv_hwc2chw_3x3c3s2_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_conv_hwc2chw_3x3c3s2_config();
++    //init_f16_conv_hwc2chw_3x3c3s2_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_conv_hwc2chw_3x3c3s2_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_conv_hwc2chw_3x3c3s2_config();
++    //init_f32_conv_hwc2chw_3x3c3s2_config();
+     return TRUE;
+   }
+ #endif
+diff --git a/src/dwconv-config.c b/src/dwconv-config.c
+index e213ba7e6..2d19cab17 100644
+--- a/src/dwconv-config.c
++++ b/src/dwconv-config.c
+@@ -41,1290 +41,1290 @@ static struct xnn_dwconv_config qu8_dwconv_config[XNN_MAX_QU8_DWCONV_UKERNELS] =
+   static pthread_once_t init_guard_qu8_dwconv = PTHREAD_ONCE_INIT;
+ #endif
+ 
+-static void init_f16_dwconv_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f16_dwconv_minmax_ukernel_3p16c__neonfp16arith;
+-      f16_dwconv_config[0].init.f16 = xnn_init_f16_minmax_fp16arith_params;
+-      f16_dwconv_config[0].channel_tile = 16;
+-      f16_dwconv_config[0].channel_subtile = 16;
+-      f16_dwconv_config[0].channel_round = 1;
+-      f16_dwconv_config[0].primary_tile = 3;
+-
+-      f16_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f16_dwconv_minmax_ukernel_4p16c__neonfp16arith;
+-      f16_dwconv_config[1].init.f16 = xnn_init_f16_minmax_fp16arith_params;
+-      f16_dwconv_config[1].channel_tile = 16;
+-      f16_dwconv_config[1].channel_subtile = 16;
+-      f16_dwconv_config[1].channel_round = 1;
+-      f16_dwconv_config[1].primary_tile = 4;
+-
+-      f16_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f16_dwconv_minmax_ukernel_9p8c__neonfp16arith;
+-      f16_dwconv_config[2].init.f16 = xnn_init_f16_minmax_fp16arith_params;
+-      f16_dwconv_config[2].channel_tile = 8;
+-      f16_dwconv_config[2].channel_subtile = 8;
+-      f16_dwconv_config[2].channel_round = 1;
+-      f16_dwconv_config[2].primary_tile = 9;
+-
+-      f16_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f16_dwconv_minmax_ukernel_25p8c__neonfp16arith_acc2;
+-      f16_dwconv_config[3].init.f16 = xnn_init_f16_minmax_fp16arith_params;
+-      f16_dwconv_config[3].channel_tile = 8;
+-      f16_dwconv_config[3].channel_subtile = 8;
+-      f16_dwconv_config[3].channel_round = 1;
+-      f16_dwconv_config[3].primary_tile = 25;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f16_dwconv_minmax_ukernel_3p16c__neonfp16arith;
+-      f16_dwconv_config[0].init.f16 = xnn_init_f16_minmax_fp16arith_params;
+-      f16_dwconv_config[0].channel_tile = 16;
+-      f16_dwconv_config[0].channel_subtile = 16;
+-      f16_dwconv_config[0].channel_round = 1;
+-      f16_dwconv_config[0].primary_tile = 3;
+-
+-      f16_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f16_dwconv_minmax_ukernel_4p16c__neonfp16arith;
+-      f16_dwconv_config[1].init.f16 = xnn_init_f16_minmax_fp16arith_params;
+-      f16_dwconv_config[1].channel_tile = 16;
+-      f16_dwconv_config[1].channel_subtile = 16;
+-      f16_dwconv_config[1].channel_round = 1;
+-      f16_dwconv_config[1].primary_tile = 4;
+-
+-      f16_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f16_dwconv_minmax_ukernel_9p16c__neonfp16arith;
+-      f16_dwconv_config[2].init.f16 = xnn_init_f16_minmax_fp16arith_params;
+-      f16_dwconv_config[2].channel_tile = 16;
+-      f16_dwconv_config[2].channel_subtile = 16;
+-      f16_dwconv_config[2].channel_round = 1;
+-      f16_dwconv_config[2].primary_tile = 9;
+-
+-      f16_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f16_dwconv_minmax_ukernel_25p8c__neonfp16arith_acc2;
+-      f16_dwconv_config[3].init.f16 = xnn_init_f16_minmax_fp16arith_params;
+-      f16_dwconv_config[3].channel_tile = 8;
+-      f16_dwconv_config[3].channel_subtile = 8;
+-      f16_dwconv_config[3].channel_round = 1;
+-      f16_dwconv_config[3].primary_tile = 25;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx2) {
+-      f16_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f16_dwconv_minmax_ukernel_3p16c__fma3;
+-      f16_dwconv_config[0].init.f16 = xnn_init_f16_minmax_avx_params;
+-      f16_dwconv_config[0].channel_tile = 16;
+-      f16_dwconv_config[0].channel_subtile = 16;
+-      f16_dwconv_config[0].channel_round = 1;
+-      f16_dwconv_config[0].primary_tile = 3;
+-
+-      f16_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f16_dwconv_minmax_ukernel_4p16c__fma3;
+-      f16_dwconv_config[1].init.f16 = xnn_init_f16_minmax_avx_params;
+-      f16_dwconv_config[1].channel_tile = 16;
+-      f16_dwconv_config[1].channel_subtile = 16;
+-      f16_dwconv_config[1].channel_round = 1;
+-      f16_dwconv_config[1].primary_tile = 4;
+-
+-      f16_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f16_dwconv_minmax_ukernel_9p16c__fma3;
+-      f16_dwconv_config[2].init.f16 = xnn_init_f16_minmax_avx_params;
+-      f16_dwconv_config[2].channel_tile = 16;
+-      f16_dwconv_config[2].channel_subtile = 16;
+-      f16_dwconv_config[2].channel_round = 1;
+-      f16_dwconv_config[2].primary_tile = 9;
+-
+-      f16_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f16_dwconv_minmax_ukernel_25p8c__fma3_acc2;
+-      f16_dwconv_config[3].init.f16 = xnn_init_f16_minmax_avx_params;
+-      f16_dwconv_config[3].channel_tile = 8;
+-      f16_dwconv_config[3].channel_subtile = 8;
+-      f16_dwconv_config[3].channel_round = 1;
+-      f16_dwconv_config[3].primary_tile = 25;
+-    }
+-  #endif
+-}
+-
+-static void init_f32_dwconv_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      f32_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3p8c__neon;
+-      f32_dwconv_config[0].init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_dwconv_config[0].channel_tile = 8,
+-      f32_dwconv_config[0].channel_subtile = 8,
+-      f32_dwconv_config[0].channel_round = 1,
+-      f32_dwconv_config[0].primary_tile = 3,
+-
+-      f32_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_4p8c__neon;
+-      f32_dwconv_config[1].init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_dwconv_config[1].channel_tile = 8,
+-      f32_dwconv_config[1].channel_subtile = 8,
+-      f32_dwconv_config[1].channel_round = 1,
+-      f32_dwconv_config[1].primary_tile = 4,
+-
+-      f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p8c__neon;
+-      f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_dwconv_config[2].channel_tile = 8;
+-      f32_dwconv_config[2].channel_subtile = 8;
+-      f32_dwconv_config[2].channel_round = 1;
+-      f32_dwconv_config[2].primary_tile = 9;
+-
+-      #if XNN_ENABLE_DWCONV_MULTIPASS
+-        f32_dwconv_config[3].minmax.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_8f8m9l4c4s4r__neon_acc2;
+-        f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_scalar_params;
+-        f32_dwconv_config[3].channel_tile = 4;
+-        f32_dwconv_config[3].channel_subtile = 4;
+-        f32_dwconv_config[3].channel_round = 4;
+-        f32_dwconv_config[3].primary_tile = 8;
+-        f32_dwconv_config[3].middle_tile = 8;
+-        f32_dwconv_config[3].last_tile = 9;
+-      #else
+-        f32_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_25p8c__neon_acc2;
+-        f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_scalar_params;
+-        f32_dwconv_config[3].channel_tile = 8;
+-        f32_dwconv_config[3].channel_subtile = 8;
+-        f32_dwconv_config[3].channel_round = 1;
+-        f32_dwconv_config[3].primary_tile = 25;
+-      #endif  // XNN_ENABLE_DWCONV_MULTIPASS
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3p1c__scalar_acc2;
+-      f32_dwconv_config[0].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_3p1c__scalar_acc2;
+-      f32_dwconv_config[0].init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_dwconv_config[0].channel_tile = 1;
+-      f32_dwconv_config[0].channel_subtile = 1;
+-      f32_dwconv_config[0].channel_round = 1;
+-      f32_dwconv_config[0].primary_tile = 3;
+-
+-      f32_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_4p1c__scalar_acc2;
+-      f32_dwconv_config[1].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_4p1c__scalar_acc2;
+-      f32_dwconv_config[1].init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_dwconv_config[1].channel_tile = 1;
+-      f32_dwconv_config[1].channel_subtile = 1;
+-      f32_dwconv_config[1].channel_round = 1;
+-      f32_dwconv_config[1].primary_tile = 4;
+-
+-      f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p1c__scalar_acc2;
+-      f32_dwconv_config[2].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_9p1c__scalar_acc2;
+-      f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_dwconv_config[2].channel_tile = 1;
+-      f32_dwconv_config[2].channel_subtile = 1;
+-      f32_dwconv_config[2].channel_round = 1;
+-      f32_dwconv_config[2].primary_tile = 9;
+-
+-      #if XNN_ENABLE_DWCONV_MULTIPASS
+-        f32_dwconv_config[3].minmax.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_2f2m2l4c1s1r__scalar_acc2;
+-        f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_scalar_params;
+-        f32_dwconv_config[3].channel_tile = 4;
+-        f32_dwconv_config[3].channel_subtile = 1;
+-        f32_dwconv_config[3].channel_round = 1;
+-        f32_dwconv_config[3].primary_tile = 2;
+-        f32_dwconv_config[3].middle_tile = 2;
+-        f32_dwconv_config[3].last_tile = 2;
+-      #else
+-        f32_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_25p1c__scalar_acc2;
+-        f32_dwconv_config[3].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_25p1c__scalar_acc2;
+-        f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_scalar_params;
+-        f32_dwconv_config[3].channel_tile = 1;
+-        f32_dwconv_config[3].primary_tile = 25;
+-      #endif  // XNN_ENABLE_DWCONV_MULTIPASS
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3p8c__neonfma;
+-    f32_dwconv_config[0].init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_dwconv_config[0].channel_tile = 8;
+-    f32_dwconv_config[0].channel_subtile = 8;
+-    f32_dwconv_config[0].channel_round = 1;
+-    f32_dwconv_config[0].primary_tile = 3;
+-
+-    f32_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_4p8c__neonfma;
+-    f32_dwconv_config[1].init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_dwconv_config[1].channel_tile = 8;
+-    f32_dwconv_config[1].channel_subtile = 8;
+-    f32_dwconv_config[1].channel_round = 1;
+-    f32_dwconv_config[1].primary_tile = 4;
+-
+-    #if XNN_PLATFORM_IOS || XNN_PLATFORM_MAC || XNN_PLATFORM_WINDOWS
+-      f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p8c__neonfma;
+-      f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_dwconv_config[2].channel_tile = 8;
+-      f32_dwconv_config[2].channel_subtile = 8;
+-      f32_dwconv_config[2].channel_round = 1;
+-      f32_dwconv_config[2].primary_tile = 9;
+-    #else  // !XNN_PLATFORM_IOS && !XNN_PLATFORM_MAC
+-      switch (cpuinfo_get_core(0)->uarch) {
+-        case cpuinfo_uarch_kryo:
+-          f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p8c__neonfma;
+-          f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_scalar_params;
+-          f32_dwconv_config[2].channel_tile = 8;
+-          f32_dwconv_config[2].channel_subtile = 8;
+-          f32_dwconv_config[2].channel_round = 1;
+-          f32_dwconv_config[2].primary_tile = 9;
+-          break;
+-        #if XNN_ENABLE_ASSEMBLY
+-          case cpuinfo_uarch_cortex_a53:
+-          case cpuinfo_uarch_cortex_a55r0:
+-          case cpuinfo_uarch_cortex_a55:
+-            f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p4c__asm_aarch64_neonfma_cortex_a55;
+-            f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_scalar_params;
+-            f32_dwconv_config[2].channel_tile = 4;
+-            f32_dwconv_config[2].channel_subtile = 4;
+-            f32_dwconv_config[2].channel_round = 1;
+-            f32_dwconv_config[2].primary_tile = 9;
+-            break;
+-        #endif  // XNN_ENABLE_ASSEMBLY
+-        default:
+-          f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p8c__neonfma;
+-          f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_scalar_params;
+-          f32_dwconv_config[2].channel_tile = 8;
+-          f32_dwconv_config[2].channel_subtile = 8;
+-          f32_dwconv_config[2].channel_round = 1;
+-          f32_dwconv_config[2].primary_tile = 9;
+-          break;
+-      }
+-    #endif  // XNN_PLATFORM_IOS && XNN_PLATFORM_MAC
+-
+-    #if XNN_ENABLE_DWCONV_MULTIPASS
+-      f32_dwconv_config[3].minmax.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_5f5m5l8c4s4r__neonfma_acc2;
+-      f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_dwconv_config[3].channel_tile = 8;
+-      f32_dwconv_config[3].channel_subtile = 4;
+-      f32_dwconv_config[3].channel_round = 4;
+-      f32_dwconv_config[3].primary_tile = 5;
+-      f32_dwconv_config[3].middle_tile = 5;
+-      f32_dwconv_config[3].last_tile = 5;
+-    #else
+-      f32_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_25p8c__neonfma_acc2;
+-      f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_dwconv_config[3].channel_tile = 8;
+-      f32_dwconv_config[3].channel_subtile = 8;
+-      f32_dwconv_config[3].channel_round = 1;
+-      f32_dwconv_config[3].primary_tile = 25;
+-    #endif  // XNN_ENABLE_DWCONV_MULTIPASS
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
+-      f32_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3p16c__avx512f;
+-      f32_dwconv_config[0].init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_dwconv_config[0].channel_tile = 16;
+-      f32_dwconv_config[0].channel_subtile = 16;
+-      f32_dwconv_config[0].channel_round = 1;
+-      f32_dwconv_config[0].primary_tile = 3;
+-
+-      f32_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_4p16c__avx512f;
+-      f32_dwconv_config[1].init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_dwconv_config[1].channel_tile = 16;
+-      f32_dwconv_config[1].channel_subtile = 16;
+-      f32_dwconv_config[1].channel_round = 1;
+-      f32_dwconv_config[1].primary_tile = 4;
+-
+-      f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p16c__avx512f;
+-      f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_dwconv_config[2].channel_tile = 16;
+-      f32_dwconv_config[2].channel_subtile = 16;
+-      f32_dwconv_config[2].channel_round = 1;
+-      f32_dwconv_config[2].primary_tile = 9;
+-
+-      #if XNN_ENABLE_DWCONV_MULTIPASS
+-        f32_dwconv_config[3].minmax.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_5f5m5l32c16s1r__avx512f_acc2;
+-        f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_scalar_params;
+-        f32_dwconv_config[3].channel_tile = 16;
+-        f32_dwconv_config[3].channel_subtile = 16;
+-        f32_dwconv_config[3].channel_round = 4;
+-        f32_dwconv_config[3].primary_tile = 5;
+-        f32_dwconv_config[3].middle_tile = 5;
+-        f32_dwconv_config[3].last_tile = 5;
+-      #else
+-        f32_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_25p16c__avx512f;
+-        f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_scalar_params;
+-        f32_dwconv_config[3].channel_tile = 16;
+-        f32_dwconv_config[3].channel_subtile = 16;
+-        f32_dwconv_config[3].channel_round = 1;
+-        f32_dwconv_config[3].primary_tile = 25;
+-      #endif  // XNN_ENABLE_DWCONV_MULTIPASS
+-    } else if (hardware_config->use_x86_fma3) {
+-      f32_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3p16c__fma3;
+-      f32_dwconv_config[0].init.f32 = xnn_init_f32_minmax_avx_params;
+-      f32_dwconv_config[0].channel_tile = 16;
+-      f32_dwconv_config[0].channel_subtile = 16;
+-      f32_dwconv_config[0].channel_round = 1;
+-      f32_dwconv_config[0].primary_tile = 3;
+-
+-      f32_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_4p16c__fma3;
+-      f32_dwconv_config[1].init.f32 = xnn_init_f32_minmax_avx_params;
+-      f32_dwconv_config[1].channel_tile = 16;
+-      f32_dwconv_config[1].channel_subtile = 16;
+-      f32_dwconv_config[1].channel_round = 1;
+-      f32_dwconv_config[1].primary_tile = 4;
+-
+-      f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p16c__fma3;
+-      f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_avx_params;
+-      f32_dwconv_config[2].channel_tile = 16;
+-      f32_dwconv_config[2].channel_subtile = 16;
+-      f32_dwconv_config[2].channel_round = 1;
+-      f32_dwconv_config[2].primary_tile = 9;
+-
+-      #if XNN_ENABLE_DWCONV_MULTIPASS
+-        f32_dwconv_config[3].minmax.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_5f5m5l8c8s4r__fma3;
+-        f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_avx_params;
+-        f32_dwconv_config[3].channel_tile = 8;
+-        f32_dwconv_config[3].channel_subtile = 8;
+-        f32_dwconv_config[3].channel_round = 4;
+-        f32_dwconv_config[3].primary_tile = 5;
+-        f32_dwconv_config[3].middle_tile = 5;
+-        f32_dwconv_config[3].last_tile = 5;
+-      #else
+-        f32_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_25p8c__fma3;
+-        f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_avx_params;
+-        f32_dwconv_config[3].channel_tile = 8;
+-        f32_dwconv_config[3].channel_subtile = 8;
+-        f32_dwconv_config[3].channel_round = 1;
+-        f32_dwconv_config[3].primary_tile = 25;
+-      #endif  // XNN_ENABLE_DWCONV_MULTIPASS
+-    } else if (hardware_config->use_x86_avx) {
+-      f32_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3p16c__avx;
+-      f32_dwconv_config[0].init.f32 = xnn_init_f32_minmax_avx_params;
+-      f32_dwconv_config[0].channel_tile = 16;
+-      f32_dwconv_config[0].channel_subtile = 16;
+-      f32_dwconv_config[0].channel_round = 1;
+-      f32_dwconv_config[0].primary_tile = 3;
+-
+-      f32_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_4p16c__avx;
+-      f32_dwconv_config[1].init.f32 = xnn_init_f32_minmax_avx_params;
+-      f32_dwconv_config[1].channel_tile = 16;
+-      f32_dwconv_config[1].channel_subtile = 16;
+-      f32_dwconv_config[1].channel_round = 1;
+-      f32_dwconv_config[1].primary_tile = 4;
+-
+-      f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p16c__avx;
+-      f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_avx_params;
+-      f32_dwconv_config[2].channel_tile = 16;
+-      f32_dwconv_config[2].channel_subtile = 16;
+-      f32_dwconv_config[2].channel_round = 1;
+-      f32_dwconv_config[2].primary_tile = 9;
+-
+-      #if XNN_ENABLE_DWCONV_MULTIPASS
+-        f32_dwconv_config[3].minmax.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_6f6m7l8c8s4r__avx_acc2;
+-        f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_sse_params;
+-        f32_dwconv_config[3].channel_tile = 8;
+-        f32_dwconv_config[3].channel_subtile = 8;
+-        f32_dwconv_config[3].channel_round = 4;
+-        f32_dwconv_config[3].primary_tile = 6;
+-        f32_dwconv_config[3].middle_tile = 6;
+-        f32_dwconv_config[3].last_tile = 7;
+-      #else
+-        f32_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_25p8c__avx;
+-        f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_avx_params;
+-        f32_dwconv_config[3].channel_tile = 8;
+-        f32_dwconv_config[3].channel_subtile = 8;
+-        f32_dwconv_config[3].channel_round = 1;
+-        f32_dwconv_config[3].primary_tile = 25;
+-      #endif  // XNN_ENABLE_DWCONV_MULTIPASS
+-    } else {
+-      f32_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3p8c__sse;
+-      f32_dwconv_config[0].init.f32 = xnn_init_f32_minmax_sse_params;
+-      f32_dwconv_config[0].channel_tile = 8;
+-      f32_dwconv_config[0].channel_subtile = 8;
+-      f32_dwconv_config[0].channel_round = 1;
+-      f32_dwconv_config[0].primary_tile = 3;
+-
+-      f32_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_4p8c__sse;
+-      f32_dwconv_config[1].init.f32 = xnn_init_f32_minmax_sse_params;
+-      f32_dwconv_config[1].channel_tile = 8;
+-      f32_dwconv_config[1].channel_subtile = 8;
+-      f32_dwconv_config[1].channel_round = 1;
+-      f32_dwconv_config[1].primary_tile = 4;
+-
+-      f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p8c__sse;
+-      f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_sse_params;
+-      f32_dwconv_config[2].channel_tile = 8;
+-      f32_dwconv_config[2].channel_subtile = 8;
+-      f32_dwconv_config[2].channel_round = 1;
+-      f32_dwconv_config[2].primary_tile = 9;
+-
+-      #if XNN_ENABLE_DWCONV_MULTIPASS
+-        f32_dwconv_config[3].minmax.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_8f8m9l16c4s4r__sse_acc2;
+-        f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_sse_params;
+-        f32_dwconv_config[3].channel_tile = 16;
+-        f32_dwconv_config[3].channel_subtile = 4;
+-        f32_dwconv_config[3].channel_round = 4;
+-        f32_dwconv_config[3].primary_tile = 8;
+-        f32_dwconv_config[3].middle_tile = 8;
+-        f32_dwconv_config[3].last_tile = 9;
+-      #else
+-        f32_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_25p8c__sse;
+-        f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_sse_params;
+-        f32_dwconv_config[3].channel_tile = 8;
+-        f32_dwconv_config[3].channel_subtile = 8;
+-        f32_dwconv_config[3].channel_round = 1;
+-        f32_dwconv_config[3].primary_tile = 25;
+-      #endif  // XNN_ENABLE_DWCONV_MULTIPASS
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    #if XNN_ARCH_WASMRELAXEDSIMD
+-      f32_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3p8c__wasmrelaxedsimd_fma;
+-      f32_dwconv_config[0].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_3p8c__wasmrelaxedsimd_fma;
+-      f32_dwconv_config[0].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-      f32_dwconv_config[0].channel_tile = 8;
+-      f32_dwconv_config[0].channel_subtile = 8;
+-      f32_dwconv_config[0].channel_round = 1;
+-      f32_dwconv_config[0].primary_tile = 3;
+-
+-      f32_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_4p8c__wasmrelaxedsimd_fma;
+-      f32_dwconv_config[1].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_4p8c__wasmrelaxedsimd_fma;
+-      f32_dwconv_config[1].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-      f32_dwconv_config[1].channel_tile = 8;
+-      f32_dwconv_config[1].channel_subtile = 8;
+-      f32_dwconv_config[1].channel_round = 1;
+-      f32_dwconv_config[1].primary_tile = 4;
+-
+-      f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p8c__wasmrelaxedsimd_fma;
+-      f32_dwconv_config[2].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_9p8c__wasmrelaxedsimd_fma;
+-      f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-      f32_dwconv_config[2].channel_tile = 8;
+-      f32_dwconv_config[2].channel_subtile = 8;
+-      f32_dwconv_config[2].channel_round = 1;
+-      f32_dwconv_config[2].primary_tile = 9;
+-    #else
+-      const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-      assert(hardware_config != NULL);
+-      if (hardware_config->is_x86) {
+-        f32_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3p8c__wasmsimd_x86;
+-        f32_dwconv_config[0].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_3p8c__wasmsimd;
+-        f32_dwconv_config[0].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-        f32_dwconv_config[0].channel_tile = 8;
+-        f32_dwconv_config[0].channel_subtile = 8;
+-        f32_dwconv_config[0].channel_round = 1;
+-        f32_dwconv_config[0].primary_tile = 3;
+-
+-        f32_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_4p8c__wasmsimd_x86;
+-        f32_dwconv_config[1].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_4p8c__wasmsimd;
+-        f32_dwconv_config[1].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-        f32_dwconv_config[1].channel_tile = 8;
+-        f32_dwconv_config[1].channel_subtile = 8;
+-        f32_dwconv_config[1].channel_round = 1;
+-        f32_dwconv_config[1].primary_tile = 4;
+-
+-        #if XNN_ENABLE_DWCONV_MULTIPASS
+-          f32_dwconv_config[2].minmax.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3f3m3l8c4s4r__wasmsimd_x86;
+-          f32_dwconv_config[2].linear.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_ukernel_3f3m3l8c4s4r__wasmsimd;
+-          f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-          f32_dwconv_config[2].channel_tile = 4;
+-          f32_dwconv_config[2].channel_subtile = 4;
+-          f32_dwconv_config[2].channel_round = 4;
+-          f32_dwconv_config[2].primary_tile = 3;
+-          f32_dwconv_config[2].middle_tile = 3;
+-          f32_dwconv_config[2].last_tile = 3;
+-        #else
+-          f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p8c__wasmsimd_x86;
+-          f32_dwconv_config[2].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_9p8c__wasmsimd;
+-          f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-          f32_dwconv_config[2].channel_tile = 8;
+-          f32_dwconv_config[2].channel_subtile = 8;
+-          f32_dwconv_config[2].channel_round = 1;
+-          f32_dwconv_config[2].primary_tile = 9;
+-        #endif  // XNN_ENABLE_DWCONV_MULTIPASS
+-      } else {
+-        f32_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3p4c__wasmsimd_arm;
+-        f32_dwconv_config[0].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_3p4c__wasmsimd;
+-        f32_dwconv_config[0].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-        f32_dwconv_config[0].channel_tile = 4;
+-        f32_dwconv_config[0].channel_subtile = 4;
+-        f32_dwconv_config[0].channel_round = 1;
+-        f32_dwconv_config[0].primary_tile = 3;
+-
+-        f32_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_4p4c__wasmsimd_arm;
+-        f32_dwconv_config[1].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_4p4c__wasmsimd;
+-        f32_dwconv_config[1].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-        f32_dwconv_config[1].channel_tile = 4;
+-        f32_dwconv_config[1].channel_subtile = 4;
+-        f32_dwconv_config[1].channel_round = 1;
+-        f32_dwconv_config[1].primary_tile = 4;
+-
+-        #if XNN_ENABLE_DWCONV_MULTIPASS
+-          f32_dwconv_config[2].minmax.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3f3m3l4c4s4r__wasmsimd_arm;
+-          f32_dwconv_config[2].linear.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_ukernel_3f3m3l4c4s4r__wasmsimd;
+-          f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-          f32_dwconv_config[2].channel_tile = 4;
+-          f32_dwconv_config[2].channel_subtile = 4;
+-          f32_dwconv_config[2].channel_round = 4;
+-          f32_dwconv_config[2].primary_tile = 3;
+-          f32_dwconv_config[2].middle_tile = 3;
+-          f32_dwconv_config[2].last_tile = 3;
+-        #else
+-          f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p4c__wasmsimd_arm;
+-          f32_dwconv_config[2].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_9p4c__wasmsimd;
+-          f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-          f32_dwconv_config[2].channel_tile = 4;
+-          f32_dwconv_config[2].channel_subtile = 4;
+-          f32_dwconv_config[2].channel_round = 1;
+-          f32_dwconv_config[2].primary_tile = 9;
+-        #endif  // XNN_ENABLE_DWCONV_MULTIPASS
+-      }
+-    #endif
+-
+-    #if XNN_ARCH_WASMRELAXEDSIMD
+-      #if XNN_ENABLE_DWCONV_MULTIPASS
+-        f32_dwconv_config[3].minmax.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_5f5m5l4c4s4r__wasmrelaxedsimd_fma;
+-        f32_dwconv_config[3].linear.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_ukernel_5f5m5l4c4s4r__wasmrelaxedsimd_fma;
+-        f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-        f32_dwconv_config[3].channel_tile = 4;
+-        f32_dwconv_config[3].channel_subtile = 4;
+-        f32_dwconv_config[3].channel_round = 4;
+-        f32_dwconv_config[3].primary_tile = 5;
+-        f32_dwconv_config[3].middle_tile = 5;
+-        f32_dwconv_config[3].last_tile = 5;
+-      #else
+-        f32_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_25p8c__wasmrelaxedsimd_fma;
+-        f32_dwconv_config[3].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_25p8c__wasmrelaxedsimd_fma;
+-        f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-        f32_dwconv_config[3].channel_tile = 8;
+-        f32_dwconv_config[3].channel_subtile = 8;
+-        f32_dwconv_config[3].channel_round = 1;
+-        f32_dwconv_config[3].primary_tile = 25;
+-      #endif  // XNN_ENABLE_DWCONV_MULTIPASS
+-    #else
+-      #if XNN_ENABLE_DWCONV_MULTIPASS
+-        f32_dwconv_config[3].minmax.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_5f5m5l4c4s4r__wasmsimd_arm;
+-        f32_dwconv_config[3].linear.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_ukernel_5f5m5l4c4s4r__wasmsimd;
+-        f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-        f32_dwconv_config[3].channel_tile = 4;
+-        f32_dwconv_config[3].channel_subtile = 4;
+-        f32_dwconv_config[3].channel_round = 4;
+-        f32_dwconv_config[3].primary_tile = 5;
+-        f32_dwconv_config[3].middle_tile = 5;
+-        f32_dwconv_config[3].last_tile = 5;
+-      #else
+-        f32_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_25p4c__wasmsimd_arm;
+-        f32_dwconv_config[3].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_25p4c__wasmsimd;
+-        f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-        f32_dwconv_config[3].channel_tile = 4;
+-        f32_dwconv_config[3].channel_subtile = 4;
+-        f32_dwconv_config[3].channel_round = 1;
+-        f32_dwconv_config[3].primary_tile = 25;
+-      #endif  // XNN_ENABLE_DWCONV_MULTIPASS
+-    #endif
+-  #elif XNN_ARCH_WASM
+-    f32_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3p1c__wasm_acc2;
+-    f32_dwconv_config[0].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_3p1c__scalar_acc2;
+-    f32_dwconv_config[0].init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_dwconv_config[0].channel_tile = 1;
+-    f32_dwconv_config[0].channel_subtile = 1;
+-    f32_dwconv_config[0].channel_round = 1;
+-    f32_dwconv_config[0].primary_tile = 3;
+-
+-    f32_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_4p1c__wasm_acc2;
+-    f32_dwconv_config[1].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_4p1c__scalar_acc2;
+-    f32_dwconv_config[1].init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_dwconv_config[1].channel_tile = 1;
+-    f32_dwconv_config[1].channel_subtile = 1;
+-    f32_dwconv_config[1].channel_round = 1;
+-    f32_dwconv_config[1].primary_tile = 4;
+-
+-    f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p1c__wasm_acc2;
+-    f32_dwconv_config[2].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_9p1c__scalar_acc2;
+-    f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_dwconv_config[2].channel_tile = 1;
+-    f32_dwconv_config[2].channel_subtile = 1;
+-    f32_dwconv_config[2].channel_round = 1;
+-    f32_dwconv_config[2].primary_tile = 9;
+-
+-    #if XNN_ENABLE_DWCONV_MULTIPASS
+-      f32_dwconv_config[3].minmax.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_5f5m5l1c1s1r__wasm;
+-      f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_dwconv_config[3].channel_tile = 1;
+-      f32_dwconv_config[3].channel_subtile = 1;
+-      f32_dwconv_config[3].channel_round = 1;
+-      f32_dwconv_config[3].primary_tile = 5;
+-      f32_dwconv_config[3].middle_tile = 5;
+-      f32_dwconv_config[3].last_tile = 5;
+-    #else
+-      f32_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_25p1c__wasm_acc2;
+-      f32_dwconv_config[3].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_25p1c__scalar_acc2;
+-      f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_dwconv_config[3].channel_tile = 1;
+-      f32_dwconv_config[3].channel_subtile = 1;
+-      f32_dwconv_config[3].channel_round = 1;
+-      f32_dwconv_config[3].primary_tile = 25;
+-    #endif  // XNN_ENABLE_DWCONV_MULTIPASS
+-  #elif XNN_ARCH_RISCV
+-    f32_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3p1c__scalar_acc2;
+-    f32_dwconv_config[0].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_3p1c__scalar_acc2;
+-    f32_dwconv_config[0].init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_dwconv_config[0].channel_tile = 1;
+-    f32_dwconv_config[0].channel_subtile = 1;
+-    f32_dwconv_config[0].channel_round = 1;
+-    f32_dwconv_config[0].primary_tile = 3;
+-
+-    f32_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_4p1c__scalar_acc2;
+-    f32_dwconv_config[1].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_4p1c__scalar_acc2;
+-    f32_dwconv_config[1].init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_dwconv_config[1].channel_tile = 1;
+-    f32_dwconv_config[1].channel_subtile = 1;
+-    f32_dwconv_config[1].channel_round = 1;
+-    f32_dwconv_config[1].primary_tile = 4;
+-
+-    f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p1c__scalar_acc2;
+-    f32_dwconv_config[2].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_9p1c__scalar_acc2;
+-    f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_dwconv_config[2].channel_tile = 1;
+-    f32_dwconv_config[2].channel_subtile = 1;
+-    f32_dwconv_config[2].channel_round = 1;
+-    f32_dwconv_config[2].primary_tile = 9;
+-
+-    f32_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_25p1c__scalar_acc2;
+-    f32_dwconv_config[3].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_25p1c__scalar_acc2;
+-    f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_dwconv_config[3].channel_tile = 1;
+-    f32_dwconv_config[3].channel_subtile = 1;
+-    f32_dwconv_config[3].channel_round = 1;
+-    f32_dwconv_config[3].primary_tile = 25;
+-  #endif
+-}
+-
+-static void init_qc8_dwconv_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      if (hardware_config->use_arm_neon_v8) {
+-        qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p16c__asm_aarch32_neonv8_mla8_cortex_a35;
+-        qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
+-        qc8_dwconv_config[0].channel_tile = 16;
+-        qc8_dwconv_config[0].channel_subtile = 16;
+-        qc8_dwconv_config[0].channel_round = 1;
+-        qc8_dwconv_config[0].primary_tile = 3;
+-        qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p16c__neonv8_mla8_ld64;
+-        qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
+-        qc8_dwconv_config[1].channel_tile = 16;
+-        qc8_dwconv_config[1].channel_subtile = 16;
+-        qc8_dwconv_config[1].channel_round = 1;
+-        qc8_dwconv_config[1].primary_tile = 9;
+-        qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p8c__neonv8_mla8_ld64;
+-        qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
+-        qc8_dwconv_config[2].channel_tile = 8;
+-        qc8_dwconv_config[2].channel_subtile = 8;
+-        qc8_dwconv_config[2].channel_round = 1;
+-        qc8_dwconv_config[2].primary_tile = 25;
+-      } else {
+-        qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p16c__neon_mla8_ld128;
+-        qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_neon_params;
+-        qc8_dwconv_config[0].channel_tile = 16;
+-        qc8_dwconv_config[0].channel_subtile = 16;
+-        qc8_dwconv_config[0].channel_round = 1;
+-        qc8_dwconv_config[0].primary_tile = 3;
+-        qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p16c__neon_mla8_ld64;
+-        qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_neon_params;
+-        qc8_dwconv_config[1].channel_tile = 16;
+-        qc8_dwconv_config[1].channel_subtile = 16;
+-        qc8_dwconv_config[1].channel_round = 1;
+-        qc8_dwconv_config[1].primary_tile = 9;
+-        qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p8c__neon_mla8_ld64;
+-        qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_neon_params;
+-        qc8_dwconv_config[2].channel_tile = 8;
+-        qc8_dwconv_config[2].channel_subtile = 8;
+-        qc8_dwconv_config[2].channel_round = 1;
+-        qc8_dwconv_config[2].primary_tile = 25;
+-      }
+-    } else {
+-      qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p1c__scalar_fmagic;
+-      qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_fmagic_params;
+-      qc8_dwconv_config[0].channel_tile = 1;
+-      qc8_dwconv_config[0].channel_subtile = 1;
+-      qc8_dwconv_config[0].channel_round = 1;
+-      qc8_dwconv_config[0].primary_tile = 3;
+-      qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p1c__scalar_fmagic;
+-      qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_fmagic_params;
+-      qc8_dwconv_config[1].channel_tile = 1;
+-      qc8_dwconv_config[1].channel_subtile = 1;
+-      qc8_dwconv_config[1].channel_round = 1;
+-      qc8_dwconv_config[1].primary_tile = 9;
+-      qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p1c__scalar_fmagic;
+-      qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_fmagic_params;
+-      qc8_dwconv_config[2].channel_tile = 1;
+-      qc8_dwconv_config[2].channel_subtile = 1;
+-      qc8_dwconv_config[2].channel_round = 1;
+-      qc8_dwconv_config[2].primary_tile = 25;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p16c__neonv8_mla8_ld128;
+-    qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
+-    qc8_dwconv_config[0].channel_tile = 16;
+-    qc8_dwconv_config[0].channel_subtile = 16;
+-    qc8_dwconv_config[0].channel_round = 1;
+-    qc8_dwconv_config[0].primary_tile = 3;
+-    qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p16c__neonv8_mla8_ld64;
+-    qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
+-    qc8_dwconv_config[1].channel_tile = 16;
+-    qc8_dwconv_config[1].channel_subtile = 16;
+-    qc8_dwconv_config[1].channel_round = 1;
+-    qc8_dwconv_config[1].primary_tile = 9;
+-    qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p16c__neonv8_mla8_ld64;
+-    qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
+-    qc8_dwconv_config[2].channel_tile = 16;
+-    qc8_dwconv_config[2].channel_subtile = 16;
+-    qc8_dwconv_config[2].channel_round = 1;
+-    qc8_dwconv_config[2].primary_tile = 25;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512skx) {
+-      qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p32c__avx512skx_mul32;
+-      qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_avx512_params;
+-      qc8_dwconv_config[0].channel_tile = 32;
+-      qc8_dwconv_config[0].channel_subtile = 32;
+-      qc8_dwconv_config[0].channel_round = 1;
+-      qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p32c__avx512skx_mul32;
+-      qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_avx512_params;
+-      qc8_dwconv_config[1].channel_tile = 32;
+-      qc8_dwconv_config[1].channel_subtile = 32;
+-      qc8_dwconv_config[1].channel_round = 1;
+-      qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p32c__avx512skx_mul32;
+-      qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_avx512_params;
+-      qc8_dwconv_config[2].channel_tile = 32;
+-      qc8_dwconv_config[2].channel_subtile = 32;
+-      qc8_dwconv_config[2].channel_round = 1;
+-    } else if (hardware_config->use_x86_xop) {
+-      // XOP should be checked before AVX2: AMD Excavator supports both, but performs better with XOP microkernels
+-      qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p16c__xop_mul16_add16;
+-      qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse4_params;
+-      qc8_dwconv_config[0].channel_tile = 16;
+-      qc8_dwconv_config[0].channel_subtile = 16;
+-      qc8_dwconv_config[0].channel_round = 1;
+-      qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p16c__xop_mul16_add16;
+-      qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse4_params;
+-      qc8_dwconv_config[1].channel_tile = 16;
+-      qc8_dwconv_config[1].channel_subtile = 16;
+-      qc8_dwconv_config[1].channel_round = 1;
+-      qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p16c__xop_mul16_add16;
+-      qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse4_params;
+-      qc8_dwconv_config[2].channel_tile = 16;
+-      qc8_dwconv_config[2].channel_subtile = 16;
+-      qc8_dwconv_config[2].channel_round = 1;
+-    } else if (hardware_config->use_x86_avx2) {
+-      qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p16c__avx2_mul32;
+-      qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_avx2_params;
+-      qc8_dwconv_config[0].channel_tile = 16;
+-      qc8_dwconv_config[0].channel_subtile = 16;
+-      qc8_dwconv_config[0].channel_round = 1;
+-      qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p16c__avx2_mul32;
+-      qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_avx2_params;
+-      qc8_dwconv_config[1].channel_tile = 16;
+-      qc8_dwconv_config[1].channel_subtile = 16;
+-      qc8_dwconv_config[1].channel_round = 1;
+-      qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p16c__avx2_mul32;
+-      qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_avx2_params;
+-      qc8_dwconv_config[2].channel_tile = 16;
+-      qc8_dwconv_config[2].channel_subtile = 16;
+-      qc8_dwconv_config[2].channel_round = 1;
+-    } else if (hardware_config->use_x86_avx) {
+-      qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p16c__avx_mul16_add16;
+-      qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse4_params;
+-      qc8_dwconv_config[0].channel_tile = 16;
+-      qc8_dwconv_config[0].channel_subtile = 16;
+-      qc8_dwconv_config[0].channel_round = 1;
+-      qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p16c__avx_mul16_add16;
+-      qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse4_params;
+-      qc8_dwconv_config[1].channel_tile = 16;
+-      qc8_dwconv_config[1].channel_subtile = 16;
+-      qc8_dwconv_config[1].channel_round = 1;
+-      qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p16c__avx_mul16_add16;
+-      qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse4_params;
+-      qc8_dwconv_config[2].channel_tile = 16;
+-      qc8_dwconv_config[2].channel_subtile = 16;
+-      qc8_dwconv_config[2].channel_round = 1;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p8c__sse41_mul16;
+-      qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse4_params;
+-      qc8_dwconv_config[0].channel_tile = 8;
+-      qc8_dwconv_config[0].channel_subtile = 8;
+-      qc8_dwconv_config[0].channel_round = 1;
+-      qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p8c__sse41_mul16;
+-      qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse4_params;
+-      qc8_dwconv_config[1].channel_tile = 8;
+-      qc8_dwconv_config[1].channel_subtile = 8;
+-      qc8_dwconv_config[1].channel_round = 1;
+-      qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p8c__sse41_mul16;
+-      qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse4_params;
+-      qc8_dwconv_config[2].channel_tile = 8;
+-      qc8_dwconv_config[2].channel_subtile = 8;
+-      qc8_dwconv_config[2].channel_round = 1;
+-    } else {
+-      qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p8c__sse2_mul16;
+-      qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse2_params;
+-      qc8_dwconv_config[0].channel_tile = 8;
+-      qc8_dwconv_config[0].channel_subtile = 8;
+-      qc8_dwconv_config[0].channel_round = 1;
+-      qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p8c__sse2_mul16;
+-      qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse2_params;
+-      qc8_dwconv_config[1].channel_tile = 8;
+-      qc8_dwconv_config[1].channel_subtile = 8;
+-      qc8_dwconv_config[1].channel_round = 1;
+-      qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p8c__sse2_mul16;
+-      qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse2_params;
+-      qc8_dwconv_config[2].channel_tile = 8;
+-      qc8_dwconv_config[2].channel_subtile = 8;
+-      qc8_dwconv_config[2].channel_round = 1;
+-    }
+-    qc8_dwconv_config[0].primary_tile = 3;
+-    qc8_dwconv_config[1].primary_tile = 9;
+-    qc8_dwconv_config[2].primary_tile = 25;
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p16c__wasmsimd_mul16_add16;
+-    qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_wasmsimd_params;
+-    qc8_dwconv_config[0].channel_tile = 16;
+-    qc8_dwconv_config[0].channel_subtile = 16;
+-    qc8_dwconv_config[0].channel_round = 1;
+-    qc8_dwconv_config[0].primary_tile = 3;
+-    qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p16c__wasmsimd_mul16_add16;
+-    qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_wasmsimd_params;
+-    qc8_dwconv_config[1].channel_tile = 16;
+-    qc8_dwconv_config[1].channel_subtile = 16;
+-    qc8_dwconv_config[1].channel_round = 1;
+-    qc8_dwconv_config[1].primary_tile = 9;
+-    qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p16c__wasmsimd_mul16_add16;
+-    qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_wasmsimd_params;
+-    qc8_dwconv_config[2].channel_tile = 16;
+-    qc8_dwconv_config[2].channel_subtile = 16;
+-    qc8_dwconv_config[2].channel_round = 1;
+-    qc8_dwconv_config[2].primary_tile = 25;
+-  #elif XNN_ARCH_WASM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p2c__scalar_imagic;
+-      qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_imagic_params;
+-      qc8_dwconv_config[0].channel_tile = 2;
+-      qc8_dwconv_config[0].channel_subtile = 2;
+-      qc8_dwconv_config[0].channel_round = 1;
+-      qc8_dwconv_config[0].primary_tile = 3;
+-      qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p2c__scalar_imagic;
+-      qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_imagic_params;
+-      qc8_dwconv_config[1].channel_tile = 2;
+-      qc8_dwconv_config[1].channel_subtile = 2;
+-      qc8_dwconv_config[1].channel_round = 1;
+-      qc8_dwconv_config[1].primary_tile = 9;
+-      qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p1c__scalar_imagic;
+-      qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_imagic_params;
+-      qc8_dwconv_config[2].channel_tile = 1;
+-      qc8_dwconv_config[2].channel_subtile = 1;
+-      qc8_dwconv_config[2].channel_round = 1;
+-      qc8_dwconv_config[2].primary_tile = 25;
+-    } else {
+-      qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p2c__wasm_fmagic;
+-      qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_fmagic_params;
+-      qc8_dwconv_config[0].channel_tile = 2;
+-      qc8_dwconv_config[0].channel_subtile = 2;
+-      qc8_dwconv_config[0].channel_round = 1;
+-      qc8_dwconv_config[0].primary_tile = 3;
+-      qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p2c__wasm_fmagic;
+-      qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_fmagic_params;
+-      qc8_dwconv_config[1].channel_tile = 2;
+-      qc8_dwconv_config[1].channel_subtile = 2;
+-      qc8_dwconv_config[1].channel_round = 1;
+-      qc8_dwconv_config[1].primary_tile = 9;
+-      qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p2c__wasm_fmagic;
+-      qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_fmagic_params;
+-      qc8_dwconv_config[2].channel_tile = 2;
+-      qc8_dwconv_config[2].channel_subtile = 2;
+-      qc8_dwconv_config[2].channel_round = 1;
+-      qc8_dwconv_config[2].primary_tile = 25;
+-    }
+-  #elif XNN_ARCH_RISCV
+-    qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p2c__scalar_lrintf;
+-    qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_lrintf_params;
+-    qc8_dwconv_config[0].channel_tile = 2;
+-    qc8_dwconv_config[0].channel_subtile = 2;
+-    qc8_dwconv_config[0].channel_round = 1;
+-    qc8_dwconv_config[0].primary_tile = 3;
+-    qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p2c__scalar_lrintf;
+-    qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_lrintf_params;
+-    qc8_dwconv_config[1].channel_tile = 2;
+-    qc8_dwconv_config[1].channel_subtile = 2;
+-    qc8_dwconv_config[1].channel_round = 1;
+-    qc8_dwconv_config[1].primary_tile = 9;
+-    qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p2c__scalar_lrintf;
+-    qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_lrintf_params;
+-    qc8_dwconv_config[2].channel_tile = 2;
+-    qc8_dwconv_config[2].channel_subtile = 2;
+-    qc8_dwconv_config[2].channel_round = 1;
+-    qc8_dwconv_config[2].primary_tile = 25;
+-  #endif
+-}
+-
+-static void init_qs8_dwconv_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      qs8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_rndnu_ukernel_9p16c__neon_mla8_ld64;
+-      qs8_dwconv_config[0].init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
+-      qs8_dwconv_config[0].channel_tile = 16;
+-      qs8_dwconv_config[0].channel_subtile = 16;
+-      qs8_dwconv_config[0].channel_round = 1;
+-      qs8_dwconv_config[0].primary_tile = 9;
+-      qs8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_rndnu_ukernel_25p8c__neon_mla8_ld64;
+-      qs8_dwconv_config[1].init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
+-      qs8_dwconv_config[1].channel_tile = 8;
+-      qs8_dwconv_config[1].channel_subtile = 8;
+-      qs8_dwconv_config[1].channel_round = 1;
+-      qs8_dwconv_config[1].primary_tile = 25;
+-    } else {
+-      qs8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_9p1c__scalar_fmagic;
+-      qs8_dwconv_config[0].init.qs8 = xnn_init_qs8_conv_minmax_fp32_scalar_fmagic_params;
+-      qs8_dwconv_config[0].channel_tile = 1;
+-      qs8_dwconv_config[0].channel_subtile = 1;
+-      qs8_dwconv_config[0].channel_round = 1;
+-      qs8_dwconv_config[0].primary_tile = 9;
+-      qs8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_25p1c__scalar_fmagic;
+-      qs8_dwconv_config[1].init.qs8 = xnn_init_qs8_conv_minmax_fp32_scalar_fmagic_params;
+-      qs8_dwconv_config[1].channel_tile = 1;
+-      qs8_dwconv_config[1].channel_subtile = 1;
+-      qs8_dwconv_config[1].channel_round = 1;
+-      qs8_dwconv_config[1].primary_tile = 25;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    qs8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_rndnu_ukernel_9p16c__neon_mla8_ld64;
+-    qs8_dwconv_config[0].init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
+-    qs8_dwconv_config[0].channel_tile = 16;
+-    qs8_dwconv_config[0].channel_subtile = 16;
+-    qs8_dwconv_config[0].channel_round = 1;
+-    qs8_dwconv_config[0].primary_tile = 9;
+-    qs8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_rndnu_ukernel_25p16c__neon_mla8_ld64;
+-    qs8_dwconv_config[1].init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
+-    qs8_dwconv_config[1].channel_tile = 16;
+-    qs8_dwconv_config[1].channel_subtile = 16;
+-    qs8_dwconv_config[1].channel_round = 1;
+-    qs8_dwconv_config[1].primary_tile = 25;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512skx) {
+-      qs8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_9p32c__avx512skx_mul32;
+-      qs8_dwconv_config[0].init.qs8 = xnn_init_qs8_conv_minmax_fp32_avx512_params;
+-      qs8_dwconv_config[0].channel_tile = 32;
+-      qs8_dwconv_config[0].channel_subtile = 32;
+-      qs8_dwconv_config[0].channel_round = 1;
+-      qs8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_25p32c__avx512skx_mul32;
+-      qs8_dwconv_config[1].init.qs8 = xnn_init_qs8_conv_minmax_fp32_avx512_params;
+-      qs8_dwconv_config[1].channel_tile = 32;
+-      qs8_dwconv_config[1].channel_subtile = 32;
+-      qs8_dwconv_config[1].channel_round = 1;
+-    } else if (hardware_config->use_x86_xop) {
+-      // XOP should be checked before AVX2: AMD Excavator supports both, but performs better with XOP microkernels
+-      qs8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_9p16c__xop_mul16_add16;
+-      qs8_dwconv_config[0].init.qs8 = xnn_init_qs8_conv_minmax_fp32_sse4_params;
+-      qs8_dwconv_config[0].channel_tile = 16;
+-      qs8_dwconv_config[0].channel_subtile = 16;
+-      qs8_dwconv_config[0].channel_round = 1;
+-      qs8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_25p16c__xop_mul16_add16;
+-      qs8_dwconv_config[1].init.qs8 = xnn_init_qs8_conv_minmax_fp32_sse4_params;
+-      qs8_dwconv_config[1].channel_tile = 16;
+-      qs8_dwconv_config[1].channel_subtile = 16;
+-      qs8_dwconv_config[1].channel_round = 1;
+-    } else if (hardware_config->use_x86_avx2) {
+-      qs8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_9p16c__avx2_mul32;
+-      qs8_dwconv_config[0].init.qs8 = xnn_init_qs8_conv_minmax_fp32_avx2_params;
+-      qs8_dwconv_config[0].channel_tile = 16;
+-      qs8_dwconv_config[0].channel_subtile = 16;
+-      qs8_dwconv_config[0].channel_round = 1;
+-      qs8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_25p16c__avx2_mul32;
+-      qs8_dwconv_config[1].init.qs8 = xnn_init_qs8_conv_minmax_fp32_avx2_params;
+-      qs8_dwconv_config[1].channel_tile = 16;
+-      qs8_dwconv_config[1].channel_subtile = 16;
+-      qs8_dwconv_config[1].channel_round = 1;
+-    } else if (hardware_config->use_x86_avx) {
+-      qs8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_9p16c__avx_mul16_add16;
+-      qs8_dwconv_config[0].init.qs8 = xnn_init_qs8_conv_minmax_fp32_sse4_params;
+-      qs8_dwconv_config[0].channel_tile = 16;
+-      qs8_dwconv_config[0].channel_subtile = 16;
+-      qs8_dwconv_config[0].channel_round = 1;
+-      qs8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_25p16c__avx_mul16_add16;
+-      qs8_dwconv_config[1].init.qs8 = xnn_init_qs8_conv_minmax_fp32_sse4_params;
+-      qs8_dwconv_config[1].channel_tile = 16;
+-      qs8_dwconv_config[1].channel_subtile = 16;
+-      qs8_dwconv_config[1].channel_round = 1;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      qs8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_9p8c__sse41_mul16_add16;
+-      qs8_dwconv_config[0].init.qs8 = xnn_init_qs8_conv_minmax_fp32_sse4_params;
+-      qs8_dwconv_config[0].channel_tile = 8;
+-      qs8_dwconv_config[0].channel_subtile = 8;
+-      qs8_dwconv_config[0].channel_round = 1;
+-      qs8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_25p8c__sse41_mul16_add16;
+-      qs8_dwconv_config[1].init.qs8 = xnn_init_qs8_conv_minmax_fp32_sse4_params;
+-      qs8_dwconv_config[1].channel_tile = 8;
+-      qs8_dwconv_config[1].channel_subtile = 8;
+-      qs8_dwconv_config[1].channel_round = 1;
+-    } else {
+-      qs8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_9p8c__sse2_mul16_add16;
+-      qs8_dwconv_config[0].init.qs8 = xnn_init_qs8_conv_minmax_fp32_sse2_params;
+-      qs8_dwconv_config[0].channel_tile = 8;
+-      qs8_dwconv_config[0].channel_subtile = 8;
+-      qs8_dwconv_config[0].channel_round = 1;
+-      qs8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_25p8c__sse2_mul16_add16;
+-      qs8_dwconv_config[1].init.qs8 = xnn_init_qs8_conv_minmax_fp32_sse2_params;
+-      qs8_dwconv_config[1].channel_tile = 8;
+-      qs8_dwconv_config[1].channel_subtile = 8;
+-      qs8_dwconv_config[1].channel_round = 1;
+-    }
+-    qs8_dwconv_config[0].primary_tile = 9;
+-    qs8_dwconv_config[1].primary_tile = 25;
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    qs8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_9p16c__wasmsimd_mul16_add16;
+-    qs8_dwconv_config[0].init.qs8 = xnn_init_qs8_conv_minmax_fp32_wasmsimd_params;
+-    qs8_dwconv_config[0].channel_tile = 16;
+-    qs8_dwconv_config[0].channel_subtile = 16;
+-    qs8_dwconv_config[0].channel_round = 1;
+-    qs8_dwconv_config[0].primary_tile = 9;
+-    qs8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_25p16c__wasmsimd_mul16_add16;
+-    qs8_dwconv_config[1].init.qs8 = xnn_init_qs8_conv_minmax_fp32_wasmsimd_params;
+-    qs8_dwconv_config[1].channel_tile = 16;
+-    qs8_dwconv_config[1].channel_subtile = 16;
+-    qs8_dwconv_config[1].channel_round = 1;
+-    qs8_dwconv_config[1].primary_tile = 25;
+-  #elif XNN_ARCH_WASM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      qs8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_9p2c__scalar_imagic;
+-      qs8_dwconv_config[0].init.qs8 = xnn_init_qs8_conv_minmax_fp32_scalar_imagic_params;
+-      qs8_dwconv_config[0].channel_tile = 2;
+-      qs8_dwconv_config[0].channel_subtile = 2;
+-      qs8_dwconv_config[0].channel_round = 1;
+-      qs8_dwconv_config[0].primary_tile = 9;
+-      qs8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_25p1c__scalar_imagic;
+-      qs8_dwconv_config[1].init.qs8 = xnn_init_qs8_conv_minmax_fp32_scalar_imagic_params;
+-      qs8_dwconv_config[1].channel_tile = 1;
+-      qs8_dwconv_config[1].channel_subtile = 1;
+-      qs8_dwconv_config[1].channel_round = 1;
+-      qs8_dwconv_config[1].primary_tile = 25;
+-    } else {
+-      qs8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_9p2c__wasm_fmagic;
+-      qs8_dwconv_config[0].init.qs8 = xnn_init_qs8_conv_minmax_fp32_scalar_fmagic_params;
+-      qs8_dwconv_config[0].channel_tile = 2;
+-      qs8_dwconv_config[0].channel_subtile = 2;
+-      qs8_dwconv_config[0].channel_round = 1;
+-      qs8_dwconv_config[0].primary_tile = 9;
+-      qs8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_25p2c__wasm_fmagic;
+-      qs8_dwconv_config[1].init.qs8 = xnn_init_qs8_conv_minmax_fp32_scalar_fmagic_params;
+-      qs8_dwconv_config[1].channel_tile = 2;
+-      qs8_dwconv_config[1].channel_subtile = 2;
+-      qs8_dwconv_config[1].channel_round = 1;
+-      qs8_dwconv_config[1].primary_tile = 25;
+-    }
+-  #elif XNN_ARCH_RISCV
+-    qs8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_9p2c__scalar_lrintf;
+-    qs8_dwconv_config[0].init.qs8 = xnn_init_qs8_conv_minmax_fp32_scalar_lrintf_params;
+-    qs8_dwconv_config[0].channel_tile = 2;
+-    qs8_dwconv_config[0].channel_subtile = 2;
+-    qs8_dwconv_config[0].channel_round = 1;
+-    qs8_dwconv_config[0].primary_tile = 9;
+-    qs8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_25p2c__scalar_lrintf;
+-    qs8_dwconv_config[1].init.qs8 = xnn_init_qs8_conv_minmax_fp32_scalar_lrintf_params;
+-    qs8_dwconv_config[1].channel_tile = 2;
+-    qs8_dwconv_config[1].channel_subtile = 2;
+-    qs8_dwconv_config[1].channel_round = 1;
+-    qs8_dwconv_config[1].primary_tile = 25;
+-  #endif
+-}
+-
+-static void init_qu8_dwconv_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      qu8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_rndnu_ukernel_9p16c__neon_mul8;
+-      qu8_dwconv_config[0].init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
+-      qu8_dwconv_config[0].channel_tile = 16;
+-      qu8_dwconv_config[0].channel_subtile = 16;
+-      qu8_dwconv_config[0].channel_round = 1;
+-      qu8_dwconv_config[0].primary_tile = 9;
+-      qu8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_rndnu_ukernel_25p8c__neon_mul8;
+-      qu8_dwconv_config[1].init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
+-      qu8_dwconv_config[1].channel_tile = 8;
+-      qu8_dwconv_config[1].channel_subtile = 8;
+-      qu8_dwconv_config[1].channel_round = 1;
+-      qu8_dwconv_config[1].primary_tile = 25;
+-    } else {
+-      qu8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_9p1c__scalar_fmagic;
+-      qu8_dwconv_config[0].init.qu8 = xnn_init_qu8_conv_minmax_fp32_scalar_fmagic_params;
+-      qu8_dwconv_config[0].channel_tile = 1;
+-      qu8_dwconv_config[0].channel_subtile = 1;
+-      qu8_dwconv_config[0].channel_round = 1;
+-      qu8_dwconv_config[0].primary_tile = 9;
+-      qu8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_25p1c__scalar_fmagic;
+-      qu8_dwconv_config[1].init.qu8 = xnn_init_qu8_conv_minmax_fp32_scalar_fmagic_params;
+-      qu8_dwconv_config[1].channel_tile = 1;
+-      qu8_dwconv_config[1].channel_subtile = 1;
+-      qu8_dwconv_config[1].channel_round = 1;
+-      qu8_dwconv_config[1].primary_tile = 25;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    qu8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_rndnu_ukernel_9p16c__neon_mul8;
+-    qu8_dwconv_config[0].init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
+-    qu8_dwconv_config[0].channel_tile = 16;
+-    qu8_dwconv_config[0].channel_subtile = 16;
+-    qu8_dwconv_config[0].channel_round = 1;
+-    qu8_dwconv_config[0].primary_tile = 9;
+-    qu8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_rndnu_ukernel_25p8c__neon_mul8;
+-    qu8_dwconv_config[1].init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
+-    qu8_dwconv_config[1].channel_tile = 8;
+-    qu8_dwconv_config[1].channel_subtile = 8;
+-    qu8_dwconv_config[1].channel_round = 1;
+-    qu8_dwconv_config[1].primary_tile = 25;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512skx) {
+-      qu8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_9p32c__avx512skx_mul32;
+-      qu8_dwconv_config[0].init.qu8 = xnn_init_qu8_conv_minmax_fp32_avx512_params;
+-      qu8_dwconv_config[0].channel_tile = 32;
+-      qu8_dwconv_config[0].channel_subtile = 32;
+-      qu8_dwconv_config[0].channel_round = 1;
+-      qu8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_25p32c__avx512skx_mul32;
+-      qu8_dwconv_config[1].init.qu8 = xnn_init_qu8_conv_minmax_fp32_avx512_params;
+-      qu8_dwconv_config[1].channel_tile = 32;
+-      qu8_dwconv_config[1].channel_subtile = 32;
+-      qu8_dwconv_config[1].channel_round = 1;
+-    } else if (hardware_config->use_x86_xop) {
+-      // XOP should be checked before AVX2: AMD Excavator supports both, but performs better with XOP microkernels
+-      qu8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_9p16c__xop_mul32;
+-      qu8_dwconv_config[0].init.qu8 = xnn_init_qu8_conv_minmax_fp32_sse2_params;
+-      qu8_dwconv_config[0].channel_tile = 16;
+-      qu8_dwconv_config[0].channel_subtile = 16;
+-      qu8_dwconv_config[0].channel_round = 1;
+-      qu8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_25p16c__xop_mul32;
+-      qu8_dwconv_config[1].init.qu8 = xnn_init_qu8_conv_minmax_fp32_sse2_params;
+-      qu8_dwconv_config[1].channel_tile = 16;
+-      qu8_dwconv_config[1].channel_subtile = 16;
+-      qu8_dwconv_config[1].channel_round = 1;
+-    } else if (hardware_config->use_x86_avx2) {
+-      qu8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_9p16c__avx2_mul32;
+-      qu8_dwconv_config[0].init.qu8 = xnn_init_qu8_conv_minmax_fp32_avx2_params;
+-      qu8_dwconv_config[0].channel_tile = 16;
+-      qu8_dwconv_config[0].channel_subtile = 16;
+-      qu8_dwconv_config[0].channel_round = 1;
+-      qu8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_25p16c__avx2_mul32;
+-      qu8_dwconv_config[1].init.qu8 = xnn_init_qu8_conv_minmax_fp32_avx2_params;
+-      qu8_dwconv_config[1].channel_tile = 16;
+-      qu8_dwconv_config[1].channel_subtile = 16;
+-      qu8_dwconv_config[1].channel_round = 1;
+-    } else if (hardware_config->use_x86_avx) {
+-      qu8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_9p16c__avx_mul16;
+-      qu8_dwconv_config[0].init.qu8 = xnn_init_qu8_conv_minmax_fp32_sse2_params;
+-      qu8_dwconv_config[0].channel_tile = 16;
+-      qu8_dwconv_config[0].channel_subtile = 16;
+-      qu8_dwconv_config[0].channel_round = 1;
+-      qu8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_25p16c__avx_mul16;
+-      qu8_dwconv_config[1].init.qu8 = xnn_init_qu8_conv_minmax_fp32_sse2_params;
+-      qu8_dwconv_config[1].channel_tile = 16;
+-      qu8_dwconv_config[1].channel_subtile = 16;
+-      qu8_dwconv_config[1].channel_round = 1;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      qu8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_9p8c__sse41_mul16;
+-      qu8_dwconv_config[0].init.qu8 = xnn_init_qu8_conv_minmax_fp32_sse2_params;
+-      qu8_dwconv_config[0].channel_tile = 8;
+-      qu8_dwconv_config[0].channel_subtile = 8;
+-      qu8_dwconv_config[0].channel_round = 1;
+-      qu8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_25p8c__sse41_mul16;
+-      qu8_dwconv_config[1].init.qu8 = xnn_init_qu8_conv_minmax_fp32_sse2_params;
+-      qu8_dwconv_config[1].channel_tile = 8;
+-      qu8_dwconv_config[1].channel_subtile = 8;
+-      qu8_dwconv_config[1].channel_round = 1;
+-    } else {
+-      qu8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_9p8c__sse2_mul16;
+-      qu8_dwconv_config[0].init.qu8 = xnn_init_qu8_conv_minmax_fp32_sse2_params;
+-      qu8_dwconv_config[0].channel_tile = 8;
+-      qu8_dwconv_config[0].channel_subtile = 8;
+-      qu8_dwconv_config[0].channel_round = 1;
+-      qu8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_25p8c__sse2_mul16;
+-      qu8_dwconv_config[1].init.qu8 = xnn_init_qu8_conv_minmax_fp32_sse2_params;
+-      qu8_dwconv_config[1].channel_tile = 8;
+-      qu8_dwconv_config[1].channel_subtile = 8;
+-      qu8_dwconv_config[1].channel_round = 1;
+-    }
+-    qu8_dwconv_config[0].primary_tile = 9;
+-    qu8_dwconv_config[1].primary_tile = 25;
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    qu8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_9p8c__wasmsimd_mul16;
+-    qu8_dwconv_config[0].init.qu8 = xnn_init_qu8_conv_minmax_fp32_wasmsimd_params;
+-    qu8_dwconv_config[0].channel_tile = 8;
+-    qu8_dwconv_config[0].channel_subtile = 8;
+-    qu8_dwconv_config[0].channel_round = 1;
+-    qu8_dwconv_config[0].primary_tile = 9;
+-    qu8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_25p8c__wasmsimd_mul16;
+-    qu8_dwconv_config[1].init.qu8 = xnn_init_qu8_conv_minmax_fp32_wasmsimd_params;
+-    qu8_dwconv_config[1].channel_tile = 8;
+-    qu8_dwconv_config[1].channel_subtile = 8;
+-    qu8_dwconv_config[1].channel_round = 1;
+-    qu8_dwconv_config[1].primary_tile = 25;
+-  #elif XNN_ARCH_WASM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      qu8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_9p2c__scalar_imagic;
+-      qu8_dwconv_config[0].init.qu8 = xnn_init_qu8_conv_minmax_fp32_scalar_imagic_params;
+-      qu8_dwconv_config[0].channel_tile = 2;
+-      qu8_dwconv_config[0].channel_subtile = 2;
+-      qu8_dwconv_config[0].channel_round = 1;
+-      qu8_dwconv_config[0].primary_tile = 9;
+-      qu8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_25p1c__scalar_imagic;
+-      qu8_dwconv_config[1].init.qu8 = xnn_init_qu8_conv_minmax_fp32_scalar_imagic_params;
+-      qu8_dwconv_config[1].channel_tile = 1;
+-      qu8_dwconv_config[1].channel_subtile = 1;
+-      qu8_dwconv_config[1].channel_round = 1;
+-      qu8_dwconv_config[1].primary_tile = 25;
+-    } else {
+-      qu8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_9p2c__wasm_fmagic;
+-      qu8_dwconv_config[0].init.qu8 = xnn_init_qu8_conv_minmax_fp32_scalar_fmagic_params;
+-      qu8_dwconv_config[0].channel_tile = 2;
+-      qu8_dwconv_config[0].channel_subtile = 2;
+-      qu8_dwconv_config[0].channel_round = 1;
+-      qu8_dwconv_config[0].primary_tile = 9;
+-      qu8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_25p2c__wasm_fmagic;
+-      qu8_dwconv_config[1].init.qu8 = xnn_init_qu8_conv_minmax_fp32_scalar_fmagic_params;
+-      qu8_dwconv_config[1].channel_tile = 2;
+-      qu8_dwconv_config[1].channel_subtile = 2;
+-      qu8_dwconv_config[1].channel_round = 1;
+-      qu8_dwconv_config[1].primary_tile = 25;
+-    }
+-  #elif XNN_ARCH_RISCV
+-    qu8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_9p2c__scalar_lrintf;
+-    qu8_dwconv_config[0].init.qu8 = xnn_init_qu8_conv_minmax_fp32_scalar_lrintf_params;
+-    qu8_dwconv_config[0].channel_tile = 2;
+-    qu8_dwconv_config[0].channel_subtile = 2;
+-    qu8_dwconv_config[0].channel_round = 1;
+-    qu8_dwconv_config[0].primary_tile = 9;
+-    qu8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_25p2c__scalar_lrintf;
+-    qu8_dwconv_config[1].init.qu8 = xnn_init_qu8_conv_minmax_fp32_scalar_lrintf_params;
+-    qu8_dwconv_config[1].channel_tile = 2;
+-    qu8_dwconv_config[1].channel_subtile = 2;
+-    qu8_dwconv_config[1].channel_round = 1;
+-    qu8_dwconv_config[1].primary_tile = 25;
+-  #endif
+-}
++// static void init_f16_dwconv_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f16_dwconv_minmax_ukernel_3p16c__neonfp16arith;
++//       f16_dwconv_config[0].init.f16 = xnn_init_f16_minmax_fp16arith_params;
++//       f16_dwconv_config[0].channel_tile = 16;
++//       f16_dwconv_config[0].channel_subtile = 16;
++//       f16_dwconv_config[0].channel_round = 1;
++//       f16_dwconv_config[0].primary_tile = 3;
++
++//       f16_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f16_dwconv_minmax_ukernel_4p16c__neonfp16arith;
++//       f16_dwconv_config[1].init.f16 = xnn_init_f16_minmax_fp16arith_params;
++//       f16_dwconv_config[1].channel_tile = 16;
++//       f16_dwconv_config[1].channel_subtile = 16;
++//       f16_dwconv_config[1].channel_round = 1;
++//       f16_dwconv_config[1].primary_tile = 4;
++
++//       f16_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f16_dwconv_minmax_ukernel_9p8c__neonfp16arith;
++//       f16_dwconv_config[2].init.f16 = xnn_init_f16_minmax_fp16arith_params;
++//       f16_dwconv_config[2].channel_tile = 8;
++//       f16_dwconv_config[2].channel_subtile = 8;
++//       f16_dwconv_config[2].channel_round = 1;
++//       f16_dwconv_config[2].primary_tile = 9;
++
++//       f16_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f16_dwconv_minmax_ukernel_25p8c__neonfp16arith_acc2;
++//       f16_dwconv_config[3].init.f16 = xnn_init_f16_minmax_fp16arith_params;
++//       f16_dwconv_config[3].channel_tile = 8;
++//       f16_dwconv_config[3].channel_subtile = 8;
++//       f16_dwconv_config[3].channel_round = 1;
++//       f16_dwconv_config[3].primary_tile = 25;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f16_dwconv_minmax_ukernel_3p16c__neonfp16arith;
++//       f16_dwconv_config[0].init.f16 = xnn_init_f16_minmax_fp16arith_params;
++//       f16_dwconv_config[0].channel_tile = 16;
++//       f16_dwconv_config[0].channel_subtile = 16;
++//       f16_dwconv_config[0].channel_round = 1;
++//       f16_dwconv_config[0].primary_tile = 3;
++
++//       f16_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f16_dwconv_minmax_ukernel_4p16c__neonfp16arith;
++//       f16_dwconv_config[1].init.f16 = xnn_init_f16_minmax_fp16arith_params;
++//       f16_dwconv_config[1].channel_tile = 16;
++//       f16_dwconv_config[1].channel_subtile = 16;
++//       f16_dwconv_config[1].channel_round = 1;
++//       f16_dwconv_config[1].primary_tile = 4;
++
++//       f16_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f16_dwconv_minmax_ukernel_9p16c__neonfp16arith;
++//       f16_dwconv_config[2].init.f16 = xnn_init_f16_minmax_fp16arith_params;
++//       f16_dwconv_config[2].channel_tile = 16;
++//       f16_dwconv_config[2].channel_subtile = 16;
++//       f16_dwconv_config[2].channel_round = 1;
++//       f16_dwconv_config[2].primary_tile = 9;
++
++//       f16_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f16_dwconv_minmax_ukernel_25p8c__neonfp16arith_acc2;
++//       f16_dwconv_config[3].init.f16 = xnn_init_f16_minmax_fp16arith_params;
++//       f16_dwconv_config[3].channel_tile = 8;
++//       f16_dwconv_config[3].channel_subtile = 8;
++//       f16_dwconv_config[3].channel_round = 1;
++//       f16_dwconv_config[3].primary_tile = 25;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx2) {
++//       f16_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f16_dwconv_minmax_ukernel_3p16c__fma3;
++//       f16_dwconv_config[0].init.f16 = xnn_init_f16_minmax_avx_params;
++//       f16_dwconv_config[0].channel_tile = 16;
++//       f16_dwconv_config[0].channel_subtile = 16;
++//       f16_dwconv_config[0].channel_round = 1;
++//       f16_dwconv_config[0].primary_tile = 3;
++
++//       f16_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f16_dwconv_minmax_ukernel_4p16c__fma3;
++//       f16_dwconv_config[1].init.f16 = xnn_init_f16_minmax_avx_params;
++//       f16_dwconv_config[1].channel_tile = 16;
++//       f16_dwconv_config[1].channel_subtile = 16;
++//       f16_dwconv_config[1].channel_round = 1;
++//       f16_dwconv_config[1].primary_tile = 4;
++
++//       f16_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f16_dwconv_minmax_ukernel_9p16c__fma3;
++//       f16_dwconv_config[2].init.f16 = xnn_init_f16_minmax_avx_params;
++//       f16_dwconv_config[2].channel_tile = 16;
++//       f16_dwconv_config[2].channel_subtile = 16;
++//       f16_dwconv_config[2].channel_round = 1;
++//       f16_dwconv_config[2].primary_tile = 9;
++
++//       f16_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f16_dwconv_minmax_ukernel_25p8c__fma3_acc2;
++//       f16_dwconv_config[3].init.f16 = xnn_init_f16_minmax_avx_params;
++//       f16_dwconv_config[3].channel_tile = 8;
++//       f16_dwconv_config[3].channel_subtile = 8;
++//       f16_dwconv_config[3].channel_round = 1;
++//       f16_dwconv_config[3].primary_tile = 25;
++//     }
++//   #endif
++// }
++
++// static void init_f32_dwconv_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       f32_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3p8c__neon;
++//       f32_dwconv_config[0].init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_dwconv_config[0].channel_tile = 8,
++//       f32_dwconv_config[0].channel_subtile = 8,
++//       f32_dwconv_config[0].channel_round = 1,
++//       f32_dwconv_config[0].primary_tile = 3,
++
++//       f32_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_4p8c__neon;
++//       f32_dwconv_config[1].init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_dwconv_config[1].channel_tile = 8,
++//       f32_dwconv_config[1].channel_subtile = 8,
++//       f32_dwconv_config[1].channel_round = 1,
++//       f32_dwconv_config[1].primary_tile = 4,
++
++//       f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p8c__neon;
++//       f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_dwconv_config[2].channel_tile = 8;
++//       f32_dwconv_config[2].channel_subtile = 8;
++//       f32_dwconv_config[2].channel_round = 1;
++//       f32_dwconv_config[2].primary_tile = 9;
++
++//       #if XNN_ENABLE_DWCONV_MULTIPASS
++//         f32_dwconv_config[3].minmax.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_8f8m9l4c4s4r__neon_acc2;
++//         f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_scalar_params;
++//         f32_dwconv_config[3].channel_tile = 4;
++//         f32_dwconv_config[3].channel_subtile = 4;
++//         f32_dwconv_config[3].channel_round = 4;
++//         f32_dwconv_config[3].primary_tile = 8;
++//         f32_dwconv_config[3].middle_tile = 8;
++//         f32_dwconv_config[3].last_tile = 9;
++//       #else
++//         f32_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_25p8c__neon_acc2;
++//         f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_scalar_params;
++//         f32_dwconv_config[3].channel_tile = 8;
++//         f32_dwconv_config[3].channel_subtile = 8;
++//         f32_dwconv_config[3].channel_round = 1;
++//         f32_dwconv_config[3].primary_tile = 25;
++//       #endif  // XNN_ENABLE_DWCONV_MULTIPASS
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3p1c__scalar_acc2;
++//       f32_dwconv_config[0].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_3p1c__scalar_acc2;
++//       f32_dwconv_config[0].init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_dwconv_config[0].channel_tile = 1;
++//       f32_dwconv_config[0].channel_subtile = 1;
++//       f32_dwconv_config[0].channel_round = 1;
++//       f32_dwconv_config[0].primary_tile = 3;
++
++//       f32_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_4p1c__scalar_acc2;
++//       f32_dwconv_config[1].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_4p1c__scalar_acc2;
++//       f32_dwconv_config[1].init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_dwconv_config[1].channel_tile = 1;
++//       f32_dwconv_config[1].channel_subtile = 1;
++//       f32_dwconv_config[1].channel_round = 1;
++//       f32_dwconv_config[1].primary_tile = 4;
++
++//       f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p1c__scalar_acc2;
++//       f32_dwconv_config[2].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_9p1c__scalar_acc2;
++//       f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_dwconv_config[2].channel_tile = 1;
++//       f32_dwconv_config[2].channel_subtile = 1;
++//       f32_dwconv_config[2].channel_round = 1;
++//       f32_dwconv_config[2].primary_tile = 9;
++
++//       #if XNN_ENABLE_DWCONV_MULTIPASS
++//         f32_dwconv_config[3].minmax.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_2f2m2l4c1s1r__scalar_acc2;
++//         f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_scalar_params;
++//         f32_dwconv_config[3].channel_tile = 4;
++//         f32_dwconv_config[3].channel_subtile = 1;
++//         f32_dwconv_config[3].channel_round = 1;
++//         f32_dwconv_config[3].primary_tile = 2;
++//         f32_dwconv_config[3].middle_tile = 2;
++//         f32_dwconv_config[3].last_tile = 2;
++//       #else
++//         f32_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_25p1c__scalar_acc2;
++//         f32_dwconv_config[3].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_25p1c__scalar_acc2;
++//         f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_scalar_params;
++//         f32_dwconv_config[3].channel_tile = 1;
++//         f32_dwconv_config[3].primary_tile = 25;
++//       #endif  // XNN_ENABLE_DWCONV_MULTIPASS
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3p8c__neonfma;
++//     f32_dwconv_config[0].init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_dwconv_config[0].channel_tile = 8;
++//     f32_dwconv_config[0].channel_subtile = 8;
++//     f32_dwconv_config[0].channel_round = 1;
++//     f32_dwconv_config[0].primary_tile = 3;
++
++//     f32_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_4p8c__neonfma;
++//     f32_dwconv_config[1].init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_dwconv_config[1].channel_tile = 8;
++//     f32_dwconv_config[1].channel_subtile = 8;
++//     f32_dwconv_config[1].channel_round = 1;
++//     f32_dwconv_config[1].primary_tile = 4;
++
++//     #if XNN_PLATFORM_IOS || XNN_PLATFORM_MAC || XNN_PLATFORM_WINDOWS
++//       f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p8c__neonfma;
++//       f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_dwconv_config[2].channel_tile = 8;
++//       f32_dwconv_config[2].channel_subtile = 8;
++//       f32_dwconv_config[2].channel_round = 1;
++//       f32_dwconv_config[2].primary_tile = 9;
++//     #else  // !XNN_PLATFORM_IOS && !XNN_PLATFORM_MAC
++//       switch (cpuinfo_get_core(0)->uarch) {
++//         case cpuinfo_uarch_kryo:
++//           f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p8c__neonfma;
++//           f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_scalar_params;
++//           f32_dwconv_config[2].channel_tile = 8;
++//           f32_dwconv_config[2].channel_subtile = 8;
++//           f32_dwconv_config[2].channel_round = 1;
++//           f32_dwconv_config[2].primary_tile = 9;
++//           break;
++//         #if XNN_ENABLE_ASSEMBLY
++//           case cpuinfo_uarch_cortex_a53:
++//           case cpuinfo_uarch_cortex_a55r0:
++//           case cpuinfo_uarch_cortex_a55:
++//             f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p4c__asm_aarch64_neonfma_cortex_a55;
++//             f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_scalar_params;
++//             f32_dwconv_config[2].channel_tile = 4;
++//             f32_dwconv_config[2].channel_subtile = 4;
++//             f32_dwconv_config[2].channel_round = 1;
++//             f32_dwconv_config[2].primary_tile = 9;
++//             break;
++//         #endif  // XNN_ENABLE_ASSEMBLY
++//         default:
++//           f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p8c__neonfma;
++//           f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_scalar_params;
++//           f32_dwconv_config[2].channel_tile = 8;
++//           f32_dwconv_config[2].channel_subtile = 8;
++//           f32_dwconv_config[2].channel_round = 1;
++//           f32_dwconv_config[2].primary_tile = 9;
++//           break;
++//       }
++//     #endif  // XNN_PLATFORM_IOS && XNN_PLATFORM_MAC
++
++//     #if XNN_ENABLE_DWCONV_MULTIPASS
++//       f32_dwconv_config[3].minmax.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_5f5m5l8c4s4r__neonfma_acc2;
++//       f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_dwconv_config[3].channel_tile = 8;
++//       f32_dwconv_config[3].channel_subtile = 4;
++//       f32_dwconv_config[3].channel_round = 4;
++//       f32_dwconv_config[3].primary_tile = 5;
++//       f32_dwconv_config[3].middle_tile = 5;
++//       f32_dwconv_config[3].last_tile = 5;
++//     #else
++//       f32_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_25p8c__neonfma_acc2;
++//       f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_dwconv_config[3].channel_tile = 8;
++//       f32_dwconv_config[3].channel_subtile = 8;
++//       f32_dwconv_config[3].channel_round = 1;
++//       f32_dwconv_config[3].primary_tile = 25;
++//     #endif  // XNN_ENABLE_DWCONV_MULTIPASS
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
++//       f32_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3p16c__avx512f;
++//       f32_dwconv_config[0].init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_dwconv_config[0].channel_tile = 16;
++//       f32_dwconv_config[0].channel_subtile = 16;
++//       f32_dwconv_config[0].channel_round = 1;
++//       f32_dwconv_config[0].primary_tile = 3;
++
++//       f32_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_4p16c__avx512f;
++//       f32_dwconv_config[1].init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_dwconv_config[1].channel_tile = 16;
++//       f32_dwconv_config[1].channel_subtile = 16;
++//       f32_dwconv_config[1].channel_round = 1;
++//       f32_dwconv_config[1].primary_tile = 4;
++
++//       f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p16c__avx512f;
++//       f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_dwconv_config[2].channel_tile = 16;
++//       f32_dwconv_config[2].channel_subtile = 16;
++//       f32_dwconv_config[2].channel_round = 1;
++//       f32_dwconv_config[2].primary_tile = 9;
++
++//       #if XNN_ENABLE_DWCONV_MULTIPASS
++//         f32_dwconv_config[3].minmax.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_5f5m5l32c16s1r__avx512f_acc2;
++//         f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_scalar_params;
++//         f32_dwconv_config[3].channel_tile = 16;
++//         f32_dwconv_config[3].channel_subtile = 16;
++//         f32_dwconv_config[3].channel_round = 4;
++//         f32_dwconv_config[3].primary_tile = 5;
++//         f32_dwconv_config[3].middle_tile = 5;
++//         f32_dwconv_config[3].last_tile = 5;
++//       #else
++//         f32_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_25p16c__avx512f;
++//         f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_scalar_params;
++//         f32_dwconv_config[3].channel_tile = 16;
++//         f32_dwconv_config[3].channel_subtile = 16;
++//         f32_dwconv_config[3].channel_round = 1;
++//         f32_dwconv_config[3].primary_tile = 25;
++//       #endif  // XNN_ENABLE_DWCONV_MULTIPASS
++//     } else if (hardware_config->use_x86_fma3) {
++//       f32_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3p16c__fma3;
++//       f32_dwconv_config[0].init.f32 = xnn_init_f32_minmax_avx_params;
++//       f32_dwconv_config[0].channel_tile = 16;
++//       f32_dwconv_config[0].channel_subtile = 16;
++//       f32_dwconv_config[0].channel_round = 1;
++//       f32_dwconv_config[0].primary_tile = 3;
++
++//       f32_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_4p16c__fma3;
++//       f32_dwconv_config[1].init.f32 = xnn_init_f32_minmax_avx_params;
++//       f32_dwconv_config[1].channel_tile = 16;
++//       f32_dwconv_config[1].channel_subtile = 16;
++//       f32_dwconv_config[1].channel_round = 1;
++//       f32_dwconv_config[1].primary_tile = 4;
++
++//       f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p16c__fma3;
++//       f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_avx_params;
++//       f32_dwconv_config[2].channel_tile = 16;
++//       f32_dwconv_config[2].channel_subtile = 16;
++//       f32_dwconv_config[2].channel_round = 1;
++//       f32_dwconv_config[2].primary_tile = 9;
++
++//       #if XNN_ENABLE_DWCONV_MULTIPASS
++//         f32_dwconv_config[3].minmax.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_5f5m5l8c8s4r__fma3;
++//         f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_avx_params;
++//         f32_dwconv_config[3].channel_tile = 8;
++//         f32_dwconv_config[3].channel_subtile = 8;
++//         f32_dwconv_config[3].channel_round = 4;
++//         f32_dwconv_config[3].primary_tile = 5;
++//         f32_dwconv_config[3].middle_tile = 5;
++//         f32_dwconv_config[3].last_tile = 5;
++//       #else
++//         f32_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_25p8c__fma3;
++//         f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_avx_params;
++//         f32_dwconv_config[3].channel_tile = 8;
++//         f32_dwconv_config[3].channel_subtile = 8;
++//         f32_dwconv_config[3].channel_round = 1;
++//         f32_dwconv_config[3].primary_tile = 25;
++//       #endif  // XNN_ENABLE_DWCONV_MULTIPASS
++//     } else if (hardware_config->use_x86_avx) {
++//       f32_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3p16c__avx;
++//       f32_dwconv_config[0].init.f32 = xnn_init_f32_minmax_avx_params;
++//       f32_dwconv_config[0].channel_tile = 16;
++//       f32_dwconv_config[0].channel_subtile = 16;
++//       f32_dwconv_config[0].channel_round = 1;
++//       f32_dwconv_config[0].primary_tile = 3;
++
++//       f32_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_4p16c__avx;
++//       f32_dwconv_config[1].init.f32 = xnn_init_f32_minmax_avx_params;
++//       f32_dwconv_config[1].channel_tile = 16;
++//       f32_dwconv_config[1].channel_subtile = 16;
++//       f32_dwconv_config[1].channel_round = 1;
++//       f32_dwconv_config[1].primary_tile = 4;
++
++//       f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p16c__avx;
++//       f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_avx_params;
++//       f32_dwconv_config[2].channel_tile = 16;
++//       f32_dwconv_config[2].channel_subtile = 16;
++//       f32_dwconv_config[2].channel_round = 1;
++//       f32_dwconv_config[2].primary_tile = 9;
++
++//       #if XNN_ENABLE_DWCONV_MULTIPASS
++//         f32_dwconv_config[3].minmax.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_6f6m7l8c8s4r__avx_acc2;
++//         f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_sse_params;
++//         f32_dwconv_config[3].channel_tile = 8;
++//         f32_dwconv_config[3].channel_subtile = 8;
++//         f32_dwconv_config[3].channel_round = 4;
++//         f32_dwconv_config[3].primary_tile = 6;
++//         f32_dwconv_config[3].middle_tile = 6;
++//         f32_dwconv_config[3].last_tile = 7;
++//       #else
++//         f32_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_25p8c__avx;
++//         f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_avx_params;
++//         f32_dwconv_config[3].channel_tile = 8;
++//         f32_dwconv_config[3].channel_subtile = 8;
++//         f32_dwconv_config[3].channel_round = 1;
++//         f32_dwconv_config[3].primary_tile = 25;
++//       #endif  // XNN_ENABLE_DWCONV_MULTIPASS
++//     } else {
++//       f32_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3p8c__sse;
++//       f32_dwconv_config[0].init.f32 = xnn_init_f32_minmax_sse_params;
++//       f32_dwconv_config[0].channel_tile = 8;
++//       f32_dwconv_config[0].channel_subtile = 8;
++//       f32_dwconv_config[0].channel_round = 1;
++//       f32_dwconv_config[0].primary_tile = 3;
++
++//       f32_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_4p8c__sse;
++//       f32_dwconv_config[1].init.f32 = xnn_init_f32_minmax_sse_params;
++//       f32_dwconv_config[1].channel_tile = 8;
++//       f32_dwconv_config[1].channel_subtile = 8;
++//       f32_dwconv_config[1].channel_round = 1;
++//       f32_dwconv_config[1].primary_tile = 4;
++
++//       f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p8c__sse;
++//       f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_sse_params;
++//       f32_dwconv_config[2].channel_tile = 8;
++//       f32_dwconv_config[2].channel_subtile = 8;
++//       f32_dwconv_config[2].channel_round = 1;
++//       f32_dwconv_config[2].primary_tile = 9;
++
++//       #if XNN_ENABLE_DWCONV_MULTIPASS
++//         f32_dwconv_config[3].minmax.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_8f8m9l16c4s4r__sse_acc2;
++//         f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_sse_params;
++//         f32_dwconv_config[3].channel_tile = 16;
++//         f32_dwconv_config[3].channel_subtile = 4;
++//         f32_dwconv_config[3].channel_round = 4;
++//         f32_dwconv_config[3].primary_tile = 8;
++//         f32_dwconv_config[3].middle_tile = 8;
++//         f32_dwconv_config[3].last_tile = 9;
++//       #else
++//         f32_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_25p8c__sse;
++//         f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_sse_params;
++//         f32_dwconv_config[3].channel_tile = 8;
++//         f32_dwconv_config[3].channel_subtile = 8;
++//         f32_dwconv_config[3].channel_round = 1;
++//         f32_dwconv_config[3].primary_tile = 25;
++//       #endif  // XNN_ENABLE_DWCONV_MULTIPASS
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     #if XNN_ARCH_WASMRELAXEDSIMD
++//       f32_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3p8c__wasmrelaxedsimd_fma;
++//       f32_dwconv_config[0].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_3p8c__wasmrelaxedsimd_fma;
++//       f32_dwconv_config[0].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//       f32_dwconv_config[0].channel_tile = 8;
++//       f32_dwconv_config[0].channel_subtile = 8;
++//       f32_dwconv_config[0].channel_round = 1;
++//       f32_dwconv_config[0].primary_tile = 3;
++
++//       f32_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_4p8c__wasmrelaxedsimd_fma;
++//       f32_dwconv_config[1].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_4p8c__wasmrelaxedsimd_fma;
++//       f32_dwconv_config[1].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//       f32_dwconv_config[1].channel_tile = 8;
++//       f32_dwconv_config[1].channel_subtile = 8;
++//       f32_dwconv_config[1].channel_round = 1;
++//       f32_dwconv_config[1].primary_tile = 4;
++
++//       f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p8c__wasmrelaxedsimd_fma;
++//       f32_dwconv_config[2].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_9p8c__wasmrelaxedsimd_fma;
++//       f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//       f32_dwconv_config[2].channel_tile = 8;
++//       f32_dwconv_config[2].channel_subtile = 8;
++//       f32_dwconv_config[2].channel_round = 1;
++//       f32_dwconv_config[2].primary_tile = 9;
++//     #else
++//       const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//       assert(hardware_config != NULL);
++//       if (hardware_config->is_x86) {
++//         f32_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3p8c__wasmsimd_x86;
++//         f32_dwconv_config[0].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_3p8c__wasmsimd;
++//         f32_dwconv_config[0].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//         f32_dwconv_config[0].channel_tile = 8;
++//         f32_dwconv_config[0].channel_subtile = 8;
++//         f32_dwconv_config[0].channel_round = 1;
++//         f32_dwconv_config[0].primary_tile = 3;
++
++//         f32_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_4p8c__wasmsimd_x86;
++//         f32_dwconv_config[1].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_4p8c__wasmsimd;
++//         f32_dwconv_config[1].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//         f32_dwconv_config[1].channel_tile = 8;
++//         f32_dwconv_config[1].channel_subtile = 8;
++//         f32_dwconv_config[1].channel_round = 1;
++//         f32_dwconv_config[1].primary_tile = 4;
++
++//         #if XNN_ENABLE_DWCONV_MULTIPASS
++//           f32_dwconv_config[2].minmax.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3f3m3l8c4s4r__wasmsimd_x86;
++//           f32_dwconv_config[2].linear.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_ukernel_3f3m3l8c4s4r__wasmsimd;
++//           f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//           f32_dwconv_config[2].channel_tile = 4;
++//           f32_dwconv_config[2].channel_subtile = 4;
++//           f32_dwconv_config[2].channel_round = 4;
++//           f32_dwconv_config[2].primary_tile = 3;
++//           f32_dwconv_config[2].middle_tile = 3;
++//           f32_dwconv_config[2].last_tile = 3;
++//         #else
++//           f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p8c__wasmsimd_x86;
++//           f32_dwconv_config[2].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_9p8c__wasmsimd;
++//           f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//           f32_dwconv_config[2].channel_tile = 8;
++//           f32_dwconv_config[2].channel_subtile = 8;
++//           f32_dwconv_config[2].channel_round = 1;
++//           f32_dwconv_config[2].primary_tile = 9;
++//         #endif  // XNN_ENABLE_DWCONV_MULTIPASS
++//       } else {
++//         f32_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3p4c__wasmsimd_arm;
++//         f32_dwconv_config[0].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_3p4c__wasmsimd;
++//         f32_dwconv_config[0].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//         f32_dwconv_config[0].channel_tile = 4;
++//         f32_dwconv_config[0].channel_subtile = 4;
++//         f32_dwconv_config[0].channel_round = 1;
++//         f32_dwconv_config[0].primary_tile = 3;
++
++//         f32_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_4p4c__wasmsimd_arm;
++//         f32_dwconv_config[1].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_4p4c__wasmsimd;
++//         f32_dwconv_config[1].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//         f32_dwconv_config[1].channel_tile = 4;
++//         f32_dwconv_config[1].channel_subtile = 4;
++//         f32_dwconv_config[1].channel_round = 1;
++//         f32_dwconv_config[1].primary_tile = 4;
++
++//         #if XNN_ENABLE_DWCONV_MULTIPASS
++//           f32_dwconv_config[2].minmax.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3f3m3l4c4s4r__wasmsimd_arm;
++//           f32_dwconv_config[2].linear.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_ukernel_3f3m3l4c4s4r__wasmsimd;
++//           f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//           f32_dwconv_config[2].channel_tile = 4;
++//           f32_dwconv_config[2].channel_subtile = 4;
++//           f32_dwconv_config[2].channel_round = 4;
++//           f32_dwconv_config[2].primary_tile = 3;
++//           f32_dwconv_config[2].middle_tile = 3;
++//           f32_dwconv_config[2].last_tile = 3;
++//         #else
++//           f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p4c__wasmsimd_arm;
++//           f32_dwconv_config[2].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_9p4c__wasmsimd;
++//           f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//           f32_dwconv_config[2].channel_tile = 4;
++//           f32_dwconv_config[2].channel_subtile = 4;
++//           f32_dwconv_config[2].channel_round = 1;
++//           f32_dwconv_config[2].primary_tile = 9;
++//         #endif  // XNN_ENABLE_DWCONV_MULTIPASS
++//       }
++//     #endif
++
++//     #if XNN_ARCH_WASMRELAXEDSIMD
++//       #if XNN_ENABLE_DWCONV_MULTIPASS
++//         f32_dwconv_config[3].minmax.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_5f5m5l4c4s4r__wasmrelaxedsimd_fma;
++//         f32_dwconv_config[3].linear.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_ukernel_5f5m5l4c4s4r__wasmrelaxedsimd_fma;
++//         f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//         f32_dwconv_config[3].channel_tile = 4;
++//         f32_dwconv_config[3].channel_subtile = 4;
++//         f32_dwconv_config[3].channel_round = 4;
++//         f32_dwconv_config[3].primary_tile = 5;
++//         f32_dwconv_config[3].middle_tile = 5;
++//         f32_dwconv_config[3].last_tile = 5;
++//       #else
++//         f32_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_25p8c__wasmrelaxedsimd_fma;
++//         f32_dwconv_config[3].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_25p8c__wasmrelaxedsimd_fma;
++//         f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//         f32_dwconv_config[3].channel_tile = 8;
++//         f32_dwconv_config[3].channel_subtile = 8;
++//         f32_dwconv_config[3].channel_round = 1;
++//         f32_dwconv_config[3].primary_tile = 25;
++//       #endif  // XNN_ENABLE_DWCONV_MULTIPASS
++//     #else
++//       #if XNN_ENABLE_DWCONV_MULTIPASS
++//         f32_dwconv_config[3].minmax.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_5f5m5l4c4s4r__wasmsimd_arm;
++//         f32_dwconv_config[3].linear.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_ukernel_5f5m5l4c4s4r__wasmsimd;
++//         f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//         f32_dwconv_config[3].channel_tile = 4;
++//         f32_dwconv_config[3].channel_subtile = 4;
++//         f32_dwconv_config[3].channel_round = 4;
++//         f32_dwconv_config[3].primary_tile = 5;
++//         f32_dwconv_config[3].middle_tile = 5;
++//         f32_dwconv_config[3].last_tile = 5;
++//       #else
++//         f32_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_25p4c__wasmsimd_arm;
++//         f32_dwconv_config[3].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_25p4c__wasmsimd;
++//         f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//         f32_dwconv_config[3].channel_tile = 4;
++//         f32_dwconv_config[3].channel_subtile = 4;
++//         f32_dwconv_config[3].channel_round = 1;
++//         f32_dwconv_config[3].primary_tile = 25;
++//       #endif  // XNN_ENABLE_DWCONV_MULTIPASS
++//     #endif
++//   #elif XNN_ARCH_WASM
++//     f32_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3p1c__wasm_acc2;
++//     f32_dwconv_config[0].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_3p1c__scalar_acc2;
++//     f32_dwconv_config[0].init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_dwconv_config[0].channel_tile = 1;
++//     f32_dwconv_config[0].channel_subtile = 1;
++//     f32_dwconv_config[0].channel_round = 1;
++//     f32_dwconv_config[0].primary_tile = 3;
++
++//     f32_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_4p1c__wasm_acc2;
++//     f32_dwconv_config[1].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_4p1c__scalar_acc2;
++//     f32_dwconv_config[1].init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_dwconv_config[1].channel_tile = 1;
++//     f32_dwconv_config[1].channel_subtile = 1;
++//     f32_dwconv_config[1].channel_round = 1;
++//     f32_dwconv_config[1].primary_tile = 4;
++
++//     f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p1c__wasm_acc2;
++//     f32_dwconv_config[2].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_9p1c__scalar_acc2;
++//     f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_dwconv_config[2].channel_tile = 1;
++//     f32_dwconv_config[2].channel_subtile = 1;
++//     f32_dwconv_config[2].channel_round = 1;
++//     f32_dwconv_config[2].primary_tile = 9;
++
++//     #if XNN_ENABLE_DWCONV_MULTIPASS
++//       f32_dwconv_config[3].minmax.multipass = (xnn_dwconv_multipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_5f5m5l1c1s1r__wasm;
++//       f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_dwconv_config[3].channel_tile = 1;
++//       f32_dwconv_config[3].channel_subtile = 1;
++//       f32_dwconv_config[3].channel_round = 1;
++//       f32_dwconv_config[3].primary_tile = 5;
++//       f32_dwconv_config[3].middle_tile = 5;
++//       f32_dwconv_config[3].last_tile = 5;
++//     #else
++//       f32_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_25p1c__wasm_acc2;
++//       f32_dwconv_config[3].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_25p1c__scalar_acc2;
++//       f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_dwconv_config[3].channel_tile = 1;
++//       f32_dwconv_config[3].channel_subtile = 1;
++//       f32_dwconv_config[3].channel_round = 1;
++//       f32_dwconv_config[3].primary_tile = 25;
++//     #endif  // XNN_ENABLE_DWCONV_MULTIPASS
++//   #elif XNN_ARCH_RISCV
++//     f32_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_3p1c__scalar_acc2;
++//     f32_dwconv_config[0].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_3p1c__scalar_acc2;
++//     f32_dwconv_config[0].init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_dwconv_config[0].channel_tile = 1;
++//     f32_dwconv_config[0].channel_subtile = 1;
++//     f32_dwconv_config[0].channel_round = 1;
++//     f32_dwconv_config[0].primary_tile = 3;
++
++//     f32_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_4p1c__scalar_acc2;
++//     f32_dwconv_config[1].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_4p1c__scalar_acc2;
++//     f32_dwconv_config[1].init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_dwconv_config[1].channel_tile = 1;
++//     f32_dwconv_config[1].channel_subtile = 1;
++//     f32_dwconv_config[1].channel_round = 1;
++//     f32_dwconv_config[1].primary_tile = 4;
++
++//     f32_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_9p1c__scalar_acc2;
++//     f32_dwconv_config[2].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_9p1c__scalar_acc2;
++//     f32_dwconv_config[2].init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_dwconv_config[2].channel_tile = 1;
++//     f32_dwconv_config[2].channel_subtile = 1;
++//     f32_dwconv_config[2].channel_round = 1;
++//     f32_dwconv_config[2].primary_tile = 9;
++
++//     f32_dwconv_config[3].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_minmax_ukernel_25p1c__scalar_acc2;
++//     f32_dwconv_config[3].linear.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_f32_dwconv_ukernel_25p1c__scalar_acc2;
++//     f32_dwconv_config[3].init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_dwconv_config[3].channel_tile = 1;
++//     f32_dwconv_config[3].channel_subtile = 1;
++//     f32_dwconv_config[3].channel_round = 1;
++//     f32_dwconv_config[3].primary_tile = 25;
++//   #endif
++// }
++
++// static void init_qc8_dwconv_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       if (hardware_config->use_arm_neon_v8) {
++//         qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p16c__asm_aarch32_neonv8_mla8_cortex_a35;
++//         qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
++//         qc8_dwconv_config[0].channel_tile = 16;
++//         qc8_dwconv_config[0].channel_subtile = 16;
++//         qc8_dwconv_config[0].channel_round = 1;
++//         qc8_dwconv_config[0].primary_tile = 3;
++//         qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p16c__neonv8_mla8_ld64;
++//         qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
++//         qc8_dwconv_config[1].channel_tile = 16;
++//         qc8_dwconv_config[1].channel_subtile = 16;
++//         qc8_dwconv_config[1].channel_round = 1;
++//         qc8_dwconv_config[1].primary_tile = 9;
++//         qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p8c__neonv8_mla8_ld64;
++//         qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
++//         qc8_dwconv_config[2].channel_tile = 8;
++//         qc8_dwconv_config[2].channel_subtile = 8;
++//         qc8_dwconv_config[2].channel_round = 1;
++//         qc8_dwconv_config[2].primary_tile = 25;
++//       } else {
++//         qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p16c__neon_mla8_ld128;
++//         qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_neon_params;
++//         qc8_dwconv_config[0].channel_tile = 16;
++//         qc8_dwconv_config[0].channel_subtile = 16;
++//         qc8_dwconv_config[0].channel_round = 1;
++//         qc8_dwconv_config[0].primary_tile = 3;
++//         qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p16c__neon_mla8_ld64;
++//         qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_neon_params;
++//         qc8_dwconv_config[1].channel_tile = 16;
++//         qc8_dwconv_config[1].channel_subtile = 16;
++//         qc8_dwconv_config[1].channel_round = 1;
++//         qc8_dwconv_config[1].primary_tile = 9;
++//         qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p8c__neon_mla8_ld64;
++//         qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_neon_params;
++//         qc8_dwconv_config[2].channel_tile = 8;
++//         qc8_dwconv_config[2].channel_subtile = 8;
++//         qc8_dwconv_config[2].channel_round = 1;
++//         qc8_dwconv_config[2].primary_tile = 25;
++//       }
++//     } else {
++//       qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p1c__scalar_fmagic;
++//       qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_fmagic_params;
++//       qc8_dwconv_config[0].channel_tile = 1;
++//       qc8_dwconv_config[0].channel_subtile = 1;
++//       qc8_dwconv_config[0].channel_round = 1;
++//       qc8_dwconv_config[0].primary_tile = 3;
++//       qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p1c__scalar_fmagic;
++//       qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_fmagic_params;
++//       qc8_dwconv_config[1].channel_tile = 1;
++//       qc8_dwconv_config[1].channel_subtile = 1;
++//       qc8_dwconv_config[1].channel_round = 1;
++//       qc8_dwconv_config[1].primary_tile = 9;
++//       qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p1c__scalar_fmagic;
++//       qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_fmagic_params;
++//       qc8_dwconv_config[2].channel_tile = 1;
++//       qc8_dwconv_config[2].channel_subtile = 1;
++//       qc8_dwconv_config[2].channel_round = 1;
++//       qc8_dwconv_config[2].primary_tile = 25;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p16c__neonv8_mla8_ld128;
++//     qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
++//     qc8_dwconv_config[0].channel_tile = 16;
++//     qc8_dwconv_config[0].channel_subtile = 16;
++//     qc8_dwconv_config[0].channel_round = 1;
++//     qc8_dwconv_config[0].primary_tile = 3;
++//     qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p16c__neonv8_mla8_ld64;
++//     qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
++//     qc8_dwconv_config[1].channel_tile = 16;
++//     qc8_dwconv_config[1].channel_subtile = 16;
++//     qc8_dwconv_config[1].channel_round = 1;
++//     qc8_dwconv_config[1].primary_tile = 9;
++//     qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p16c__neonv8_mla8_ld64;
++//     qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
++//     qc8_dwconv_config[2].channel_tile = 16;
++//     qc8_dwconv_config[2].channel_subtile = 16;
++//     qc8_dwconv_config[2].channel_round = 1;
++//     qc8_dwconv_config[2].primary_tile = 25;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512skx) {
++//       qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p32c__avx512skx_mul32;
++//       qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_avx512_params;
++//       qc8_dwconv_config[0].channel_tile = 32;
++//       qc8_dwconv_config[0].channel_subtile = 32;
++//       qc8_dwconv_config[0].channel_round = 1;
++//       qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p32c__avx512skx_mul32;
++//       qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_avx512_params;
++//       qc8_dwconv_config[1].channel_tile = 32;
++//       qc8_dwconv_config[1].channel_subtile = 32;
++//       qc8_dwconv_config[1].channel_round = 1;
++//       qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p32c__avx512skx_mul32;
++//       qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_avx512_params;
++//       qc8_dwconv_config[2].channel_tile = 32;
++//       qc8_dwconv_config[2].channel_subtile = 32;
++//       qc8_dwconv_config[2].channel_round = 1;
++//     } else if (hardware_config->use_x86_xop) {
++//       // XOP should be checked before AVX2: AMD Excavator supports both, but performs better with XOP microkernels
++//       qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p16c__xop_mul16_add16;
++//       qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse4_params;
++//       qc8_dwconv_config[0].channel_tile = 16;
++//       qc8_dwconv_config[0].channel_subtile = 16;
++//       qc8_dwconv_config[0].channel_round = 1;
++//       qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p16c__xop_mul16_add16;
++//       qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse4_params;
++//       qc8_dwconv_config[1].channel_tile = 16;
++//       qc8_dwconv_config[1].channel_subtile = 16;
++//       qc8_dwconv_config[1].channel_round = 1;
++//       qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p16c__xop_mul16_add16;
++//       qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse4_params;
++//       qc8_dwconv_config[2].channel_tile = 16;
++//       qc8_dwconv_config[2].channel_subtile = 16;
++//       qc8_dwconv_config[2].channel_round = 1;
++//     } else if (hardware_config->use_x86_avx2) {
++//       qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p16c__avx2_mul32;
++//       qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_avx2_params;
++//       qc8_dwconv_config[0].channel_tile = 16;
++//       qc8_dwconv_config[0].channel_subtile = 16;
++//       qc8_dwconv_config[0].channel_round = 1;
++//       qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p16c__avx2_mul32;
++//       qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_avx2_params;
++//       qc8_dwconv_config[1].channel_tile = 16;
++//       qc8_dwconv_config[1].channel_subtile = 16;
++//       qc8_dwconv_config[1].channel_round = 1;
++//       qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p16c__avx2_mul32;
++//       qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_avx2_params;
++//       qc8_dwconv_config[2].channel_tile = 16;
++//       qc8_dwconv_config[2].channel_subtile = 16;
++//       qc8_dwconv_config[2].channel_round = 1;
++//     } else if (hardware_config->use_x86_avx) {
++//       qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p16c__avx_mul16_add16;
++//       qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse4_params;
++//       qc8_dwconv_config[0].channel_tile = 16;
++//       qc8_dwconv_config[0].channel_subtile = 16;
++//       qc8_dwconv_config[0].channel_round = 1;
++//       qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p16c__avx_mul16_add16;
++//       qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse4_params;
++//       qc8_dwconv_config[1].channel_tile = 16;
++//       qc8_dwconv_config[1].channel_subtile = 16;
++//       qc8_dwconv_config[1].channel_round = 1;
++//       qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p16c__avx_mul16_add16;
++//       qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse4_params;
++//       qc8_dwconv_config[2].channel_tile = 16;
++//       qc8_dwconv_config[2].channel_subtile = 16;
++//       qc8_dwconv_config[2].channel_round = 1;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p8c__sse41_mul16;
++//       qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse4_params;
++//       qc8_dwconv_config[0].channel_tile = 8;
++//       qc8_dwconv_config[0].channel_subtile = 8;
++//       qc8_dwconv_config[0].channel_round = 1;
++//       qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p8c__sse41_mul16;
++//       qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse4_params;
++//       qc8_dwconv_config[1].channel_tile = 8;
++//       qc8_dwconv_config[1].channel_subtile = 8;
++//       qc8_dwconv_config[1].channel_round = 1;
++//       qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p8c__sse41_mul16;
++//       qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse4_params;
++//       qc8_dwconv_config[2].channel_tile = 8;
++//       qc8_dwconv_config[2].channel_subtile = 8;
++//       qc8_dwconv_config[2].channel_round = 1;
++//     } else {
++//       qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p8c__sse2_mul16;
++//       qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse2_params;
++//       qc8_dwconv_config[0].channel_tile = 8;
++//       qc8_dwconv_config[0].channel_subtile = 8;
++//       qc8_dwconv_config[0].channel_round = 1;
++//       qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p8c__sse2_mul16;
++//       qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse2_params;
++//       qc8_dwconv_config[1].channel_tile = 8;
++//       qc8_dwconv_config[1].channel_subtile = 8;
++//       qc8_dwconv_config[1].channel_round = 1;
++//       qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p8c__sse2_mul16;
++//       qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse2_params;
++//       qc8_dwconv_config[2].channel_tile = 8;
++//       qc8_dwconv_config[2].channel_subtile = 8;
++//       qc8_dwconv_config[2].channel_round = 1;
++//     }
++//     qc8_dwconv_config[0].primary_tile = 3;
++//     qc8_dwconv_config[1].primary_tile = 9;
++//     qc8_dwconv_config[2].primary_tile = 25;
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p16c__wasmsimd_mul16_add16;
++//     qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_wasmsimd_params;
++//     qc8_dwconv_config[0].channel_tile = 16;
++//     qc8_dwconv_config[0].channel_subtile = 16;
++//     qc8_dwconv_config[0].channel_round = 1;
++//     qc8_dwconv_config[0].primary_tile = 3;
++//     qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p16c__wasmsimd_mul16_add16;
++//     qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_wasmsimd_params;
++//     qc8_dwconv_config[1].channel_tile = 16;
++//     qc8_dwconv_config[1].channel_subtile = 16;
++//     qc8_dwconv_config[1].channel_round = 1;
++//     qc8_dwconv_config[1].primary_tile = 9;
++//     qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p16c__wasmsimd_mul16_add16;
++//     qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_wasmsimd_params;
++//     qc8_dwconv_config[2].channel_tile = 16;
++//     qc8_dwconv_config[2].channel_subtile = 16;
++//     qc8_dwconv_config[2].channel_round = 1;
++//     qc8_dwconv_config[2].primary_tile = 25;
++//   #elif XNN_ARCH_WASM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p2c__scalar_imagic;
++//       qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_imagic_params;
++//       qc8_dwconv_config[0].channel_tile = 2;
++//       qc8_dwconv_config[0].channel_subtile = 2;
++//       qc8_dwconv_config[0].channel_round = 1;
++//       qc8_dwconv_config[0].primary_tile = 3;
++//       qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p2c__scalar_imagic;
++//       qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_imagic_params;
++//       qc8_dwconv_config[1].channel_tile = 2;
++//       qc8_dwconv_config[1].channel_subtile = 2;
++//       qc8_dwconv_config[1].channel_round = 1;
++//       qc8_dwconv_config[1].primary_tile = 9;
++//       qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p1c__scalar_imagic;
++//       qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_imagic_params;
++//       qc8_dwconv_config[2].channel_tile = 1;
++//       qc8_dwconv_config[2].channel_subtile = 1;
++//       qc8_dwconv_config[2].channel_round = 1;
++//       qc8_dwconv_config[2].primary_tile = 25;
++//     } else {
++//       qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p2c__wasm_fmagic;
++//       qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_fmagic_params;
++//       qc8_dwconv_config[0].channel_tile = 2;
++//       qc8_dwconv_config[0].channel_subtile = 2;
++//       qc8_dwconv_config[0].channel_round = 1;
++//       qc8_dwconv_config[0].primary_tile = 3;
++//       qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p2c__wasm_fmagic;
++//       qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_fmagic_params;
++//       qc8_dwconv_config[1].channel_tile = 2;
++//       qc8_dwconv_config[1].channel_subtile = 2;
++//       qc8_dwconv_config[1].channel_round = 1;
++//       qc8_dwconv_config[1].primary_tile = 9;
++//       qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p2c__wasm_fmagic;
++//       qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_fmagic_params;
++//       qc8_dwconv_config[2].channel_tile = 2;
++//       qc8_dwconv_config[2].channel_subtile = 2;
++//       qc8_dwconv_config[2].channel_round = 1;
++//       qc8_dwconv_config[2].primary_tile = 25;
++//     }
++//   #elif XNN_ARCH_RISCV
++//     qc8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_3p2c__scalar_lrintf;
++//     qc8_dwconv_config[0].init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_lrintf_params;
++//     qc8_dwconv_config[0].channel_tile = 2;
++//     qc8_dwconv_config[0].channel_subtile = 2;
++//     qc8_dwconv_config[0].channel_round = 1;
++//     qc8_dwconv_config[0].primary_tile = 3;
++//     qc8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_9p2c__scalar_lrintf;
++//     qc8_dwconv_config[1].init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_lrintf_params;
++//     qc8_dwconv_config[1].channel_tile = 2;
++//     qc8_dwconv_config[1].channel_subtile = 2;
++//     qc8_dwconv_config[1].channel_round = 1;
++//     qc8_dwconv_config[1].primary_tile = 9;
++//     qc8_dwconv_config[2].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qc8_dwconv_minmax_fp32_ukernel_25p2c__scalar_lrintf;
++//     qc8_dwconv_config[2].init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_lrintf_params;
++//     qc8_dwconv_config[2].channel_tile = 2;
++//     qc8_dwconv_config[2].channel_subtile = 2;
++//     qc8_dwconv_config[2].channel_round = 1;
++//     qc8_dwconv_config[2].primary_tile = 25;
++//   #endif
++// }
++
++// static void init_qs8_dwconv_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       qs8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_rndnu_ukernel_9p16c__neon_mla8_ld64;
++//       qs8_dwconv_config[0].init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
++//       qs8_dwconv_config[0].channel_tile = 16;
++//       qs8_dwconv_config[0].channel_subtile = 16;
++//       qs8_dwconv_config[0].channel_round = 1;
++//       qs8_dwconv_config[0].primary_tile = 9;
++//       qs8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_rndnu_ukernel_25p8c__neon_mla8_ld64;
++//       qs8_dwconv_config[1].init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
++//       qs8_dwconv_config[1].channel_tile = 8;
++//       qs8_dwconv_config[1].channel_subtile = 8;
++//       qs8_dwconv_config[1].channel_round = 1;
++//       qs8_dwconv_config[1].primary_tile = 25;
++//     } else {
++//       qs8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_9p1c__scalar_fmagic;
++//       qs8_dwconv_config[0].init.qs8 = xnn_init_qs8_conv_minmax_fp32_scalar_fmagic_params;
++//       qs8_dwconv_config[0].channel_tile = 1;
++//       qs8_dwconv_config[0].channel_subtile = 1;
++//       qs8_dwconv_config[0].channel_round = 1;
++//       qs8_dwconv_config[0].primary_tile = 9;
++//       qs8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_25p1c__scalar_fmagic;
++//       qs8_dwconv_config[1].init.qs8 = xnn_init_qs8_conv_minmax_fp32_scalar_fmagic_params;
++//       qs8_dwconv_config[1].channel_tile = 1;
++//       qs8_dwconv_config[1].channel_subtile = 1;
++//       qs8_dwconv_config[1].channel_round = 1;
++//       qs8_dwconv_config[1].primary_tile = 25;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     qs8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_rndnu_ukernel_9p16c__neon_mla8_ld64;
++//     qs8_dwconv_config[0].init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
++//     qs8_dwconv_config[0].channel_tile = 16;
++//     qs8_dwconv_config[0].channel_subtile = 16;
++//     qs8_dwconv_config[0].channel_round = 1;
++//     qs8_dwconv_config[0].primary_tile = 9;
++//     qs8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_rndnu_ukernel_25p16c__neon_mla8_ld64;
++//     qs8_dwconv_config[1].init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
++//     qs8_dwconv_config[1].channel_tile = 16;
++//     qs8_dwconv_config[1].channel_subtile = 16;
++//     qs8_dwconv_config[1].channel_round = 1;
++//     qs8_dwconv_config[1].primary_tile = 25;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512skx) {
++//       qs8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_9p32c__avx512skx_mul32;
++//       qs8_dwconv_config[0].init.qs8 = xnn_init_qs8_conv_minmax_fp32_avx512_params;
++//       qs8_dwconv_config[0].channel_tile = 32;
++//       qs8_dwconv_config[0].channel_subtile = 32;
++//       qs8_dwconv_config[0].channel_round = 1;
++//       qs8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_25p32c__avx512skx_mul32;
++//       qs8_dwconv_config[1].init.qs8 = xnn_init_qs8_conv_minmax_fp32_avx512_params;
++//       qs8_dwconv_config[1].channel_tile = 32;
++//       qs8_dwconv_config[1].channel_subtile = 32;
++//       qs8_dwconv_config[1].channel_round = 1;
++//     } else if (hardware_config->use_x86_xop) {
++//       // XOP should be checked before AVX2: AMD Excavator supports both, but performs better with XOP microkernels
++//       qs8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_9p16c__xop_mul16_add16;
++//       qs8_dwconv_config[0].init.qs8 = xnn_init_qs8_conv_minmax_fp32_sse4_params;
++//       qs8_dwconv_config[0].channel_tile = 16;
++//       qs8_dwconv_config[0].channel_subtile = 16;
++//       qs8_dwconv_config[0].channel_round = 1;
++//       qs8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_25p16c__xop_mul16_add16;
++//       qs8_dwconv_config[1].init.qs8 = xnn_init_qs8_conv_minmax_fp32_sse4_params;
++//       qs8_dwconv_config[1].channel_tile = 16;
++//       qs8_dwconv_config[1].channel_subtile = 16;
++//       qs8_dwconv_config[1].channel_round = 1;
++//     } else if (hardware_config->use_x86_avx2) {
++//       qs8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_9p16c__avx2_mul32;
++//       qs8_dwconv_config[0].init.qs8 = xnn_init_qs8_conv_minmax_fp32_avx2_params;
++//       qs8_dwconv_config[0].channel_tile = 16;
++//       qs8_dwconv_config[0].channel_subtile = 16;
++//       qs8_dwconv_config[0].channel_round = 1;
++//       qs8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_25p16c__avx2_mul32;
++//       qs8_dwconv_config[1].init.qs8 = xnn_init_qs8_conv_minmax_fp32_avx2_params;
++//       qs8_dwconv_config[1].channel_tile = 16;
++//       qs8_dwconv_config[1].channel_subtile = 16;
++//       qs8_dwconv_config[1].channel_round = 1;
++//     } else if (hardware_config->use_x86_avx) {
++//       qs8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_9p16c__avx_mul16_add16;
++//       qs8_dwconv_config[0].init.qs8 = xnn_init_qs8_conv_minmax_fp32_sse4_params;
++//       qs8_dwconv_config[0].channel_tile = 16;
++//       qs8_dwconv_config[0].channel_subtile = 16;
++//       qs8_dwconv_config[0].channel_round = 1;
++//       qs8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_25p16c__avx_mul16_add16;
++//       qs8_dwconv_config[1].init.qs8 = xnn_init_qs8_conv_minmax_fp32_sse4_params;
++//       qs8_dwconv_config[1].channel_tile = 16;
++//       qs8_dwconv_config[1].channel_subtile = 16;
++//       qs8_dwconv_config[1].channel_round = 1;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       qs8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_9p8c__sse41_mul16_add16;
++//       qs8_dwconv_config[0].init.qs8 = xnn_init_qs8_conv_minmax_fp32_sse4_params;
++//       qs8_dwconv_config[0].channel_tile = 8;
++//       qs8_dwconv_config[0].channel_subtile = 8;
++//       qs8_dwconv_config[0].channel_round = 1;
++//       qs8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_25p8c__sse41_mul16_add16;
++//       qs8_dwconv_config[1].init.qs8 = xnn_init_qs8_conv_minmax_fp32_sse4_params;
++//       qs8_dwconv_config[1].channel_tile = 8;
++//       qs8_dwconv_config[1].channel_subtile = 8;
++//       qs8_dwconv_config[1].channel_round = 1;
++//     } else {
++//       qs8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_9p8c__sse2_mul16_add16;
++//       qs8_dwconv_config[0].init.qs8 = xnn_init_qs8_conv_minmax_fp32_sse2_params;
++//       qs8_dwconv_config[0].channel_tile = 8;
++//       qs8_dwconv_config[0].channel_subtile = 8;
++//       qs8_dwconv_config[0].channel_round = 1;
++//       qs8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_25p8c__sse2_mul16_add16;
++//       qs8_dwconv_config[1].init.qs8 = xnn_init_qs8_conv_minmax_fp32_sse2_params;
++//       qs8_dwconv_config[1].channel_tile = 8;
++//       qs8_dwconv_config[1].channel_subtile = 8;
++//       qs8_dwconv_config[1].channel_round = 1;
++//     }
++//     qs8_dwconv_config[0].primary_tile = 9;
++//     qs8_dwconv_config[1].primary_tile = 25;
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     qs8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_9p16c__wasmsimd_mul16_add16;
++//     qs8_dwconv_config[0].init.qs8 = xnn_init_qs8_conv_minmax_fp32_wasmsimd_params;
++//     qs8_dwconv_config[0].channel_tile = 16;
++//     qs8_dwconv_config[0].channel_subtile = 16;
++//     qs8_dwconv_config[0].channel_round = 1;
++//     qs8_dwconv_config[0].primary_tile = 9;
++//     qs8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_25p16c__wasmsimd_mul16_add16;
++//     qs8_dwconv_config[1].init.qs8 = xnn_init_qs8_conv_minmax_fp32_wasmsimd_params;
++//     qs8_dwconv_config[1].channel_tile = 16;
++//     qs8_dwconv_config[1].channel_subtile = 16;
++//     qs8_dwconv_config[1].channel_round = 1;
++//     qs8_dwconv_config[1].primary_tile = 25;
++//   #elif XNN_ARCH_WASM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       qs8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_9p2c__scalar_imagic;
++//       qs8_dwconv_config[0].init.qs8 = xnn_init_qs8_conv_minmax_fp32_scalar_imagic_params;
++//       qs8_dwconv_config[0].channel_tile = 2;
++//       qs8_dwconv_config[0].channel_subtile = 2;
++//       qs8_dwconv_config[0].channel_round = 1;
++//       qs8_dwconv_config[0].primary_tile = 9;
++//       qs8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_25p1c__scalar_imagic;
++//       qs8_dwconv_config[1].init.qs8 = xnn_init_qs8_conv_minmax_fp32_scalar_imagic_params;
++//       qs8_dwconv_config[1].channel_tile = 1;
++//       qs8_dwconv_config[1].channel_subtile = 1;
++//       qs8_dwconv_config[1].channel_round = 1;
++//       qs8_dwconv_config[1].primary_tile = 25;
++//     } else {
++//       qs8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_9p2c__wasm_fmagic;
++//       qs8_dwconv_config[0].init.qs8 = xnn_init_qs8_conv_minmax_fp32_scalar_fmagic_params;
++//       qs8_dwconv_config[0].channel_tile = 2;
++//       qs8_dwconv_config[0].channel_subtile = 2;
++//       qs8_dwconv_config[0].channel_round = 1;
++//       qs8_dwconv_config[0].primary_tile = 9;
++//       qs8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_25p2c__wasm_fmagic;
++//       qs8_dwconv_config[1].init.qs8 = xnn_init_qs8_conv_minmax_fp32_scalar_fmagic_params;
++//       qs8_dwconv_config[1].channel_tile = 2;
++//       qs8_dwconv_config[1].channel_subtile = 2;
++//       qs8_dwconv_config[1].channel_round = 1;
++//       qs8_dwconv_config[1].primary_tile = 25;
++//     }
++//   #elif XNN_ARCH_RISCV
++//     qs8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_9p2c__scalar_lrintf;
++//     qs8_dwconv_config[0].init.qs8 = xnn_init_qs8_conv_minmax_fp32_scalar_lrintf_params;
++//     qs8_dwconv_config[0].channel_tile = 2;
++//     qs8_dwconv_config[0].channel_subtile = 2;
++//     qs8_dwconv_config[0].channel_round = 1;
++//     qs8_dwconv_config[0].primary_tile = 9;
++//     qs8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qs8_dwconv_minmax_fp32_ukernel_25p2c__scalar_lrintf;
++//     qs8_dwconv_config[1].init.qs8 = xnn_init_qs8_conv_minmax_fp32_scalar_lrintf_params;
++//     qs8_dwconv_config[1].channel_tile = 2;
++//     qs8_dwconv_config[1].channel_subtile = 2;
++//     qs8_dwconv_config[1].channel_round = 1;
++//     qs8_dwconv_config[1].primary_tile = 25;
++//   #endif
++// }
++
++// static void init_qu8_dwconv_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       qu8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_rndnu_ukernel_9p16c__neon_mul8;
++//       qu8_dwconv_config[0].init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
++//       qu8_dwconv_config[0].channel_tile = 16;
++//       qu8_dwconv_config[0].channel_subtile = 16;
++//       qu8_dwconv_config[0].channel_round = 1;
++//       qu8_dwconv_config[0].primary_tile = 9;
++//       qu8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_rndnu_ukernel_25p8c__neon_mul8;
++//       qu8_dwconv_config[1].init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
++//       qu8_dwconv_config[1].channel_tile = 8;
++//       qu8_dwconv_config[1].channel_subtile = 8;
++//       qu8_dwconv_config[1].channel_round = 1;
++//       qu8_dwconv_config[1].primary_tile = 25;
++//     } else {
++//       qu8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_9p1c__scalar_fmagic;
++//       qu8_dwconv_config[0].init.qu8 = xnn_init_qu8_conv_minmax_fp32_scalar_fmagic_params;
++//       qu8_dwconv_config[0].channel_tile = 1;
++//       qu8_dwconv_config[0].channel_subtile = 1;
++//       qu8_dwconv_config[0].channel_round = 1;
++//       qu8_dwconv_config[0].primary_tile = 9;
++//       qu8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_25p1c__scalar_fmagic;
++//       qu8_dwconv_config[1].init.qu8 = xnn_init_qu8_conv_minmax_fp32_scalar_fmagic_params;
++//       qu8_dwconv_config[1].channel_tile = 1;
++//       qu8_dwconv_config[1].channel_subtile = 1;
++//       qu8_dwconv_config[1].channel_round = 1;
++//       qu8_dwconv_config[1].primary_tile = 25;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     qu8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_rndnu_ukernel_9p16c__neon_mul8;
++//     qu8_dwconv_config[0].init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
++//     qu8_dwconv_config[0].channel_tile = 16;
++//     qu8_dwconv_config[0].channel_subtile = 16;
++//     qu8_dwconv_config[0].channel_round = 1;
++//     qu8_dwconv_config[0].primary_tile = 9;
++//     qu8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_rndnu_ukernel_25p8c__neon_mul8;
++//     qu8_dwconv_config[1].init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
++//     qu8_dwconv_config[1].channel_tile = 8;
++//     qu8_dwconv_config[1].channel_subtile = 8;
++//     qu8_dwconv_config[1].channel_round = 1;
++//     qu8_dwconv_config[1].primary_tile = 25;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512skx) {
++//       qu8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_9p32c__avx512skx_mul32;
++//       qu8_dwconv_config[0].init.qu8 = xnn_init_qu8_conv_minmax_fp32_avx512_params;
++//       qu8_dwconv_config[0].channel_tile = 32;
++//       qu8_dwconv_config[0].channel_subtile = 32;
++//       qu8_dwconv_config[0].channel_round = 1;
++//       qu8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_25p32c__avx512skx_mul32;
++//       qu8_dwconv_config[1].init.qu8 = xnn_init_qu8_conv_minmax_fp32_avx512_params;
++//       qu8_dwconv_config[1].channel_tile = 32;
++//       qu8_dwconv_config[1].channel_subtile = 32;
++//       qu8_dwconv_config[1].channel_round = 1;
++//     } else if (hardware_config->use_x86_xop) {
++//       // XOP should be checked before AVX2: AMD Excavator supports both, but performs better with XOP microkernels
++//       qu8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_9p16c__xop_mul32;
++//       qu8_dwconv_config[0].init.qu8 = xnn_init_qu8_conv_minmax_fp32_sse2_params;
++//       qu8_dwconv_config[0].channel_tile = 16;
++//       qu8_dwconv_config[0].channel_subtile = 16;
++//       qu8_dwconv_config[0].channel_round = 1;
++//       qu8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_25p16c__xop_mul32;
++//       qu8_dwconv_config[1].init.qu8 = xnn_init_qu8_conv_minmax_fp32_sse2_params;
++//       qu8_dwconv_config[1].channel_tile = 16;
++//       qu8_dwconv_config[1].channel_subtile = 16;
++//       qu8_dwconv_config[1].channel_round = 1;
++//     } else if (hardware_config->use_x86_avx2) {
++//       qu8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_9p16c__avx2_mul32;
++//       qu8_dwconv_config[0].init.qu8 = xnn_init_qu8_conv_minmax_fp32_avx2_params;
++//       qu8_dwconv_config[0].channel_tile = 16;
++//       qu8_dwconv_config[0].channel_subtile = 16;
++//       qu8_dwconv_config[0].channel_round = 1;
++//       qu8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_25p16c__avx2_mul32;
++//       qu8_dwconv_config[1].init.qu8 = xnn_init_qu8_conv_minmax_fp32_avx2_params;
++//       qu8_dwconv_config[1].channel_tile = 16;
++//       qu8_dwconv_config[1].channel_subtile = 16;
++//       qu8_dwconv_config[1].channel_round = 1;
++//     } else if (hardware_config->use_x86_avx) {
++//       qu8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_9p16c__avx_mul16;
++//       qu8_dwconv_config[0].init.qu8 = xnn_init_qu8_conv_minmax_fp32_sse2_params;
++//       qu8_dwconv_config[0].channel_tile = 16;
++//       qu8_dwconv_config[0].channel_subtile = 16;
++//       qu8_dwconv_config[0].channel_round = 1;
++//       qu8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_25p16c__avx_mul16;
++//       qu8_dwconv_config[1].init.qu8 = xnn_init_qu8_conv_minmax_fp32_sse2_params;
++//       qu8_dwconv_config[1].channel_tile = 16;
++//       qu8_dwconv_config[1].channel_subtile = 16;
++//       qu8_dwconv_config[1].channel_round = 1;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       qu8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_9p8c__sse41_mul16;
++//       qu8_dwconv_config[0].init.qu8 = xnn_init_qu8_conv_minmax_fp32_sse2_params;
++//       qu8_dwconv_config[0].channel_tile = 8;
++//       qu8_dwconv_config[0].channel_subtile = 8;
++//       qu8_dwconv_config[0].channel_round = 1;
++//       qu8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_25p8c__sse41_mul16;
++//       qu8_dwconv_config[1].init.qu8 = xnn_init_qu8_conv_minmax_fp32_sse2_params;
++//       qu8_dwconv_config[1].channel_tile = 8;
++//       qu8_dwconv_config[1].channel_subtile = 8;
++//       qu8_dwconv_config[1].channel_round = 1;
++//     } else {
++//       qu8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_9p8c__sse2_mul16;
++//       qu8_dwconv_config[0].init.qu8 = xnn_init_qu8_conv_minmax_fp32_sse2_params;
++//       qu8_dwconv_config[0].channel_tile = 8;
++//       qu8_dwconv_config[0].channel_subtile = 8;
++//       qu8_dwconv_config[0].channel_round = 1;
++//       qu8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_25p8c__sse2_mul16;
++//       qu8_dwconv_config[1].init.qu8 = xnn_init_qu8_conv_minmax_fp32_sse2_params;
++//       qu8_dwconv_config[1].channel_tile = 8;
++//       qu8_dwconv_config[1].channel_subtile = 8;
++//       qu8_dwconv_config[1].channel_round = 1;
++//     }
++//     qu8_dwconv_config[0].primary_tile = 9;
++//     qu8_dwconv_config[1].primary_tile = 25;
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     qu8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_9p8c__wasmsimd_mul16;
++//     qu8_dwconv_config[0].init.qu8 = xnn_init_qu8_conv_minmax_fp32_wasmsimd_params;
++//     qu8_dwconv_config[0].channel_tile = 8;
++//     qu8_dwconv_config[0].channel_subtile = 8;
++//     qu8_dwconv_config[0].channel_round = 1;
++//     qu8_dwconv_config[0].primary_tile = 9;
++//     qu8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_25p8c__wasmsimd_mul16;
++//     qu8_dwconv_config[1].init.qu8 = xnn_init_qu8_conv_minmax_fp32_wasmsimd_params;
++//     qu8_dwconv_config[1].channel_tile = 8;
++//     qu8_dwconv_config[1].channel_subtile = 8;
++//     qu8_dwconv_config[1].channel_round = 1;
++//     qu8_dwconv_config[1].primary_tile = 25;
++//   #elif XNN_ARCH_WASM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       qu8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_9p2c__scalar_imagic;
++//       qu8_dwconv_config[0].init.qu8 = xnn_init_qu8_conv_minmax_fp32_scalar_imagic_params;
++//       qu8_dwconv_config[0].channel_tile = 2;
++//       qu8_dwconv_config[0].channel_subtile = 2;
++//       qu8_dwconv_config[0].channel_round = 1;
++//       qu8_dwconv_config[0].primary_tile = 9;
++//       qu8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_25p1c__scalar_imagic;
++//       qu8_dwconv_config[1].init.qu8 = xnn_init_qu8_conv_minmax_fp32_scalar_imagic_params;
++//       qu8_dwconv_config[1].channel_tile = 1;
++//       qu8_dwconv_config[1].channel_subtile = 1;
++//       qu8_dwconv_config[1].channel_round = 1;
++//       qu8_dwconv_config[1].primary_tile = 25;
++//     } else {
++//       qu8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_9p2c__wasm_fmagic;
++//       qu8_dwconv_config[0].init.qu8 = xnn_init_qu8_conv_minmax_fp32_scalar_fmagic_params;
++//       qu8_dwconv_config[0].channel_tile = 2;
++//       qu8_dwconv_config[0].channel_subtile = 2;
++//       qu8_dwconv_config[0].channel_round = 1;
++//       qu8_dwconv_config[0].primary_tile = 9;
++//       qu8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_25p2c__wasm_fmagic;
++//       qu8_dwconv_config[1].init.qu8 = xnn_init_qu8_conv_minmax_fp32_scalar_fmagic_params;
++//       qu8_dwconv_config[1].channel_tile = 2;
++//       qu8_dwconv_config[1].channel_subtile = 2;
++//       qu8_dwconv_config[1].channel_round = 1;
++//       qu8_dwconv_config[1].primary_tile = 25;
++//     }
++//   #elif XNN_ARCH_RISCV
++//     qu8_dwconv_config[0].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_9p2c__scalar_lrintf;
++//     qu8_dwconv_config[0].init.qu8 = xnn_init_qu8_conv_minmax_fp32_scalar_lrintf_params;
++//     qu8_dwconv_config[0].channel_tile = 2;
++//     qu8_dwconv_config[0].channel_subtile = 2;
++//     qu8_dwconv_config[0].channel_round = 1;
++//     qu8_dwconv_config[0].primary_tile = 9;
++//     qu8_dwconv_config[1].minmax.unipass = (xnn_dwconv_unipass_ukernel_fn) xnn_qu8_dwconv_minmax_fp32_ukernel_25p2c__scalar_lrintf;
++//     qu8_dwconv_config[1].init.qu8 = xnn_init_qu8_conv_minmax_fp32_scalar_lrintf_params;
++//     qu8_dwconv_config[1].channel_tile = 2;
++//     qu8_dwconv_config[1].channel_subtile = 2;
++//     qu8_dwconv_config[1].channel_round = 1;
++//     qu8_dwconv_config[1].primary_tile = 25;
++//   #endif
++// }
+ 
+ #if XNN_PLATFORM_WINDOWS
+   static BOOL CALLBACK init_f16_dwconv_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_dwconv_config();
++    //init_f16_dwconv_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_dwconv_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_dwconv_config();
++    //init_f32_dwconv_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_qc8_dwconv_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_qc8_dwconv_config();
++    //init_qc8_dwconv_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_qs8_dwconv_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_qs8_dwconv_config();
++    //init_qs8_dwconv_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_qu8_dwconv_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_qu8_dwconv_config();
++    //init_qu8_dwconv_config();
+     return TRUE;
+   }
+ #endif
+diff --git a/src/dwconv2d-chw-config.c b/src/dwconv2d-chw-config.c
+index 2717b29ce..d4e59f8db 100644
+--- a/src/dwconv2d-chw-config.c
++++ b/src/dwconv2d-chw-config.c
+@@ -29,276 +29,276 @@ static struct xnn_dwconv2d_chw_config f32_dwconv2d_chw_config = {0};
+   static pthread_once_t init_guard_f32_dwconv2d_chw = PTHREAD_ONCE_INIT;
+ #endif
+ 
+-static void init_f16_dwconv2d_chw_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_dwconv2d_chw_config.dwconv2d_chw_3x3.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f16_dwconv2d_chw_ukernel_3x3p1__neonfp16arith_2x8;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_3x3.init.f16 = xnn_init_f16_chw_neonfp16arith_stride1_params;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_3x3.update.f16 = xnn_update_f16_chw_neonfp16arith_stride1_params;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_3x3.output_height_tile = 2;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_3x3.output_width_tile = 8;
+-
+-      f16_dwconv2d_chw_config.dwconv2d_chw_3x3s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f16_dwconv2d_chw_ukernel_3x3s2p1__neonfp16arith_1x8;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_3x3s2.init.f16 = xnn_init_f16_chw_neonfp16arith_stride2_params;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_3x3s2.update.f16 = xnn_update_f16_chw_neonfp16arith_stride2_params;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_height_tile = 1;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_width_tile = 8;
+-
+-      f16_dwconv2d_chw_config.dwconv2d_chw_5x5.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f16_dwconv2d_chw_ukernel_5x5p2__neonfp16arith_1x8;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_5x5.init.f16 = xnn_init_f16_chw_neonfp16arith_stride1_params;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_5x5.update.f16 = xnn_update_f16_chw_neonfp16arith_stride1_params;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_5x5.output_height_tile = 1;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_5x5.output_width_tile = 8;
+-
+-      f16_dwconv2d_chw_config.dwconv2d_chw_5x5s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f16_dwconv2d_chw_ukernel_5x5s2p2__neonfp16arith_1x8;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_5x5s2.init.f16 = xnn_init_f16_chw_neonfp16arith_stride2_params;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_5x5s2.update.f16 = xnn_update_f16_chw_neonfp16arith_stride2_params;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_height_tile = 1;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_width_tile = 8;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_dwconv2d_chw_config.dwconv2d_chw_3x3.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f16_dwconv2d_chw_ukernel_3x3p1__neonfp16arith_2x8;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_3x3.init.f16 = xnn_init_f16_chw_neonfp16arith_stride1_params;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_3x3.update.f16 = xnn_update_f16_chw_neonfp16arith_stride1_params;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_3x3.output_height_tile = 2;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_3x3.output_width_tile = 8;
+-
+-      f16_dwconv2d_chw_config.dwconv2d_chw_3x3s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f16_dwconv2d_chw_ukernel_3x3s2p1__neonfp16arith_1x8;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_3x3s2.init.f16 = xnn_init_f16_chw_neonfp16arith_stride2_params;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_3x3s2.update.f16 = xnn_update_f16_chw_neonfp16arith_stride2_params;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_height_tile = 1;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_width_tile = 8;
+-
+-      f16_dwconv2d_chw_config.dwconv2d_chw_5x5.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f16_dwconv2d_chw_ukernel_5x5p2__neonfp16arith_1x8;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_5x5.init.f16 = xnn_init_f16_chw_neonfp16arith_stride1_params;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_5x5.update.f16 = xnn_update_f16_chw_neonfp16arith_stride1_params;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_5x5.output_height_tile = 1;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_5x5.output_width_tile = 8;
+-
+-      f16_dwconv2d_chw_config.dwconv2d_chw_5x5s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f16_dwconv2d_chw_ukernel_5x5s2p2__neonfp16arith_1x8;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_5x5s2.init.f16 = xnn_init_f16_chw_neonfp16arith_stride2_params;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_5x5s2.update.f16 = xnn_update_f16_chw_neonfp16arith_stride2_params;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_height_tile = 1;
+-      f16_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_width_tile = 8;
+-    }
+-  #endif
+-}
+-
+-static void init_f32_dwconv2d_chw_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3p1__neon_2x4;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.init.f32 = xnn_init_f32_chw_neon_stride1_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.update.f32 = xnn_update_f32_chw_neon_stride1_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_height_tile = 2;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_width_tile = 4;
+-
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3s2p1__neon_1x4;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.init.f32 = xnn_init_f32_chw_neon_stride2_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.update.f32 = xnn_update_f32_chw_neon_stride2_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_height_tile = 1;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_width_tile = 4;
+-
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5p2__neon_1x4;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5.init.f32 = xnn_init_f32_chw_neon_stride1_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5.update.f32 = xnn_update_f32_chw_neon_stride1_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_height_tile = 1;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_width_tile = 4;
+-
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5s2p2__neon_1x4;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.init.f32 = xnn_init_f32_chw_neon_stride2_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.update.f32 = xnn_update_f32_chw_neon_stride2_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_height_tile = 1;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_width_tile = 4;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3p1__scalar_4x1;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.init.f32 = xnn_init_f32_chw_scalar_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_height_tile = 4;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_width_tile = 1;
+-
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3s2p1__scalar_2x1_acc2;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.init.f32 = xnn_init_f32_chw_scalar_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_height_tile = 2;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_width_tile = 1;
+-
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5p2__scalar_2x1_acc2;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5.init.f32 = xnn_init_f32_chw_scalar_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_height_tile = 2;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_width_tile = 1;
+-
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5s2p2__scalar_2x1_acc2;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.init.f32 = xnn_init_f32_chw_scalar_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_height_tile = 2;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_width_tile = 1;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3p1__aarch64_neonfma_3x4;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3.init.f32 = xnn_init_f32_chw_neon_stride1_params;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3.update.f32 = xnn_update_f32_chw_neon_stride1_params;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_height_tile = 3;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_width_tile = 4;
+-
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3s2p1__aarch64_neonfma_2x4_acc2;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.init.f32 = xnn_init_f32_chw_neon_stride2_params;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.update.f32 = xnn_update_f32_chw_neon_stride2_params;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_height_tile = 2;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_width_tile = 4;
+-
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5p2__aarch64_neonfma_4x4;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5.init.f32 = xnn_init_f32_chw_neon_stride1_params;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5.update.f32 = xnn_update_f32_chw_neon_stride1_params;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_height_tile = 4;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_width_tile = 4;
+-
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5s2p2__aarch64_neonfma_1x4_acc2;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.init.f32 = xnn_init_f32_chw_neon_stride2_params;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.update.f32 = xnn_update_f32_chw_neon_stride2_params;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_height_tile = 1;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_width_tile = 4;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_ssse3) {
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3p1__ssse3_2x4_acc2;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.init.f32 = xnn_init_f32_chw_sse_stride1_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.update.f32 = xnn_update_f32_chw_sse_stride1_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_height_tile = 2;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_width_tile = 4;
+-    } else {
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3p1__sse_2x4_acc2;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.init.f32 = xnn_init_f32_chw_sse_stride1_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.update.f32 = xnn_update_f32_chw_sse_stride1_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_height_tile = 2;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_width_tile = 4;
+-    }
+-
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3s2p1__sse_1x4_acc3;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.init.f32 = xnn_init_f32_chw_sse_stride2_params;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.update.f32 = xnn_update_f32_chw_sse_stride2_params;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_height_tile = 1;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_width_tile = 4;
+-
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5p2__sse_4x4;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5.init.f32 = xnn_init_f32_chw_sse_stride1_params;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5.update.f32 = xnn_update_f32_chw_sse_stride1_params;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_height_tile = 4;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_width_tile = 4;
+-
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5s2p2__sse_2x4;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.init.f32 = xnn_init_f32_chw_sse_stride2_params;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.update.f32 = xnn_update_f32_chw_sse_stride2_params;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_height_tile = 2;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_width_tile = 4;
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3p1__wasmsimd_x86_loadsplat_2x4;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.init.f32 = xnn_init_f32_chw_wasmsimd_stride1_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.update.f32 = xnn_update_f32_chw_wasmsimd_stride1_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_height_tile = 2;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_width_tile = 4;
+-
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3s2p1__wasmsimd_x86_splat_1x4_acc2;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.init.f32 = xnn_init_f32_chw_wasmsimd_stride2_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.update.f32 = xnn_update_f32_chw_wasmsimd_stride2_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_height_tile = 1;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_width_tile = 4;
+-
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5p2__wasmsimd_x86_splat_3x4;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5.init.f32 = xnn_init_f32_chw_wasmsimd_stride1_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5.update.f32 = xnn_update_f32_chw_wasmsimd_stride1_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_height_tile = 3;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_width_tile = 4;
+-
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5s2p2__wasmsimd_x86_splat_1x4_acc2;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.init.f32 = xnn_init_f32_chw_wasmsimd_stride2_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.update.f32 = xnn_update_f32_chw_wasmsimd_stride2_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_height_tile = 1;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_width_tile = 4;
+-    } else {
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3p1__wasmsimd_arm_loadsplat_2x4;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.init.f32 = xnn_init_f32_chw_wasmsimd_stride1_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.update.f32 = xnn_update_f32_chw_wasmsimd_stride1_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_height_tile = 2;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_width_tile = 4;
+-
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3s2p1__wasmsimd_arm_splat_1x4_acc4;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.init.f32 = xnn_init_f32_chw_wasmsimd_stride2_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.update.f32 = xnn_update_f32_chw_wasmsimd_stride2_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_height_tile = 1;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_width_tile = 4;
+-
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5p2__wasmsimd_arm_splat_3x4;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5.init.f32 = xnn_init_f32_chw_wasmsimd_stride1_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5.update.f32 = xnn_update_f32_chw_wasmsimd_stride1_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_height_tile = 3;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_width_tile = 4;
+-
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5s2p2__wasmsimd_arm_splat_1x4_acc2;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.init.f32 = xnn_init_f32_chw_wasmsimd_stride2_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.update.f32 = xnn_update_f32_chw_wasmsimd_stride2_params;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_height_tile = 1;
+-      f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_width_tile = 4;
+-    }
+-  #elif XNN_ARCH_WASM
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3p1__scalar_2x1_acc2;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3.init.f32 = xnn_init_f32_chw_scalar_params;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_height_tile = 2;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_width_tile = 1;
+-
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3s2p1__scalar_1x1_acc2;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.init.f32 = xnn_init_f32_chw_scalar_params;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_height_tile = 1;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_width_tile = 1;
+-
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5p2__scalar_1x1_acc5;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5.init.f32 = xnn_init_f32_chw_scalar_params;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_height_tile = 1;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_width_tile = 1;
+-
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5s2p2__scalar_1x1_acc5;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.init.f32 = xnn_init_f32_chw_scalar_params;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_height_tile = 1;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_width_tile = 1;
+-  #elif XNN_ARCH_RISCV
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3p1__scalar_2x1_acc2;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3.init.f32 = xnn_init_f32_chw_scalar_params;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_height_tile = 2;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_width_tile = 1;
+-
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3s2p1__scalar_1x1_acc2;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.init.f32 = xnn_init_f32_chw_scalar_params;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_height_tile = 1;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_width_tile = 1;
+-
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5p2__scalar_1x1_acc5;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5.init.f32 = xnn_init_f32_chw_scalar_params;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_height_tile = 1;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_width_tile = 1;
+-
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5s2p2__scalar_1x1_acc5;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.init.f32 = xnn_init_f32_chw_scalar_params;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_height_tile = 1;
+-    f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_width_tile = 1;
+-  #endif
+-}
++// static void init_f16_dwconv2d_chw_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_dwconv2d_chw_config.dwconv2d_chw_3x3.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f16_dwconv2d_chw_ukernel_3x3p1__neonfp16arith_2x8;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_3x3.init.f16 = xnn_init_f16_chw_neonfp16arith_stride1_params;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_3x3.update.f16 = xnn_update_f16_chw_neonfp16arith_stride1_params;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_3x3.output_height_tile = 2;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_3x3.output_width_tile = 8;
++
++//       f16_dwconv2d_chw_config.dwconv2d_chw_3x3s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f16_dwconv2d_chw_ukernel_3x3s2p1__neonfp16arith_1x8;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_3x3s2.init.f16 = xnn_init_f16_chw_neonfp16arith_stride2_params;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_3x3s2.update.f16 = xnn_update_f16_chw_neonfp16arith_stride2_params;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_height_tile = 1;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_width_tile = 8;
++
++//       f16_dwconv2d_chw_config.dwconv2d_chw_5x5.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f16_dwconv2d_chw_ukernel_5x5p2__neonfp16arith_1x8;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_5x5.init.f16 = xnn_init_f16_chw_neonfp16arith_stride1_params;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_5x5.update.f16 = xnn_update_f16_chw_neonfp16arith_stride1_params;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_5x5.output_height_tile = 1;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_5x5.output_width_tile = 8;
++
++//       f16_dwconv2d_chw_config.dwconv2d_chw_5x5s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f16_dwconv2d_chw_ukernel_5x5s2p2__neonfp16arith_1x8;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_5x5s2.init.f16 = xnn_init_f16_chw_neonfp16arith_stride2_params;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_5x5s2.update.f16 = xnn_update_f16_chw_neonfp16arith_stride2_params;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_height_tile = 1;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_width_tile = 8;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_dwconv2d_chw_config.dwconv2d_chw_3x3.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f16_dwconv2d_chw_ukernel_3x3p1__neonfp16arith_2x8;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_3x3.init.f16 = xnn_init_f16_chw_neonfp16arith_stride1_params;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_3x3.update.f16 = xnn_update_f16_chw_neonfp16arith_stride1_params;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_3x3.output_height_tile = 2;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_3x3.output_width_tile = 8;
++
++//       f16_dwconv2d_chw_config.dwconv2d_chw_3x3s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f16_dwconv2d_chw_ukernel_3x3s2p1__neonfp16arith_1x8;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_3x3s2.init.f16 = xnn_init_f16_chw_neonfp16arith_stride2_params;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_3x3s2.update.f16 = xnn_update_f16_chw_neonfp16arith_stride2_params;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_height_tile = 1;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_width_tile = 8;
++
++//       f16_dwconv2d_chw_config.dwconv2d_chw_5x5.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f16_dwconv2d_chw_ukernel_5x5p2__neonfp16arith_1x8;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_5x5.init.f16 = xnn_init_f16_chw_neonfp16arith_stride1_params;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_5x5.update.f16 = xnn_update_f16_chw_neonfp16arith_stride1_params;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_5x5.output_height_tile = 1;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_5x5.output_width_tile = 8;
++
++//       f16_dwconv2d_chw_config.dwconv2d_chw_5x5s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f16_dwconv2d_chw_ukernel_5x5s2p2__neonfp16arith_1x8;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_5x5s2.init.f16 = xnn_init_f16_chw_neonfp16arith_stride2_params;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_5x5s2.update.f16 = xnn_update_f16_chw_neonfp16arith_stride2_params;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_height_tile = 1;
++//       f16_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_width_tile = 8;
++//     }
++//   #endif
++// }
++
++// static void init_f32_dwconv2d_chw_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3p1__neon_2x4;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.init.f32 = xnn_init_f32_chw_neon_stride1_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.update.f32 = xnn_update_f32_chw_neon_stride1_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_height_tile = 2;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_width_tile = 4;
++
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3s2p1__neon_1x4;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.init.f32 = xnn_init_f32_chw_neon_stride2_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.update.f32 = xnn_update_f32_chw_neon_stride2_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_height_tile = 1;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_width_tile = 4;
++
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5p2__neon_1x4;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5.init.f32 = xnn_init_f32_chw_neon_stride1_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5.update.f32 = xnn_update_f32_chw_neon_stride1_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_height_tile = 1;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_width_tile = 4;
++
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5s2p2__neon_1x4;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.init.f32 = xnn_init_f32_chw_neon_stride2_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.update.f32 = xnn_update_f32_chw_neon_stride2_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_height_tile = 1;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_width_tile = 4;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3p1__scalar_4x1;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.init.f32 = xnn_init_f32_chw_scalar_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_height_tile = 4;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_width_tile = 1;
++
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3s2p1__scalar_2x1_acc2;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.init.f32 = xnn_init_f32_chw_scalar_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_height_tile = 2;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_width_tile = 1;
++
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5p2__scalar_2x1_acc2;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5.init.f32 = xnn_init_f32_chw_scalar_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_height_tile = 2;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_width_tile = 1;
++
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5s2p2__scalar_2x1_acc2;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.init.f32 = xnn_init_f32_chw_scalar_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_height_tile = 2;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_width_tile = 1;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3p1__aarch64_neonfma_3x4;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3.init.f32 = xnn_init_f32_chw_neon_stride1_params;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3.update.f32 = xnn_update_f32_chw_neon_stride1_params;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_height_tile = 3;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_width_tile = 4;
++
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3s2p1__aarch64_neonfma_2x4_acc2;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.init.f32 = xnn_init_f32_chw_neon_stride2_params;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.update.f32 = xnn_update_f32_chw_neon_stride2_params;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_height_tile = 2;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_width_tile = 4;
++
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5p2__aarch64_neonfma_4x4;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5.init.f32 = xnn_init_f32_chw_neon_stride1_params;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5.update.f32 = xnn_update_f32_chw_neon_stride1_params;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_height_tile = 4;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_width_tile = 4;
++
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5s2p2__aarch64_neonfma_1x4_acc2;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.init.f32 = xnn_init_f32_chw_neon_stride2_params;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.update.f32 = xnn_update_f32_chw_neon_stride2_params;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_height_tile = 1;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_width_tile = 4;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_ssse3) {
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3p1__ssse3_2x4_acc2;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.init.f32 = xnn_init_f32_chw_sse_stride1_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.update.f32 = xnn_update_f32_chw_sse_stride1_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_height_tile = 2;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_width_tile = 4;
++//     } else {
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3p1__sse_2x4_acc2;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.init.f32 = xnn_init_f32_chw_sse_stride1_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.update.f32 = xnn_update_f32_chw_sse_stride1_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_height_tile = 2;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_width_tile = 4;
++//     }
++
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3s2p1__sse_1x4_acc3;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.init.f32 = xnn_init_f32_chw_sse_stride2_params;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.update.f32 = xnn_update_f32_chw_sse_stride2_params;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_height_tile = 1;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_width_tile = 4;
++
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5p2__sse_4x4;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5.init.f32 = xnn_init_f32_chw_sse_stride1_params;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5.update.f32 = xnn_update_f32_chw_sse_stride1_params;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_height_tile = 4;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_width_tile = 4;
++
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5s2p2__sse_2x4;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.init.f32 = xnn_init_f32_chw_sse_stride2_params;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.update.f32 = xnn_update_f32_chw_sse_stride2_params;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_height_tile = 2;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_width_tile = 4;
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3p1__wasmsimd_x86_loadsplat_2x4;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.init.f32 = xnn_init_f32_chw_wasmsimd_stride1_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.update.f32 = xnn_update_f32_chw_wasmsimd_stride1_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_height_tile = 2;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_width_tile = 4;
++
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3s2p1__wasmsimd_x86_splat_1x4_acc2;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.init.f32 = xnn_init_f32_chw_wasmsimd_stride2_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.update.f32 = xnn_update_f32_chw_wasmsimd_stride2_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_height_tile = 1;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_width_tile = 4;
++
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5p2__wasmsimd_x86_splat_3x4;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5.init.f32 = xnn_init_f32_chw_wasmsimd_stride1_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5.update.f32 = xnn_update_f32_chw_wasmsimd_stride1_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_height_tile = 3;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_width_tile = 4;
++
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5s2p2__wasmsimd_x86_splat_1x4_acc2;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.init.f32 = xnn_init_f32_chw_wasmsimd_stride2_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.update.f32 = xnn_update_f32_chw_wasmsimd_stride2_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_height_tile = 1;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_width_tile = 4;
++//     } else {
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3p1__wasmsimd_arm_loadsplat_2x4;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.init.f32 = xnn_init_f32_chw_wasmsimd_stride1_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.update.f32 = xnn_update_f32_chw_wasmsimd_stride1_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_height_tile = 2;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_width_tile = 4;
++
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3s2p1__wasmsimd_arm_splat_1x4_acc4;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.init.f32 = xnn_init_f32_chw_wasmsimd_stride2_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.update.f32 = xnn_update_f32_chw_wasmsimd_stride2_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_height_tile = 1;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_width_tile = 4;
++
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5p2__wasmsimd_arm_splat_3x4;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5.init.f32 = xnn_init_f32_chw_wasmsimd_stride1_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5.update.f32 = xnn_update_f32_chw_wasmsimd_stride1_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_height_tile = 3;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_width_tile = 4;
++
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5s2p2__wasmsimd_arm_splat_1x4_acc2;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.init.f32 = xnn_init_f32_chw_wasmsimd_stride2_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.update.f32 = xnn_update_f32_chw_wasmsimd_stride2_params;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_height_tile = 1;
++//       f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_width_tile = 4;
++//     }
++//   #elif XNN_ARCH_WASM
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3p1__scalar_2x1_acc2;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3.init.f32 = xnn_init_f32_chw_scalar_params;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_height_tile = 2;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_width_tile = 1;
++
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3s2p1__scalar_1x1_acc2;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.init.f32 = xnn_init_f32_chw_scalar_params;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_height_tile = 1;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_width_tile = 1;
++
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5p2__scalar_1x1_acc5;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5.init.f32 = xnn_init_f32_chw_scalar_params;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_height_tile = 1;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_width_tile = 1;
++
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5s2p2__scalar_1x1_acc5;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.init.f32 = xnn_init_f32_chw_scalar_params;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_height_tile = 1;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_width_tile = 1;
++//   #elif XNN_ARCH_RISCV
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3p1__scalar_2x1_acc2;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3.init.f32 = xnn_init_f32_chw_scalar_params;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_height_tile = 2;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3.output_width_tile = 1;
++
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_3x3s2p1__scalar_1x1_acc2;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.init.f32 = xnn_init_f32_chw_scalar_params;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_height_tile = 1;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_3x3s2.output_width_tile = 1;
++
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5p2__scalar_1x1_acc5;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5.init.f32 = xnn_init_f32_chw_scalar_params;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_height_tile = 1;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5.output_width_tile = 1;
++
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.ukernel = (xnn_dwconv2d_chw_ukernel_fn) xnn_f32_dwconv2d_chw_ukernel_5x5s2p2__scalar_1x1_acc5;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.init.f32 = xnn_init_f32_chw_scalar_params;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_height_tile = 1;
++//     f32_dwconv2d_chw_config.dwconv2d_chw_5x5s2.output_width_tile = 1;
++//   #endif
++// }
+ 
+ #if XNN_PLATFORM_WINDOWS
+   static BOOL CALLBACK init_f16_dwconv2d_chw_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_dwconv2d_chw_config();
++    //init_f16_dwconv2d_chw_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_dwconv2d_chw_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_dwconv2d_chw_config();
++    //init_f32_dwconv2d_chw_config();
+     return TRUE;
+   }
+ #endif
+diff --git a/src/gavgpool-config.c b/src/gavgpool-config.c
+index 72b70cc8b..8e0fa53e3 100644
+--- a/src/gavgpool-config.c
++++ b/src/gavgpool-config.c
+@@ -35,265 +35,265 @@ static struct xnn_gavgpool_config qu8_gavgpool_config = {0};
+   static pthread_once_t init_guard_qu8_gavgpool = PTHREAD_ONCE_INIT;
+ #endif
+ 
+-static void init_f16_gavgpool_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_f16_gavgpool_minmax_ukernel_7x__neonfp16arith_c8;
+-      f16_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_f16_gavgpool_minmax_ukernel_7p7x__neonfp16arith_c8;
+-      f16_gavgpool_config.init.f16 = xnn_init_f16_scaleminmax_fp16arith_params;
+-      f16_gavgpool_config.update.f16 = xnn_update_f16_scaleminmax_fp16arith_params;
+-      f16_gavgpool_config.row_tile = 7;
+-      f16_gavgpool_config.channel_tile = 8;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_f16_gavgpool_minmax_ukernel_7x__neonfp16arith_c8;
+-      f16_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_f16_gavgpool_minmax_ukernel_7p7x__neonfp16arith_c8;
+-      f16_gavgpool_config.init.f16 = xnn_init_f16_scaleminmax_fp16arith_params;
+-      f16_gavgpool_config.update.f16 = xnn_update_f16_scaleminmax_fp16arith_params;
+-      f16_gavgpool_config.row_tile = 7;
+-      f16_gavgpool_config.channel_tile = 8;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx2) {
+-      f16_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_f16_gavgpool_minmax_ukernel_7x__f16c_c8;
+-      f16_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_f16_gavgpool_minmax_ukernel_7p7x__f16c_c8;
+-      f16_gavgpool_config.init.f16 = xnn_init_f16_scaleminmax_avx_params;
+-      f16_gavgpool_config.update.f16 = xnn_update_f16_scaleminmax_avx_params;
+-      f16_gavgpool_config.row_tile = 7;
+-      f16_gavgpool_config.channel_tile = 8;
+-    }
+-  #endif
+-}
++// static void init_f16_gavgpool_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_f16_gavgpool_minmax_ukernel_7x__neonfp16arith_c8;
++//       f16_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_f16_gavgpool_minmax_ukernel_7p7x__neonfp16arith_c8;
++//       f16_gavgpool_config.init.f16 = xnn_init_f16_scaleminmax_fp16arith_params;
++//       f16_gavgpool_config.update.f16 = xnn_update_f16_scaleminmax_fp16arith_params;
++//       f16_gavgpool_config.row_tile = 7;
++//       f16_gavgpool_config.channel_tile = 8;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_f16_gavgpool_minmax_ukernel_7x__neonfp16arith_c8;
++//       f16_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_f16_gavgpool_minmax_ukernel_7p7x__neonfp16arith_c8;
++//       f16_gavgpool_config.init.f16 = xnn_init_f16_scaleminmax_fp16arith_params;
++//       f16_gavgpool_config.update.f16 = xnn_update_f16_scaleminmax_fp16arith_params;
++//       f16_gavgpool_config.row_tile = 7;
++//       f16_gavgpool_config.channel_tile = 8;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx2) {
++//       f16_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_f16_gavgpool_minmax_ukernel_7x__f16c_c8;
++//       f16_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_f16_gavgpool_minmax_ukernel_7p7x__f16c_c8;
++//       f16_gavgpool_config.init.f16 = xnn_init_f16_scaleminmax_avx_params;
++//       f16_gavgpool_config.update.f16 = xnn_update_f16_scaleminmax_avx_params;
++//       f16_gavgpool_config.row_tile = 7;
++//       f16_gavgpool_config.channel_tile = 8;
++//     }
++//   #endif
++// }
+ 
+-static void init_f32_gavgpool_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      f32_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7x__neon_c4;
+-      f32_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7p7x__neon_c4;
+-      f32_gavgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
+-      f32_gavgpool_config.update.f32 = xnn_update_f32_scaleminmax_scalar_params;
+-      f32_gavgpool_config.row_tile = 7;
+-      f32_gavgpool_config.channel_tile = 4;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7x__scalar_c1;
+-      f32_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7p7x__scalar_c1;
+-      f32_gavgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
+-      f32_gavgpool_config.update.f32 = xnn_update_f32_scaleminmax_scalar_params;
+-      f32_gavgpool_config.row_tile = 7;
+-      f32_gavgpool_config.channel_tile = 1;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7x__neon_c4;
+-    f32_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7p7x__neon_c4;
+-    f32_gavgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
+-    f32_gavgpool_config.update.f32 = xnn_update_f32_scaleminmax_scalar_params;
+-    f32_gavgpool_config.row_tile = 7;
+-    f32_gavgpool_config.channel_tile = 4;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    f32_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7x__sse_c4;
+-    f32_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7p7x__sse_c4;
+-    f32_gavgpool_config.init.f32 = xnn_init_f32_scaleminmax_sse_params;
+-    f32_gavgpool_config.update.f32 = xnn_update_f32_scaleminmax_sse_params;
+-    f32_gavgpool_config.row_tile = 7;
+-    f32_gavgpool_config.channel_tile = 4;
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      f32_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7x__wasmsimd_x86_c4;
+-      f32_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7p7x__wasmsimd_x86_c4;
+-      f32_gavgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
+-      f32_gavgpool_config.update.f32 = xnn_update_f32_scaleminmax_scalar_params;
+-      f32_gavgpool_config.row_tile = 7;
+-      f32_gavgpool_config.channel_tile = 4;
+-    } else {
+-      f32_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7x__wasmsimd_arm_c4;
+-      f32_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7p7x__wasmsimd_arm_c4;
+-      f32_gavgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
+-      f32_gavgpool_config.update.f32 = xnn_update_f32_scaleminmax_scalar_params;
+-      f32_gavgpool_config.row_tile = 7;
+-      f32_gavgpool_config.channel_tile = 4;
+-    }
+-  #elif XNN_ARCH_WASM
+-    f32_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7x__wasm_c1;
+-    f32_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7p7x__wasm_c1;
+-    f32_gavgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
+-    f32_gavgpool_config.update.f32 = xnn_update_f32_scaleminmax_scalar_params;
+-    f32_gavgpool_config.row_tile = 7;
+-    f32_gavgpool_config.channel_tile = 1;
+-  #elif XNN_ARCH_RISCV
+-    f32_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7x__scalar_c1;
+-    f32_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7p7x__scalar_c1;
+-    f32_gavgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
+-    f32_gavgpool_config.update.f32 = xnn_update_f32_scaleminmax_scalar_params;
+-    f32_gavgpool_config.row_tile = 7;
+-    f32_gavgpool_config.channel_tile = 1;
+-  #endif
+-}
++// static void init_f32_gavgpool_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       f32_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7x__neon_c4;
++//       f32_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7p7x__neon_c4;
++//       f32_gavgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
++//       f32_gavgpool_config.update.f32 = xnn_update_f32_scaleminmax_scalar_params;
++//       f32_gavgpool_config.row_tile = 7;
++//       f32_gavgpool_config.channel_tile = 4;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7x__scalar_c1;
++//       f32_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7p7x__scalar_c1;
++//       f32_gavgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
++//       f32_gavgpool_config.update.f32 = xnn_update_f32_scaleminmax_scalar_params;
++//       f32_gavgpool_config.row_tile = 7;
++//       f32_gavgpool_config.channel_tile = 1;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7x__neon_c4;
++//     f32_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7p7x__neon_c4;
++//     f32_gavgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
++//     f32_gavgpool_config.update.f32 = xnn_update_f32_scaleminmax_scalar_params;
++//     f32_gavgpool_config.row_tile = 7;
++//     f32_gavgpool_config.channel_tile = 4;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     f32_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7x__sse_c4;
++//     f32_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7p7x__sse_c4;
++//     f32_gavgpool_config.init.f32 = xnn_init_f32_scaleminmax_sse_params;
++//     f32_gavgpool_config.update.f32 = xnn_update_f32_scaleminmax_sse_params;
++//     f32_gavgpool_config.row_tile = 7;
++//     f32_gavgpool_config.channel_tile = 4;
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       f32_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7x__wasmsimd_x86_c4;
++//       f32_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7p7x__wasmsimd_x86_c4;
++//       f32_gavgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
++//       f32_gavgpool_config.update.f32 = xnn_update_f32_scaleminmax_scalar_params;
++//       f32_gavgpool_config.row_tile = 7;
++//       f32_gavgpool_config.channel_tile = 4;
++//     } else {
++//       f32_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7x__wasmsimd_arm_c4;
++//       f32_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7p7x__wasmsimd_arm_c4;
++//       f32_gavgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
++//       f32_gavgpool_config.update.f32 = xnn_update_f32_scaleminmax_scalar_params;
++//       f32_gavgpool_config.row_tile = 7;
++//       f32_gavgpool_config.channel_tile = 4;
++//     }
++//   #elif XNN_ARCH_WASM
++//     f32_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7x__wasm_c1;
++//     f32_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7p7x__wasm_c1;
++//     f32_gavgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
++//     f32_gavgpool_config.update.f32 = xnn_update_f32_scaleminmax_scalar_params;
++//     f32_gavgpool_config.row_tile = 7;
++//     f32_gavgpool_config.channel_tile = 1;
++//   #elif XNN_ARCH_RISCV
++//     f32_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7x__scalar_c1;
++//     f32_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_f32_gavgpool_minmax_ukernel_7p7x__scalar_c1;
++//     f32_gavgpool_config.init.f32 = xnn_init_f32_scaleminmax_scalar_params;
++//     f32_gavgpool_config.update.f32 = xnn_update_f32_scaleminmax_scalar_params;
++//     f32_gavgpool_config.row_tile = 7;
++//     f32_gavgpool_config.channel_tile = 1;
++//   #endif
++// }
+ 
+-static void init_qs8_gavgpool_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      qs8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qs8_gavgpool_minmax_rndnu_ukernel_7x__neon_c8;
+-      qs8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qs8_gavgpool_minmax_rndnu_ukernel_7p7x__neon_c8;
+-      qs8_gavgpool_config.init.qs8 = xnn_init_qs8_avgpool_minmax_rndnu_neon_params;
+-      qs8_gavgpool_config.update.qs8 = xnn_update_qs8_avgpool_minmax_rndnu_neon_params;
+-      qs8_gavgpool_config.row_tile = 7;
+-      qs8_gavgpool_config.channel_tile = 8;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      qs8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qs8_gavgpool_minmax_fp32_ukernel_7x__scalar_imagic_c1;
+-      qs8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qs8_gavgpool_minmax_fp32_ukernel_7p7x__scalar_imagic_c1;
+-      qs8_gavgpool_config.init.qs8 = xnn_init_qs8_avgpool_minmax_fp32_scalar_imagic_params;
+-      qs8_gavgpool_config.update.qs8 = xnn_update_qs8_avgpool_minmax_fp32_scalar_imagic_params;
+-      qs8_gavgpool_config.row_tile = 7;
+-      qs8_gavgpool_config.channel_tile = 1;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    qs8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qs8_gavgpool_minmax_rndnu_ukernel_7x__neon_c8;
+-    qs8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qs8_gavgpool_minmax_rndnu_ukernel_7p7x__neon_c8;
+-    qs8_gavgpool_config.init.qs8 = xnn_init_qs8_avgpool_minmax_rndnu_neon_params;
+-    qs8_gavgpool_config.update.qs8 = xnn_update_qs8_avgpool_minmax_rndnu_neon_params;
+-    qs8_gavgpool_config.row_tile = 7;
+-    qs8_gavgpool_config.channel_tile = 8;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_sse4_1) {
+-      qs8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qs8_gavgpool_minmax_fp32_ukernel_7x__sse41_c8;
+-      qs8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qs8_gavgpool_minmax_fp32_ukernel_7p7x__sse41_c8;
+-      qs8_gavgpool_config.init.qs8 = xnn_init_qs8_avgpool_minmax_fp32_sse4_params;
+-      qs8_gavgpool_config.update.qs8 = xnn_update_qs8_avgpool_minmax_fp32_sse4_params;
+-      qs8_gavgpool_config.row_tile = 7;
+-      qs8_gavgpool_config.channel_tile = 8;
+-    } else {
+-      qs8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qs8_gavgpool_minmax_fp32_ukernel_7x__sse2_c8;
+-      qs8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qs8_gavgpool_minmax_fp32_ukernel_7p7x__sse2_c8;
+-      qs8_gavgpool_config.init.qs8 = xnn_init_qs8_avgpool_minmax_fp32_sse2_params;
+-      qs8_gavgpool_config.update.qs8 = xnn_update_qs8_avgpool_minmax_fp32_sse2_params;
+-      qs8_gavgpool_config.row_tile = 7;
+-      qs8_gavgpool_config.channel_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    qs8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qs8_gavgpool_minmax_fp32_ukernel_7x__wasmsimd_c16;
+-    qs8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qs8_gavgpool_minmax_fp32_ukernel_7p7x__wasmsimd_c16;
+-    qs8_gavgpool_config.init.qs8 = xnn_init_qs8_avgpool_minmax_fp32_wasmsimd_params;
+-    qs8_gavgpool_config.update.qs8 = xnn_update_qs8_avgpool_minmax_fp32_wasmsimd_params;
+-    qs8_gavgpool_config.row_tile = 7;
+-    qs8_gavgpool_config.channel_tile = 16;
+-  #elif XNN_ARCH_WASM
+-    qs8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qs8_gavgpool_minmax_fp32_ukernel_7x__scalar_imagic_c4;
+-    qs8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qs8_gavgpool_minmax_fp32_ukernel_7p7x__scalar_imagic_c4;
+-    qs8_gavgpool_config.init.qs8 = xnn_init_qs8_avgpool_minmax_fp32_scalar_imagic_params;
+-    qs8_gavgpool_config.update.qs8 = xnn_update_qs8_avgpool_minmax_fp32_scalar_imagic_params;
+-    qs8_gavgpool_config.row_tile = 7;
+-    qs8_gavgpool_config.channel_tile = 4;
+-  #elif XNN_ARCH_RISCV
+-    qs8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qs8_gavgpool_minmax_fp32_ukernel_7x__scalar_imagic_c1;
+-    qs8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qs8_gavgpool_minmax_fp32_ukernel_7p7x__scalar_imagic_c1;
+-    qs8_gavgpool_config.init.qs8 = xnn_init_qs8_avgpool_minmax_fp32_scalar_imagic_params;
+-    qs8_gavgpool_config.update.qs8 = xnn_update_qs8_avgpool_minmax_fp32_scalar_imagic_params;
+-    qs8_gavgpool_config.row_tile = 7;
+-    qs8_gavgpool_config.channel_tile = 1;
+-  #endif
+-}
++// static void init_qs8_gavgpool_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       qs8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qs8_gavgpool_minmax_rndnu_ukernel_7x__neon_c8;
++//       qs8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qs8_gavgpool_minmax_rndnu_ukernel_7p7x__neon_c8;
++//       qs8_gavgpool_config.init.qs8 = xnn_init_qs8_avgpool_minmax_rndnu_neon_params;
++//       qs8_gavgpool_config.update.qs8 = xnn_update_qs8_avgpool_minmax_rndnu_neon_params;
++//       qs8_gavgpool_config.row_tile = 7;
++//       qs8_gavgpool_config.channel_tile = 8;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       qs8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qs8_gavgpool_minmax_fp32_ukernel_7x__scalar_imagic_c1;
++//       qs8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qs8_gavgpool_minmax_fp32_ukernel_7p7x__scalar_imagic_c1;
++//       qs8_gavgpool_config.init.qs8 = xnn_init_qs8_avgpool_minmax_fp32_scalar_imagic_params;
++//       qs8_gavgpool_config.update.qs8 = xnn_update_qs8_avgpool_minmax_fp32_scalar_imagic_params;
++//       qs8_gavgpool_config.row_tile = 7;
++//       qs8_gavgpool_config.channel_tile = 1;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     qs8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qs8_gavgpool_minmax_rndnu_ukernel_7x__neon_c8;
++//     qs8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qs8_gavgpool_minmax_rndnu_ukernel_7p7x__neon_c8;
++//     qs8_gavgpool_config.init.qs8 = xnn_init_qs8_avgpool_minmax_rndnu_neon_params;
++//     qs8_gavgpool_config.update.qs8 = xnn_update_qs8_avgpool_minmax_rndnu_neon_params;
++//     qs8_gavgpool_config.row_tile = 7;
++//     qs8_gavgpool_config.channel_tile = 8;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_sse4_1) {
++//       qs8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qs8_gavgpool_minmax_fp32_ukernel_7x__sse41_c8;
++//       qs8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qs8_gavgpool_minmax_fp32_ukernel_7p7x__sse41_c8;
++//       qs8_gavgpool_config.init.qs8 = xnn_init_qs8_avgpool_minmax_fp32_sse4_params;
++//       qs8_gavgpool_config.update.qs8 = xnn_update_qs8_avgpool_minmax_fp32_sse4_params;
++//       qs8_gavgpool_config.row_tile = 7;
++//       qs8_gavgpool_config.channel_tile = 8;
++//     } else {
++//       qs8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qs8_gavgpool_minmax_fp32_ukernel_7x__sse2_c8;
++//       qs8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qs8_gavgpool_minmax_fp32_ukernel_7p7x__sse2_c8;
++//       qs8_gavgpool_config.init.qs8 = xnn_init_qs8_avgpool_minmax_fp32_sse2_params;
++//       qs8_gavgpool_config.update.qs8 = xnn_update_qs8_avgpool_minmax_fp32_sse2_params;
++//       qs8_gavgpool_config.row_tile = 7;
++//       qs8_gavgpool_config.channel_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     qs8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qs8_gavgpool_minmax_fp32_ukernel_7x__wasmsimd_c16;
++//     qs8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qs8_gavgpool_minmax_fp32_ukernel_7p7x__wasmsimd_c16;
++//     qs8_gavgpool_config.init.qs8 = xnn_init_qs8_avgpool_minmax_fp32_wasmsimd_params;
++//     qs8_gavgpool_config.update.qs8 = xnn_update_qs8_avgpool_minmax_fp32_wasmsimd_params;
++//     qs8_gavgpool_config.row_tile = 7;
++//     qs8_gavgpool_config.channel_tile = 16;
++//   #elif XNN_ARCH_WASM
++//     qs8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qs8_gavgpool_minmax_fp32_ukernel_7x__scalar_imagic_c4;
++//     qs8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qs8_gavgpool_minmax_fp32_ukernel_7p7x__scalar_imagic_c4;
++//     qs8_gavgpool_config.init.qs8 = xnn_init_qs8_avgpool_minmax_fp32_scalar_imagic_params;
++//     qs8_gavgpool_config.update.qs8 = xnn_update_qs8_avgpool_minmax_fp32_scalar_imagic_params;
++//     qs8_gavgpool_config.row_tile = 7;
++//     qs8_gavgpool_config.channel_tile = 4;
++//   #elif XNN_ARCH_RISCV
++//     qs8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qs8_gavgpool_minmax_fp32_ukernel_7x__scalar_imagic_c1;
++//     qs8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qs8_gavgpool_minmax_fp32_ukernel_7p7x__scalar_imagic_c1;
++//     qs8_gavgpool_config.init.qs8 = xnn_init_qs8_avgpool_minmax_fp32_scalar_imagic_params;
++//     qs8_gavgpool_config.update.qs8 = xnn_update_qs8_avgpool_minmax_fp32_scalar_imagic_params;
++//     qs8_gavgpool_config.row_tile = 7;
++//     qs8_gavgpool_config.channel_tile = 1;
++//   #endif
++// }
+ 
+-static void init_qu8_gavgpool_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      qu8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qu8_gavgpool_minmax_rndnu_ukernel_7x__neon_c8;
+-      qu8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qu8_gavgpool_minmax_rndnu_ukernel_7p7x__neon_c8;
+-      qu8_gavgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_rndnu_neon_params;
+-      qu8_gavgpool_config.update.qu8 = xnn_update_qu8_avgpool_minmax_rndnu_neon_params;
+-      qu8_gavgpool_config.row_tile = 7;
+-      qu8_gavgpool_config.channel_tile = 8;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      qu8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qu8_gavgpool_minmax_fp32_ukernel_7x__scalar_imagic_c1;
+-      qu8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qu8_gavgpool_minmax_fp32_ukernel_7p7x__scalar_imagic_c1;
+-      qu8_gavgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_fp32_scalar_imagic_params;
+-      qu8_gavgpool_config.update.qu8 = xnn_update_qu8_avgpool_minmax_fp32_scalar_imagic_params;
+-      qu8_gavgpool_config.row_tile = 7;
+-      qu8_gavgpool_config.channel_tile = 1;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    qu8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qu8_gavgpool_minmax_rndnu_ukernel_7x__neon_c8;
+-    qu8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qu8_gavgpool_minmax_rndnu_ukernel_7p7x__neon_c8;
+-    qu8_gavgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_rndnu_neon_params;
+-    qu8_gavgpool_config.update.qu8 = xnn_update_qu8_avgpool_minmax_rndnu_neon_params;
+-    qu8_gavgpool_config.row_tile = 7;
+-    qu8_gavgpool_config.channel_tile = 8;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_sse4_1) {
+-      qu8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qu8_gavgpool_minmax_fp32_ukernel_7x__sse41_c8;
+-      qu8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qu8_gavgpool_minmax_fp32_ukernel_7p7x__sse41_c8;
+-      qu8_gavgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_fp32_sse4_params;
+-      qu8_gavgpool_config.update.qu8 = xnn_update_qu8_avgpool_minmax_fp32_sse4_params;
+-      qu8_gavgpool_config.row_tile = 7;
+-      qu8_gavgpool_config.channel_tile = 8;
+-    } else {
+-      qu8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qu8_gavgpool_minmax_fp32_ukernel_7x__sse2_c8;
+-      qu8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qu8_gavgpool_minmax_fp32_ukernel_7p7x__sse2_c8;
+-      qu8_gavgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_fp32_sse2_params;
+-      qu8_gavgpool_config.update.qu8 = xnn_update_qu8_avgpool_minmax_fp32_sse2_params;
+-      qu8_gavgpool_config.row_tile = 7;
+-      qu8_gavgpool_config.channel_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    qu8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qu8_gavgpool_minmax_fp32_ukernel_7x__wasmsimd_c16;
+-    qu8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qu8_gavgpool_minmax_fp32_ukernel_7p7x__wasmsimd_c16;
+-    qu8_gavgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_fp32_wasmsimd_params;
+-    qu8_gavgpool_config.update.qu8 = xnn_update_qu8_avgpool_minmax_fp32_wasmsimd_params;
+-    qu8_gavgpool_config.row_tile = 7;
+-    qu8_gavgpool_config.channel_tile = 16;
+-  #elif XNN_ARCH_WASM
+-    qu8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qu8_gavgpool_minmax_fp32_ukernel_7x__scalar_imagic_c4;
+-    qu8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qu8_gavgpool_minmax_fp32_ukernel_7p7x__scalar_imagic_c4;
+-    qu8_gavgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_fp32_scalar_imagic_params;
+-    qu8_gavgpool_config.update.qu8 = xnn_update_qu8_avgpool_minmax_fp32_scalar_imagic_params;
+-    qu8_gavgpool_config.row_tile = 7;
+-    qu8_gavgpool_config.channel_tile = 4;
+-  #elif XNN_ARCH_RISCV
+-    qu8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qu8_gavgpool_minmax_fp32_ukernel_7x__scalar_imagic_c1;
+-    qu8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qu8_gavgpool_minmax_fp32_ukernel_7p7x__scalar_imagic_c1;
+-    qu8_gavgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_fp32_scalar_imagic_params;
+-    qu8_gavgpool_config.update.qu8 = xnn_update_qu8_avgpool_minmax_fp32_scalar_imagic_params;
+-    qu8_gavgpool_config.row_tile = 7;
+-    qu8_gavgpool_config.channel_tile = 1;
+-  #endif
+-}
++// static void init_qu8_gavgpool_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       qu8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qu8_gavgpool_minmax_rndnu_ukernel_7x__neon_c8;
++//       qu8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qu8_gavgpool_minmax_rndnu_ukernel_7p7x__neon_c8;
++//       qu8_gavgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_rndnu_neon_params;
++//       qu8_gavgpool_config.update.qu8 = xnn_update_qu8_avgpool_minmax_rndnu_neon_params;
++//       qu8_gavgpool_config.row_tile = 7;
++//       qu8_gavgpool_config.channel_tile = 8;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       qu8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qu8_gavgpool_minmax_fp32_ukernel_7x__scalar_imagic_c1;
++//       qu8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qu8_gavgpool_minmax_fp32_ukernel_7p7x__scalar_imagic_c1;
++//       qu8_gavgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_fp32_scalar_imagic_params;
++//       qu8_gavgpool_config.update.qu8 = xnn_update_qu8_avgpool_minmax_fp32_scalar_imagic_params;
++//       qu8_gavgpool_config.row_tile = 7;
++//       qu8_gavgpool_config.channel_tile = 1;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     qu8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qu8_gavgpool_minmax_rndnu_ukernel_7x__neon_c8;
++//     qu8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qu8_gavgpool_minmax_rndnu_ukernel_7p7x__neon_c8;
++//     qu8_gavgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_rndnu_neon_params;
++//     qu8_gavgpool_config.update.qu8 = xnn_update_qu8_avgpool_minmax_rndnu_neon_params;
++//     qu8_gavgpool_config.row_tile = 7;
++//     qu8_gavgpool_config.channel_tile = 8;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_sse4_1) {
++//       qu8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qu8_gavgpool_minmax_fp32_ukernel_7x__sse41_c8;
++//       qu8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qu8_gavgpool_minmax_fp32_ukernel_7p7x__sse41_c8;
++//       qu8_gavgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_fp32_sse4_params;
++//       qu8_gavgpool_config.update.qu8 = xnn_update_qu8_avgpool_minmax_fp32_sse4_params;
++//       qu8_gavgpool_config.row_tile = 7;
++//       qu8_gavgpool_config.channel_tile = 8;
++//     } else {
++//       qu8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qu8_gavgpool_minmax_fp32_ukernel_7x__sse2_c8;
++//       qu8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qu8_gavgpool_minmax_fp32_ukernel_7p7x__sse2_c8;
++//       qu8_gavgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_fp32_sse2_params;
++//       qu8_gavgpool_config.update.qu8 = xnn_update_qu8_avgpool_minmax_fp32_sse2_params;
++//       qu8_gavgpool_config.row_tile = 7;
++//       qu8_gavgpool_config.channel_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     qu8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qu8_gavgpool_minmax_fp32_ukernel_7x__wasmsimd_c16;
++//     qu8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qu8_gavgpool_minmax_fp32_ukernel_7p7x__wasmsimd_c16;
++//     qu8_gavgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_fp32_wasmsimd_params;
++//     qu8_gavgpool_config.update.qu8 = xnn_update_qu8_avgpool_minmax_fp32_wasmsimd_params;
++//     qu8_gavgpool_config.row_tile = 7;
++//     qu8_gavgpool_config.channel_tile = 16;
++//   #elif XNN_ARCH_WASM
++//     qu8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qu8_gavgpool_minmax_fp32_ukernel_7x__scalar_imagic_c4;
++//     qu8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qu8_gavgpool_minmax_fp32_ukernel_7p7x__scalar_imagic_c4;
++//     qu8_gavgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_fp32_scalar_imagic_params;
++//     qu8_gavgpool_config.update.qu8 = xnn_update_qu8_avgpool_minmax_fp32_scalar_imagic_params;
++//     qu8_gavgpool_config.row_tile = 7;
++//     qu8_gavgpool_config.channel_tile = 4;
++//   #elif XNN_ARCH_RISCV
++//     qu8_gavgpool_config.unipass = (xnn_gavgpool_unipass_ukernel_fn) xnn_qu8_gavgpool_minmax_fp32_ukernel_7x__scalar_imagic_c1;
++//     qu8_gavgpool_config.multipass = (xnn_gavgpool_multipass_ukernel_fn) xnn_qu8_gavgpool_minmax_fp32_ukernel_7p7x__scalar_imagic_c1;
++//     qu8_gavgpool_config.init.qu8 = xnn_init_qu8_avgpool_minmax_fp32_scalar_imagic_params;
++//     qu8_gavgpool_config.update.qu8 = xnn_update_qu8_avgpool_minmax_fp32_scalar_imagic_params;
++//     qu8_gavgpool_config.row_tile = 7;
++//     qu8_gavgpool_config.channel_tile = 1;
++//   #endif
++// }
+ 
+ #if XNN_PLATFORM_WINDOWS
+   static BOOL CALLBACK init_f16_gavgpool_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_gavgpool_config();
++    //init_f16_gavgpool_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_gavgpool_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_gavgpool_config();
++    //init_f32_gavgpool_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_qs8_gavgpool_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_qs8_gavgpool_config();
++    //init_qs8_gavgpool_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_qu8_gavgpool_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_qu8_gavgpool_config();
++    //init_qu8_gavgpool_config();
+     return TRUE;
+   }
+ #endif
+diff --git a/src/gavgpool-cw-config.c b/src/gavgpool-cw-config.c
+index 87b15c8bd..5c0937954 100644
+--- a/src/gavgpool-cw-config.c
++++ b/src/gavgpool-cw-config.c
+@@ -29,72 +29,72 @@ static struct xnn_gavgpool_cw_config f32_gavgpool_cw_config = {0};
+   static pthread_once_t init_guard_f32_gavgpool_cw = PTHREAD_ONCE_INIT;
+ #endif
+ 
+-static void init_f16_gavgpool_cw_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_gavgpool_cw_config.ukernel = (xnn_gavgpool_cw_ukernel_fn) xnn_f16_gavgpool_cw_ukernel__neonfp16arith_x8;
+-      f16_gavgpool_cw_config.init.f16 = xnn_init_f16_gavgpool_neonfp16arith_params;
+-      f16_gavgpool_cw_config.update.f16 = xnn_update_f16_gavgpool_neonfp16arith_params;
+-      f16_gavgpool_cw_config.channel_tile = 8;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_gavgpool_cw_config.ukernel = (xnn_gavgpool_cw_ukernel_fn) xnn_f16_gavgpool_cw_ukernel__neonfp16arith_x8;
+-      f16_gavgpool_cw_config.init.f16 = xnn_init_f16_gavgpool_neonfp16arith_params;
+-      f16_gavgpool_cw_config.update.f16 = xnn_update_f16_gavgpool_neonfp16arith_params;
+-      f16_gavgpool_cw_config.channel_tile = 8;
+-    }
+-  #endif
+-}
++// static void init_f16_gavgpool_cw_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_gavgpool_cw_config.ukernel = (xnn_gavgpool_cw_ukernel_fn) xnn_f16_gavgpool_cw_ukernel__neonfp16arith_x8;
++//       f16_gavgpool_cw_config.init.f16 = xnn_init_f16_gavgpool_neonfp16arith_params;
++//       f16_gavgpool_cw_config.update.f16 = xnn_update_f16_gavgpool_neonfp16arith_params;
++//       f16_gavgpool_cw_config.channel_tile = 8;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_gavgpool_cw_config.ukernel = (xnn_gavgpool_cw_ukernel_fn) xnn_f16_gavgpool_cw_ukernel__neonfp16arith_x8;
++//       f16_gavgpool_cw_config.init.f16 = xnn_init_f16_gavgpool_neonfp16arith_params;
++//       f16_gavgpool_cw_config.update.f16 = xnn_update_f16_gavgpool_neonfp16arith_params;
++//       f16_gavgpool_cw_config.channel_tile = 8;
++//     }
++//   #endif
++// }
+ 
+-static void init_f32_gavgpool_cw_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      f32_gavgpool_cw_config.ukernel = (xnn_gavgpool_cw_ukernel_fn) xnn_f32_gavgpool_cw_ukernel__neon_x4;
+-      f32_gavgpool_cw_config.channel_tile = 4;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_gavgpool_cw_config.ukernel = (xnn_gavgpool_cw_ukernel_fn) xnn_f32_gavgpool_cw_ukernel__scalar_x1;
+-      f32_gavgpool_cw_config.channel_tile = 1;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_gavgpool_cw_config.ukernel = (xnn_gavgpool_cw_ukernel_fn) xnn_f32_gavgpool_cw_ukernel__neon_x4;
+-    f32_gavgpool_cw_config.channel_tile = 4;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    f32_gavgpool_cw_config.ukernel = (xnn_gavgpool_cw_ukernel_fn) xnn_f32_gavgpool_cw_ukernel__sse_x4;
+-    f32_gavgpool_cw_config.channel_tile = 4;
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      f32_gavgpool_cw_config.ukernel = (xnn_gavgpool_cw_ukernel_fn) xnn_f32_gavgpool_cw_ukernel__wasmsimd_x86_x4;
+-      f32_gavgpool_cw_config.channel_tile = 4;
+-    } else {
+-      f32_gavgpool_cw_config.ukernel = (xnn_gavgpool_cw_ukernel_fn) xnn_f32_gavgpool_cw_ukernel__wasmsimd_arm_x4;
+-      f32_gavgpool_cw_config.channel_tile = 4;
+-    }
+-  #elif XNN_ARCH_WASM
+-    f32_gavgpool_cw_config.ukernel = (xnn_gavgpool_cw_ukernel_fn) xnn_f32_gavgpool_cw_ukernel__scalar_x1;
+-    f32_gavgpool_cw_config.channel_tile = 1;
+-  #elif XNN_ARCH_RISCV
+-    f32_gavgpool_cw_config.ukernel = (xnn_gavgpool_cw_ukernel_fn) xnn_f32_gavgpool_cw_ukernel__scalar_x1;
+-    f32_gavgpool_cw_config.channel_tile = 1;
+-  #endif
+-}
++// static void init_f32_gavgpool_cw_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       f32_gavgpool_cw_config.ukernel = (xnn_gavgpool_cw_ukernel_fn) xnn_f32_gavgpool_cw_ukernel__neon_x4;
++//       f32_gavgpool_cw_config.channel_tile = 4;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_gavgpool_cw_config.ukernel = (xnn_gavgpool_cw_ukernel_fn) xnn_f32_gavgpool_cw_ukernel__scalar_x1;
++//       f32_gavgpool_cw_config.channel_tile = 1;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_gavgpool_cw_config.ukernel = (xnn_gavgpool_cw_ukernel_fn) xnn_f32_gavgpool_cw_ukernel__neon_x4;
++//     f32_gavgpool_cw_config.channel_tile = 4;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     f32_gavgpool_cw_config.ukernel = (xnn_gavgpool_cw_ukernel_fn) xnn_f32_gavgpool_cw_ukernel__sse_x4;
++//     f32_gavgpool_cw_config.channel_tile = 4;
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       f32_gavgpool_cw_config.ukernel = (xnn_gavgpool_cw_ukernel_fn) xnn_f32_gavgpool_cw_ukernel__wasmsimd_x86_x4;
++//       f32_gavgpool_cw_config.channel_tile = 4;
++//     } else {
++//       f32_gavgpool_cw_config.ukernel = (xnn_gavgpool_cw_ukernel_fn) xnn_f32_gavgpool_cw_ukernel__wasmsimd_arm_x4;
++//       f32_gavgpool_cw_config.channel_tile = 4;
++//     }
++//   #elif XNN_ARCH_WASM
++//     f32_gavgpool_cw_config.ukernel = (xnn_gavgpool_cw_ukernel_fn) xnn_f32_gavgpool_cw_ukernel__scalar_x1;
++//     f32_gavgpool_cw_config.channel_tile = 1;
++//   #elif XNN_ARCH_RISCV
++//     f32_gavgpool_cw_config.ukernel = (xnn_gavgpool_cw_ukernel_fn) xnn_f32_gavgpool_cw_ukernel__scalar_x1;
++//     f32_gavgpool_cw_config.channel_tile = 1;
++//   #endif
++// }
+ 
+ #if XNN_PLATFORM_WINDOWS
+   static BOOL CALLBACK init_f16_gavgpool_cw_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_gavgpool_cw_config();
++    //init_f16_gavgpool_cw_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_gavgpool_cw_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_gavgpool_cw_config();
++    //init_f32_gavgpool_cw_config();
+     return TRUE;
+   }
+ #endif
+diff --git a/src/gemm-config.c b/src/gemm-config.c
+index 3b9e32abb..06427320b 100644
+--- a/src/gemm-config.c
++++ b/src/gemm-config.c
+@@ -50,2468 +50,2468 @@ static struct xnn_gemm_config qu8_gemm_config = {0};
+   static pthread_once_t init_guard_qu8_gemm = PTHREAD_ONCE_INIT;
+ #endif
+ 
+-static void init_f16_gemm_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_6x8__neonfp16arith_ld64);
+-      f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_6x8__neonfp16arith_ld64);
+-      f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_1x8__neonfp16arith_ld64);
+-      f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_1x8__neonfp16arith_ld64);
+-      f16_gemm_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
+-      f16_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x16_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
+-      f16_gemm_config.mr = 6;
+-      f16_gemm_config.nr = 8;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-        #if XNN_ENABLE_ASSEMBLY
+-          switch (cpuinfo_get_core(0)->uarch) {
+-            case cpuinfo_uarch_cortex_a55:
+-              f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_6x16__asm_aarch64_neonfp16arith_cortex_a55);
+-              f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_6x16__asm_aarch64_neonfp16arith_cortex_a55);
+-              f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_1x16__asm_aarch64_neonfp16arith_ld64);
+-              f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_1x16__asm_aarch64_neonfp16arith_ld64);
+-              f16_gemm_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
+-              f16_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x16_packw_gemm_goi_ukernel_x16__neon_ld4lane_prfm_x4;
+-              f16_gemm_config.mr = 6;
+-              f16_gemm_config.nr = 16;
+-              #if XNN_ENABLE_JIT
+-                f16_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_codegen(xnn_generate_f16_gemm_ukernel_1x16__aarch64_neonfp16arith_ld64);
+-                f16_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_codegen(xnn_generate_f16_igemm_ukernel_1x16__aarch64_neonfp16arith_ld64);
+-                f16_gemm_config.generator.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_codegen(xnn_generate_f16_gemm_ukernel_6x16__aarch64_neonfp16arith_cortex_a55);
+-                f16_gemm_config.generator.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_codegen(xnn_generate_f16_igemm_ukernel_6x16__aarch64_neonfp16arith_cortex_a55);
+-              #endif
+-              break;
+-            case cpuinfo_uarch_cortex_a55r0:
+-            case cpuinfo_uarch_cortex_a75:
+-              f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_6x16__asm_aarch64_neonfp16arith_cortex_a55r0);
+-              f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_6x16__asm_aarch64_neonfp16arith_cortex_a55r0);
+-              f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_1x16__asm_aarch64_neonfp16arith_ld64);
+-              f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_1x16__asm_aarch64_neonfp16arith_ld64);
+-              f16_gemm_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
+-              f16_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x16_packw_gemm_goi_ukernel_x16__neon_ld4lane_prfm_x4;
+-              f16_gemm_config.mr = 6;
+-              f16_gemm_config.nr = 16;
+-              #if XNN_ENABLE_JIT
+-                f16_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_codegen(xnn_generate_f16_gemm_ukernel_1x16__aarch64_neonfp16arith_ld64);
+-                f16_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_codegen(xnn_generate_f16_igemm_ukernel_1x16__aarch64_neonfp16arith_ld64);
+-                f16_gemm_config.generator.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_codegen(xnn_generate_f16_gemm_ukernel_6x16__aarch64_neonfp16arith_cortex_a55r0);
+-                f16_gemm_config.generator.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_codegen(xnn_generate_f16_igemm_ukernel_6x16__aarch64_neonfp16arith_cortex_a55r0);
+-              #endif
+-              break;
+-            case cpuinfo_uarch_exynos_m5:
+-              f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_4x16__asm_aarch64_neonfp16arith_ld64);
+-              f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_4x16__asm_aarch64_neonfp16arith_ld64);
+-              f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_1x16__asm_aarch64_neonfp16arith_ld64);
+-              f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_1x16__asm_aarch64_neonfp16arith_ld64);
+-              f16_gemm_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
+-              f16_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x16_packw_gemm_goi_ukernel_x16__neon_ld4lane_prfm_x4;
+-              f16_gemm_config.mr = 4;
+-              f16_gemm_config.nr = 16;
+-              #if XNN_ENABLE_JIT
+-                f16_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_codegen(xnn_generate_f16_gemm_ukernel_1x16__aarch64_neonfp16arith_ld64);
+-                f16_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_codegen(xnn_generate_f16_igemm_ukernel_1x16__aarch64_neonfp16arith_ld64);
+-                f16_gemm_config.generator.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_codegen(xnn_generate_f16_gemm_ukernel_4x16__aarch64_neonfp16arith_ld64);
+-                f16_gemm_config.generator.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_codegen(xnn_generate_f16_igemm_ukernel_4x16__aarch64_neonfp16arith_ld64);
+-              #endif
+-              break;
+-            case cpuinfo_uarch_exynos_m4:
+-              f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_6x16__asm_aarch64_neonfp16arith_ld64);
+-              f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_6x16__asm_aarch64_neonfp16arith_ld64);
+-              f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_1x16__asm_aarch64_neonfp16arith_ld64);
+-              f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_1x16__asm_aarch64_neonfp16arith_ld64);
+-              f16_gemm_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
+-              f16_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x16_packw_gemm_goi_ukernel_x16__neon_ld4lane_prfm_x4;
+-              f16_gemm_config.mr = 6;
+-              f16_gemm_config.nr = 16;
+-              #if XNN_ENABLE_JIT
+-                f16_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_codegen(xnn_generate_f16_gemm_ukernel_1x16__aarch64_neonfp16arith_ld64);
+-                f16_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_codegen(xnn_generate_f16_igemm_ukernel_1x16__aarch64_neonfp16arith_ld64);
+-                f16_gemm_config.generator.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_codegen(xnn_generate_f16_gemm_ukernel_6x16__aarch64_neonfp16arith_ld64);
+-                f16_gemm_config.generator.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_codegen(xnn_generate_f16_igemm_ukernel_6x16__aarch64_neonfp16arith_ld64);
+-              #endif
+-              break;
+-            default:
+-            case cpuinfo_uarch_cortex_a76:
+-            case cpuinfo_uarch_cortex_a77:
+-            case cpuinfo_uarch_cortex_a78:
+-            case cpuinfo_uarch_cortex_x1:
+-              f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_6x16__asm_aarch64_neonfp16arith_cortex_a75);
+-              f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_6x16__asm_aarch64_neonfp16arith_cortex_a75);
+-              f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_1x16__asm_aarch64_neonfp16arith_ld64);
+-              f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_1x16__asm_aarch64_neonfp16arith_ld64);
+-              f16_gemm_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
+-              f16_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x16_packw_gemm_goi_ukernel_x16__neon_ld4lane_prfm_x4;
+-              f16_gemm_config.mr = 6;
+-              f16_gemm_config.nr = 16;
+-              #if XNN_ENABLE_JIT
+-                f16_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_codegen(xnn_generate_f16_gemm_ukernel_1x16__aarch64_neonfp16arith_ld64);
+-                f16_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_codegen(xnn_generate_f16_igemm_ukernel_1x16__aarch64_neonfp16arith_ld64);
+-                f16_gemm_config.generator.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_codegen(xnn_generate_f16_gemm_ukernel_6x16__aarch64_neonfp16arith_cortex_a75);
+-                f16_gemm_config.generator.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_codegen(xnn_generate_f16_igemm_ukernel_6x16__aarch64_neonfp16arith_cortex_a75);
+-              #endif
+-              break;
+-          }
++// static void init_f16_gemm_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_6x8__neonfp16arith_ld64);
++//       f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_6x8__neonfp16arith_ld64);
++//       f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_1x8__neonfp16arith_ld64);
++//       f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_1x8__neonfp16arith_ld64);
++//       f16_gemm_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
++//       f16_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x16_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
++//       f16_gemm_config.mr = 6;
++//       f16_gemm_config.nr = 8;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//         #if XNN_ENABLE_ASSEMBLY
++//           switch (cpuinfo_get_core(0)->uarch) {
++//             case cpuinfo_uarch_cortex_a55:
++//               f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_6x16__asm_aarch64_neonfp16arith_cortex_a55);
++//               f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_6x16__asm_aarch64_neonfp16arith_cortex_a55);
++//               f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_1x16__asm_aarch64_neonfp16arith_ld64);
++//               f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_1x16__asm_aarch64_neonfp16arith_ld64);
++//               f16_gemm_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
++//               f16_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x16_packw_gemm_goi_ukernel_x16__neon_ld4lane_prfm_x4;
++//               f16_gemm_config.mr = 6;
++//               f16_gemm_config.nr = 16;
++//               #if XNN_ENABLE_JIT
++//                 f16_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_codegen(xnn_generate_f16_gemm_ukernel_1x16__aarch64_neonfp16arith_ld64);
++//                 f16_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_codegen(xnn_generate_f16_igemm_ukernel_1x16__aarch64_neonfp16arith_ld64);
++//                 f16_gemm_config.generator.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_codegen(xnn_generate_f16_gemm_ukernel_6x16__aarch64_neonfp16arith_cortex_a55);
++//                 f16_gemm_config.generator.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_codegen(xnn_generate_f16_igemm_ukernel_6x16__aarch64_neonfp16arith_cortex_a55);
++//               #endif
++//               break;
++//             case cpuinfo_uarch_cortex_a55r0:
++//             case cpuinfo_uarch_cortex_a75:
++//               f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_6x16__asm_aarch64_neonfp16arith_cortex_a55r0);
++//               f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_6x16__asm_aarch64_neonfp16arith_cortex_a55r0);
++//               f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_1x16__asm_aarch64_neonfp16arith_ld64);
++//               f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_1x16__asm_aarch64_neonfp16arith_ld64);
++//               f16_gemm_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
++//               f16_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x16_packw_gemm_goi_ukernel_x16__neon_ld4lane_prfm_x4;
++//               f16_gemm_config.mr = 6;
++//               f16_gemm_config.nr = 16;
++//               #if XNN_ENABLE_JIT
++//                 f16_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_codegen(xnn_generate_f16_gemm_ukernel_1x16__aarch64_neonfp16arith_ld64);
++//                 f16_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_codegen(xnn_generate_f16_igemm_ukernel_1x16__aarch64_neonfp16arith_ld64);
++//                 f16_gemm_config.generator.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_codegen(xnn_generate_f16_gemm_ukernel_6x16__aarch64_neonfp16arith_cortex_a55r0);
++//                 f16_gemm_config.generator.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_codegen(xnn_generate_f16_igemm_ukernel_6x16__aarch64_neonfp16arith_cortex_a55r0);
++//               #endif
++//               break;
++//             case cpuinfo_uarch_exynos_m5:
++//               f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_4x16__asm_aarch64_neonfp16arith_ld64);
++//               f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_4x16__asm_aarch64_neonfp16arith_ld64);
++//               f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_1x16__asm_aarch64_neonfp16arith_ld64);
++//               f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_1x16__asm_aarch64_neonfp16arith_ld64);
++//               f16_gemm_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
++//               f16_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x16_packw_gemm_goi_ukernel_x16__neon_ld4lane_prfm_x4;
++//               f16_gemm_config.mr = 4;
++//               f16_gemm_config.nr = 16;
++//               #if XNN_ENABLE_JIT
++//                 f16_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_codegen(xnn_generate_f16_gemm_ukernel_1x16__aarch64_neonfp16arith_ld64);
++//                 f16_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_codegen(xnn_generate_f16_igemm_ukernel_1x16__aarch64_neonfp16arith_ld64);
++//                 f16_gemm_config.generator.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_codegen(xnn_generate_f16_gemm_ukernel_4x16__aarch64_neonfp16arith_ld64);
++//                 f16_gemm_config.generator.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_codegen(xnn_generate_f16_igemm_ukernel_4x16__aarch64_neonfp16arith_ld64);
++//               #endif
++//               break;
++//             case cpuinfo_uarch_exynos_m4:
++//               f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_6x16__asm_aarch64_neonfp16arith_ld64);
++//               f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_6x16__asm_aarch64_neonfp16arith_ld64);
++//               f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_1x16__asm_aarch64_neonfp16arith_ld64);
++//               f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_1x16__asm_aarch64_neonfp16arith_ld64);
++//               f16_gemm_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
++//               f16_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x16_packw_gemm_goi_ukernel_x16__neon_ld4lane_prfm_x4;
++//               f16_gemm_config.mr = 6;
++//               f16_gemm_config.nr = 16;
++//               #if XNN_ENABLE_JIT
++//                 f16_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_codegen(xnn_generate_f16_gemm_ukernel_1x16__aarch64_neonfp16arith_ld64);
++//                 f16_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_codegen(xnn_generate_f16_igemm_ukernel_1x16__aarch64_neonfp16arith_ld64);
++//                 f16_gemm_config.generator.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_codegen(xnn_generate_f16_gemm_ukernel_6x16__aarch64_neonfp16arith_ld64);
++//                 f16_gemm_config.generator.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_codegen(xnn_generate_f16_igemm_ukernel_6x16__aarch64_neonfp16arith_ld64);
++//               #endif
++//               break;
++//             default:
++//             case cpuinfo_uarch_cortex_a76:
++//             case cpuinfo_uarch_cortex_a77:
++//             case cpuinfo_uarch_cortex_a78:
++//             case cpuinfo_uarch_cortex_x1:
++//               f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_6x16__asm_aarch64_neonfp16arith_cortex_a75);
++//               f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_6x16__asm_aarch64_neonfp16arith_cortex_a75);
++//               f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_1x16__asm_aarch64_neonfp16arith_ld64);
++//               f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_1x16__asm_aarch64_neonfp16arith_ld64);
++//               f16_gemm_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
++//               f16_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x16_packw_gemm_goi_ukernel_x16__neon_ld4lane_prfm_x4;
++//               f16_gemm_config.mr = 6;
++//               f16_gemm_config.nr = 16;
++//               #if XNN_ENABLE_JIT
++//                 f16_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_codegen(xnn_generate_f16_gemm_ukernel_1x16__aarch64_neonfp16arith_ld64);
++//                 f16_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_codegen(xnn_generate_f16_igemm_ukernel_1x16__aarch64_neonfp16arith_ld64);
++//                 f16_gemm_config.generator.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_codegen(xnn_generate_f16_gemm_ukernel_6x16__aarch64_neonfp16arith_cortex_a75);
++//                 f16_gemm_config.generator.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_codegen(xnn_generate_f16_igemm_ukernel_6x16__aarch64_neonfp16arith_cortex_a75);
++//               #endif
++//               break;
++//           }
+ 
+-          #if XNN_MAX_UARCH_TYPES > 1
+-          {
+-            /* Choose micro-kernels for little cores according to micro-kernel specification for the big core */
+-            const uint32_t mr = f16_gemm_config.mr;
+-            const uint32_t nr = f16_gemm_config.nr;
+-            for (size_t i = 1; i < XNN_MAX_UARCH_TYPES; i++) {
+-              const struct cpuinfo_uarch_info* uarch_info = cpuinfo_get_uarch(i);
+-              if (uarch_info == NULL) {
+-                /* No more microarchitectures in the system */
+-                break;
+-              }
++//           #if XNN_MAX_UARCH_TYPES > 1
++//           {
++//             /* Choose micro-kernels for little cores according to micro-kernel specification for the big core */
++//             const uint32_t mr = f16_gemm_config.mr;
++//             const uint32_t nr = f16_gemm_config.nr;
++//             for (size_t i = 1; i < XNN_MAX_UARCH_TYPES; i++) {
++//               const struct cpuinfo_uarch_info* uarch_info = cpuinfo_get_uarch(i);
++//               if (uarch_info == NULL) {
++//                 /* No more microarchitectures in the system */
++//                 break;
++//               }
+ 
+-              switch (uarch_info->uarch) {
+-                case cpuinfo_uarch_cortex_a55:
+-                  if (mr == 6 && nr == 16) {
+-                    f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_6x16__asm_aarch64_neonfp16arith_cortex_a55;
+-                    f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_6x16__asm_aarch64_neonfp16arith_cortex_a55;
+-                    #if XNN_ENABLE_JIT
+-                      f16_gemm_config.generator.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_codegen(xnn_generate_f16_gemm_ukernel_6x16__aarch64_neonfp16arith_cortex_a55);
+-                      f16_gemm_config.generator.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_codegen(xnn_generate_f16_igemm_ukernel_6x16__aarch64_neonfp16arith_cortex_a55);
+-                    #endif
+-                  }
+-                  break;
+-                case cpuinfo_uarch_cortex_a55r0:
+-                case cpuinfo_uarch_cortex_a75:
+-                  if (mr == 6 && nr == 16) {
+-                    f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_6x16__asm_aarch64_neonfp16arith_cortex_a55r0;
+-                    f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_6x16__asm_aarch64_neonfp16arith_cortex_a55r0;
+-                    #if XNN_ENABLE_JIT
+-                      f16_gemm_config.generator.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_codegen(xnn_generate_f16_gemm_ukernel_6x16__aarch64_neonfp16arith_cortex_a55r0);
+-                      f16_gemm_config.generator.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_codegen(xnn_generate_f16_igemm_ukernel_6x16__aarch64_neonfp16arith_cortex_a55r0);
+-                    #endif
+-                  }
+-                  break;
+-                default:
+-                  break;
+-              }
+-            }
+-          }
+-          #endif  // XNN_MAX_UARCH_TYPES > 1
+-        #else  // XNN_ENABLE_ASSEMBLY
+-          f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_6x16__neonfp16arith_ld64);
+-          f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_6x16__neonfp16arith_ld64);
+-          f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_1x16__neonfp16arith_ld64);
+-          f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_1x16__neonfp16arith_ld64);
+-          f16_gemm_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
+-          f16_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x16_packw_gemm_goi_ukernel_x16__neon_ld4lane_prfm_x4;
+-          f16_gemm_config.mr = 6;
+-          f16_gemm_config.nr = 16;
+-        #endif  // XNN_ENABLE_ASSEMBLY
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx2) {
+-      f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_4x16__avx2_broadcast);
+-      f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_4x16__avx2_broadcast);
+-      f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_1x16__avx2_broadcast);
+-      f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_1x16__avx2_broadcast);
+-      f16_gemm_config.init.f16 = xnn_init_f16_minmax_avx_params;
+-      f16_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_f16_gemm_goi_w;
+-      f16_gemm_config.mr = 4;
+-      f16_gemm_config.nr = 16;
+-    }
+-  #endif
+-}
++//               switch (uarch_info->uarch) {
++//                 case cpuinfo_uarch_cortex_a55:
++//                   if (mr == 6 && nr == 16) {
++//                     f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_6x16__asm_aarch64_neonfp16arith_cortex_a55;
++//                     f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_6x16__asm_aarch64_neonfp16arith_cortex_a55;
++//                     #if XNN_ENABLE_JIT
++//                       f16_gemm_config.generator.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_codegen(xnn_generate_f16_gemm_ukernel_6x16__aarch64_neonfp16arith_cortex_a55);
++//                       f16_gemm_config.generator.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_codegen(xnn_generate_f16_igemm_ukernel_6x16__aarch64_neonfp16arith_cortex_a55);
++//                     #endif
++//                   }
++//                   break;
++//                 case cpuinfo_uarch_cortex_a55r0:
++//                 case cpuinfo_uarch_cortex_a75:
++//                   if (mr == 6 && nr == 16) {
++//                     f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_6x16__asm_aarch64_neonfp16arith_cortex_a55r0;
++//                     f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_6x16__asm_aarch64_neonfp16arith_cortex_a55r0;
++//                     #if XNN_ENABLE_JIT
++//                       f16_gemm_config.generator.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_codegen(xnn_generate_f16_gemm_ukernel_6x16__aarch64_neonfp16arith_cortex_a55r0);
++//                       f16_gemm_config.generator.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_codegen(xnn_generate_f16_igemm_ukernel_6x16__aarch64_neonfp16arith_cortex_a55r0);
++//                     #endif
++//                   }
++//                   break;
++//                 default:
++//                   break;
++//               }
++//             }
++//           }
++//           #endif  // XNN_MAX_UARCH_TYPES > 1
++//         #else  // XNN_ENABLE_ASSEMBLY
++//           f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_6x16__neonfp16arith_ld64);
++//           f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_6x16__neonfp16arith_ld64);
++//           f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_1x16__neonfp16arith_ld64);
++//           f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_1x16__neonfp16arith_ld64);
++//           f16_gemm_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
++//           f16_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x16_packw_gemm_goi_ukernel_x16__neon_ld4lane_prfm_x4;
++//           f16_gemm_config.mr = 6;
++//           f16_gemm_config.nr = 16;
++//         #endif  // XNN_ENABLE_ASSEMBLY
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx2) {
++//       f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_4x16__avx2_broadcast);
++//       f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_4x16__avx2_broadcast);
++//       f16_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f16_gemm_minmax_ukernel_1x16__avx2_broadcast);
++//       f16_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f16_igemm_minmax_ukernel_1x16__avx2_broadcast);
++//       f16_gemm_config.init.f16 = xnn_init_f16_minmax_avx_params;
++//       f16_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_f16_gemm_goi_w;
++//       f16_gemm_config.mr = 4;
++//       f16_gemm_config.nr = 16;
++//     }
++//   #endif
++// }
+ 
+-static void init_f32_gemm_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      #if XNN_ENABLE_ASSEMBLY
+-        switch (cpuinfo_get_uarch(0)->uarch) {
+-          case cpuinfo_uarch_cortex_a5:
+-          case cpuinfo_uarch_cortex_a7:
+-          case cpuinfo_uarch_krait:
+-          case cpuinfo_uarch_kryo:
+-            f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch32_neon_cortex_a7);
+-            f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch32_neon_cortex_a7);
+-            f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch32_neon_prfm_cortex_a53);
+-            f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch32_neon_prfm_cortex_a53);
+-            f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-            f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
+-            f32_gemm_config.mr = 4;
+-            f32_gemm_config.nr = 8;
+-            break;
+-          case cpuinfo_uarch_cortex_a53:
+-            f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch32_neon_prfm_cortex_a53);
+-            f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch32_neon_prfm_cortex_a53);
+-            f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch32_neon_prfm_cortex_a53);
+-            f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch32_neon_prfm_cortex_a53);
+-            f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-            f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
+-            f32_gemm_config.mr = 4;
+-            f32_gemm_config.nr = 8;
+-            break;
+-          case cpuinfo_uarch_cortex_a55r0:
+-            f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch32_neon_cortex_a53);
+-            f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch32_neon_cortex_a53);
+-            f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch32_neon_cortex_a53);
+-            f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch32_neon_cortex_a53);
+-            f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-            f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
+-            f32_gemm_config.mr = 4;
+-            f32_gemm_config.nr = 8;
+-            break;
+-          case cpuinfo_uarch_cortex_a32:
+-          case cpuinfo_uarch_cortex_a35:
+-          case cpuinfo_uarch_cortex_a55:
+-            f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch32_neon_cortex_a55);
+-            f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch32_neon_cortex_a55);
+-            f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch32_neon_cortex_a53);
+-            f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch32_neon_cortex_a53);
+-            f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-            f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
+-            f32_gemm_config.mr = 4;
+-            f32_gemm_config.nr = 8;
+-            break;
++// static void init_f32_gemm_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       #if XNN_ENABLE_ASSEMBLY
++//         switch (cpuinfo_get_uarch(0)->uarch) {
++//           case cpuinfo_uarch_cortex_a5:
++//           case cpuinfo_uarch_cortex_a7:
++//           case cpuinfo_uarch_krait:
++//           case cpuinfo_uarch_kryo:
++//             f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch32_neon_cortex_a7);
++//             f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch32_neon_cortex_a7);
++//             f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch32_neon_prfm_cortex_a53);
++//             f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch32_neon_prfm_cortex_a53);
++//             f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//             f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
++//             f32_gemm_config.mr = 4;
++//             f32_gemm_config.nr = 8;
++//             break;
++//           case cpuinfo_uarch_cortex_a53:
++//             f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch32_neon_prfm_cortex_a53);
++//             f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch32_neon_prfm_cortex_a53);
++//             f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch32_neon_prfm_cortex_a53);
++//             f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch32_neon_prfm_cortex_a53);
++//             f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//             f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
++//             f32_gemm_config.mr = 4;
++//             f32_gemm_config.nr = 8;
++//             break;
++//           case cpuinfo_uarch_cortex_a55r0:
++//             f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch32_neon_cortex_a53);
++//             f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch32_neon_cortex_a53);
++//             f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch32_neon_cortex_a53);
++//             f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch32_neon_cortex_a53);
++//             f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//             f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
++//             f32_gemm_config.mr = 4;
++//             f32_gemm_config.nr = 8;
++//             break;
++//           case cpuinfo_uarch_cortex_a32:
++//           case cpuinfo_uarch_cortex_a35:
++//           case cpuinfo_uarch_cortex_a55:
++//             f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch32_neon_cortex_a55);
++//             f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch32_neon_cortex_a55);
++//             f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch32_neon_cortex_a53);
++//             f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch32_neon_cortex_a53);
++//             f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//             f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
++//             f32_gemm_config.mr = 4;
++//             f32_gemm_config.nr = 8;
++//             break;
+ 
+-          case cpuinfo_uarch_cortex_a57:
+-          case cpuinfo_uarch_cortex_a72:
+-          case cpuinfo_uarch_cortex_a73:
+-            f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch32_neon_prfm_cortex_a75);
+-            f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch32_neon_prfm_cortex_a75);
+-            f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch32_neon_prfm_cortex_a53);
+-            f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch32_neon_prfm_cortex_a53);
+-            f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-            f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
+-            f32_gemm_config.mr = 4;
+-            f32_gemm_config.nr = 8;
+-            break;
++//           case cpuinfo_uarch_cortex_a57:
++//           case cpuinfo_uarch_cortex_a72:
++//           case cpuinfo_uarch_cortex_a73:
++//             f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch32_neon_prfm_cortex_a75);
++//             f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch32_neon_prfm_cortex_a75);
++//             f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch32_neon_prfm_cortex_a53);
++//             f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch32_neon_prfm_cortex_a53);
++//             f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//             f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
++//             f32_gemm_config.mr = 4;
++//             f32_gemm_config.nr = 8;
++//             break;
+ 
+-          default:
+-            f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch32_neon_cortex_a75);
+-            f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch32_neon_cortex_a75);
+-            f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch32_neon_cortex_a53);
+-            f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch32_neon_cortex_a53);
+-            f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-            f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
+-            f32_gemm_config.mr = 4;
+-            f32_gemm_config.nr = 8;
+-            #if XNN_ENABLE_JIT
+-              f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_codegen(xnn_generate_f32_gemm_ukernel_4x8__aarch32_neon_cortex_a75);
+-              f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_codegen(xnn_generate_f32_igemm_ukernel_4x8__aarch32_neon_cortex_a75);
+-            #endif
+-            break;
+-        }
+-        #if XNN_MAX_UARCH_TYPES > 1
+-        {
+-          /* Choose micro-kernels for little cores according to micro-kernel specification for the big core */
+-          const uint32_t mr = f32_gemm_config.mr;
+-          const uint32_t nr = f32_gemm_config.nr;
+-          for (size_t i = 1; i < XNN_MAX_UARCH_TYPES; i++) {
+-            const struct cpuinfo_uarch_info* uarch_info = cpuinfo_get_uarch(i);
+-            if (uarch_info == NULL) {
+-              /* No more microarchitectures in the system */
+-              break;
+-            }
++//           default:
++//             f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch32_neon_cortex_a75);
++//             f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch32_neon_cortex_a75);
++//             f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch32_neon_cortex_a53);
++//             f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch32_neon_cortex_a53);
++//             f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//             f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
++//             f32_gemm_config.mr = 4;
++//             f32_gemm_config.nr = 8;
++//             #if XNN_ENABLE_JIT
++//               f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_codegen(xnn_generate_f32_gemm_ukernel_4x8__aarch32_neon_cortex_a75);
++//               f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_codegen(xnn_generate_f32_igemm_ukernel_4x8__aarch32_neon_cortex_a75);
++//             #endif
++//             break;
++//         }
++//         #if XNN_MAX_UARCH_TYPES > 1
++//         {
++//           /* Choose micro-kernels for little cores according to micro-kernel specification for the big core */
++//           const uint32_t mr = f32_gemm_config.mr;
++//           const uint32_t nr = f32_gemm_config.nr;
++//           for (size_t i = 1; i < XNN_MAX_UARCH_TYPES; i++) {
++//             const struct cpuinfo_uarch_info* uarch_info = cpuinfo_get_uarch(i);
++//             if (uarch_info == NULL) {
++//               /* No more microarchitectures in the system */
++//               break;
++//             }
+ 
+-            switch (uarch_info->uarch) {
+-              case cpuinfo_uarch_cortex_a53:
+-                if (mr == 4 && nr == 8) {
+-                  f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch32_neon_prfm_cortex_a53;
+-                  f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch32_neon_prfm_cortex_a53;
+-                  f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch32_neon_prfm_cortex_a53;
+-                  f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch32_neon_prfm_cortex_a53;
+-                  #if XNN_ENABLE_JIT
+-                    f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_1x8__aarch32_neon_prfm_cortex_a53;
+-                    f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_1x8__aarch32_neon_prfm_cortex_a53;
+-                    f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_4x8__aarch32_neon_prfm_cortex_a53;
+-                    f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_4x8__aarch32_neon_prfm_cortex_a53;
+-                  #endif
+-                }
+-                break;
+-              case cpuinfo_uarch_cortex_a55r0:
+-                if (mr == 4 && nr == 8) {
+-                  f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch32_neon_cortex_a53;
+-                  f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch32_neon_cortex_a53;
+-                  f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch32_neon_cortex_a53;
+-                  f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch32_neon_cortex_a53;
+-                  #if XNN_ENABLE_JIT
+-                    f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_1x8__aarch32_neon_cortex_a53;
+-                    f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_1x8__aarch32_neon_cortex_a53;
+-                    f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_4x8__aarch32_neon_cortex_a53;
+-                    f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_4x8__aarch32_neon_cortex_a53;
+-                  #endif
+-                }
+-                break;
+-              case cpuinfo_uarch_cortex_a55:
+-                if (mr == 4 && nr == 8) {
+-                  f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch32_neon_cortex_a55;
+-                  f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch32_neon_cortex_a55;
+-                  f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch32_neon_cortex_a53;
+-                  f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch32_neon_cortex_a53;
+-                  #if XNN_ENABLE_JIT
+-                    f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_1x8__aarch32_neon_cortex_a53;
+-                    f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_1x8__aarch32_neon_cortex_a53;
+-                    f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_4x8__aarch32_neon_cortex_a55;
+-                    f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_4x8__aarch32_neon_cortex_a55;
+-                  #endif
+-                }
+-                break;
+-              default:
+-                break;
+-            }
+-          }
+-        }
+-        #endif  // XNN_MAX_UARCH_TYPES > 1
+-      #else  // XNN_ENABLE_ASSEMBLY
+-        f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__neon_lane_ld128);
+-        f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__neon_lane_ld128);
+-        f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__neon_lane_ld64);
+-        f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__neon_lane_ld64);
+-        f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-        f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
+-        f32_gemm_config.mr = 4;
+-        f32_gemm_config.nr = 8;
+-      #endif  // XNN_ENABLE_ASSEMBLY
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x4__scalar);
+-      f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x4__scalar);
+-      f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x4__scalar);
+-      f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x4__scalar);
+-      f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_4x4__scalar);
+-      f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_4x4__scalar);
+-      f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_1x4__scalar);
+-      f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_1x4__scalar);
+-      f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_4x4__scalar);
+-      f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_4x4__scalar);
+-      f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_1x4__scalar);
+-      f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_1x4__scalar);
+-      f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x4__scalar_float_x4;
+-      f32_gemm_config.mr = 4;
+-      f32_gemm_config.nr = 4;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    #if XNN_ENABLE_ASSEMBLY && !XNN_PLATFORM_IOS && !XNN_PLATFORM_MAC
+-      switch (cpuinfo_get_core(0)->uarch) {
+-        case cpuinfo_uarch_cortex_a72:
+-          f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch64_neonfma_prfm_cortex_a75);
+-          f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch64_neonfma_prfm_cortex_a75);
+-          f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a75);
+-          f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a75);
+-          f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-          f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
+-          f32_gemm_config.mr = 4;
+-          f32_gemm_config.nr = 8;
+-          break;
+-        case cpuinfo_uarch_cortex_a57:
+-        case cpuinfo_uarch_cortex_a75:
+-        case cpuinfo_uarch_cortex_a76:
+-        case cpuinfo_uarch_exynos_m3:
+-        case cpuinfo_uarch_exynos_m4:
+-          f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_6x8__asm_aarch64_neonfma_prfm_cortex_a75);
+-          f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_6x8__asm_aarch64_neonfma_prfm_cortex_a75);
+-          #if XNN_ENABLE_GEMM_M_SPECIALIZATION
+-            f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch64_neonfma_prfm_cortex_a75);
+-            f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch64_neonfma_prfm_cortex_a75);
+-          #endif
+-          f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a75);
+-          f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a75);
+-          f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-          f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
+-          f32_gemm_config.mr = 6;
+-          f32_gemm_config.nr = 8;
+-          #if XNN_ENABLE_JIT
+-            f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_codegen(xnn_generate_f32_gemm_ukernel_1x8__aarch64_neonfma_prfm_cortex_a75);
+-            f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_codegen(xnn_generate_f32_igemm_ukernel_1x8__aarch64_neonfma_prfm_cortex_a75);
+-            #if XNN_ENABLE_GEMM_M_SPECIALIZATION
+-              f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_codegen(xnn_generate_f32_gemm_ukernel_4x8__aarch64_neonfma_prfm_cortex_a75);
+-              f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_codegen(xnn_generate_f32_igemm_ukernel_4x8__aarch64_neonfma_prfm_cortex_a75);
+-            #endif
+-            f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_codegen(xnn_generate_f32_gemm_ukernel_6x8__aarch64_neonfma_prfm_cortex_a75);
+-            f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_codegen(xnn_generate_f32_igemm_ukernel_6x8__aarch64_neonfma_prfm_cortex_a75);
+-          #endif
+-          break;
+-        case cpuinfo_uarch_exynos_m1:
+-        case cpuinfo_uarch_exynos_m2:
+-          f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_6x8s4__neonfma);
+-          f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_6x8s4__neonfma);
+-          #if XNN_ENABLE_GEMM_M_SPECIALIZATION
+-            f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8s4__neonfma);
+-            f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8s4__neonfma);
+-          #endif
+-          f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8s4__neonfma);
+-          f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8s4__neonfma);
+-          f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-          f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
+-          f32_gemm_config.mr = 6;
+-          f32_gemm_config.nr = 8;
+-          f32_gemm_config.log2_sr = 2;
+-          break;
+-        case cpuinfo_uarch_cortex_a53:
+-          f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_6x8__asm_aarch64_neonfma_prfm_cortex_a53);
+-          f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_6x8__asm_aarch64_neonfma_prfm_cortex_a53);
+-          #if XNN_ENABLE_GEMM_M_SPECIALIZATION
+-            f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch64_neonfma_prfm_cortex_a53);
+-            f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch64_neonfma_prfm_cortex_a53);
+-          #endif
+-          f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a53);
+-          f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a53);
+-          f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-          f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
+-          f32_gemm_config.mr = 6;
+-          f32_gemm_config.nr = 8;
+-          break;
+-        case cpuinfo_uarch_cortex_a55r0:
+-          f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_6x8__asm_aarch64_neonfma_cortex_a53);
+-          f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_6x8__asm_aarch64_neonfma_cortex_a53);
+-          #if XNN_ENABLE_GEMM_M_SPECIALIZATION
+-            f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a53);
+-            f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a53);
+-          #endif
+-          f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a53);
+-          f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a53);
+-          f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-          f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
+-          f32_gemm_config.mr = 6;
+-          f32_gemm_config.nr = 8;
+-          break;
+-        case cpuinfo_uarch_cortex_a35:
+-        case cpuinfo_uarch_cortex_a55:
+-        case cpuinfo_uarch_kryo:
+-          f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_6x8__asm_aarch64_neonfma_cortex_a55);
+-          f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_6x8__asm_aarch64_neonfma_cortex_a55);
+-          #if XNN_ENABLE_GEMM_M_SPECIALIZATION
+-            f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a55);
+-            f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a55);
+-          #endif
+-          f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a53);
+-          f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a53);
+-          f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-          f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
+-          f32_gemm_config.mr = 6;
+-          f32_gemm_config.nr = 8;
+-          break;
+-        case cpuinfo_uarch_cortex_a73:
+-          f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_6x8__asm_aarch64_neonfma_cortex_a73);
+-          f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_6x8__asm_aarch64_neonfma_cortex_a73);
+-          f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a75);
+-          f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a75);
+-          f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-          f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
+-          f32_gemm_config.mr = 6;
+-          f32_gemm_config.nr = 8;
+-          break;
+-        case cpuinfo_uarch_cortex_a77:
+-        case cpuinfo_uarch_exynos_m5:
+-          f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a75);
+-          f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a75);
+-          f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a75);
+-          f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a75);
+-          f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-          f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
+-          f32_gemm_config.mr = 4;
+-          f32_gemm_config.nr = 8;
+-          break;
+-        case cpuinfo_uarch_cortex_a78:
+-        case cpuinfo_uarch_cortex_x1:
+-        default:
+-          f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_6x8__asm_aarch64_neonfma_ld128);
+-          f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_6x8__asm_aarch64_neonfma_ld128);
+-          #if XNN_ENABLE_GEMM_M_SPECIALIZATION
+-            f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch64_neonfma_ld128);
+-            f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch64_neonfma_ld128);
+-          #endif
+-          f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_ld64);
+-          f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_ld64);
+-          f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-          f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
+-          f32_gemm_config.mr = 6;
+-          f32_gemm_config.nr = 8;
+-          #if XNN_ENABLE_JIT
+-            f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_codegen(xnn_generate_f32_gemm_ukernel_1x8__aarch64_neonfma_ld64);
+-            #if XNN_ENABLE_GEMM_M_SPECIALIZATION
+-              f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_codegen(xnn_generate_f32_gemm_ukernel_4x8__aarch64_neonfma_ld128);
+-              f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_codegen(xnn_generate_f32_igemm_ukernel_4x8__aarch64_neonfma_ld128);
+-            #endif
+-            f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_codegen(xnn_generate_f32_gemm_ukernel_6x8__aarch64_neonfma_ld128);
+-            f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_codegen(xnn_generate_f32_igemm_ukernel_6x8__aarch64_neonfma_ld128);
+-          #endif
+-          break;
+-      }
+-      #if XNN_MAX_UARCH_TYPES > 1
+-      {
+-        /* Choose micro-kernels for little cores according to micro-kernel specification for the big core */
+-        const uint32_t mr = f32_gemm_config.mr;
+-        const uint32_t nr = f32_gemm_config.nr;
+-        const uint32_t log2_sr = f32_gemm_config.log2_sr;
+-        for (size_t i = 1; i < XNN_MAX_UARCH_TYPES; i++) {
+-          const struct cpuinfo_uarch_info* uarch_info = cpuinfo_get_uarch(i);
+-          if (uarch_info == NULL) {
+-            /* No more microarchitectures in the system */
+-            break;
+-          }
++//             switch (uarch_info->uarch) {
++//               case cpuinfo_uarch_cortex_a53:
++//                 if (mr == 4 && nr == 8) {
++//                   f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch32_neon_prfm_cortex_a53;
++//                   f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch32_neon_prfm_cortex_a53;
++//                   f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch32_neon_prfm_cortex_a53;
++//                   f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch32_neon_prfm_cortex_a53;
++//                   #if XNN_ENABLE_JIT
++//                     f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_1x8__aarch32_neon_prfm_cortex_a53;
++//                     f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_1x8__aarch32_neon_prfm_cortex_a53;
++//                     f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_4x8__aarch32_neon_prfm_cortex_a53;
++//                     f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_4x8__aarch32_neon_prfm_cortex_a53;
++//                   #endif
++//                 }
++//                 break;
++//               case cpuinfo_uarch_cortex_a55r0:
++//                 if (mr == 4 && nr == 8) {
++//                   f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch32_neon_cortex_a53;
++//                   f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch32_neon_cortex_a53;
++//                   f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch32_neon_cortex_a53;
++//                   f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch32_neon_cortex_a53;
++//                   #if XNN_ENABLE_JIT
++//                     f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_1x8__aarch32_neon_cortex_a53;
++//                     f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_1x8__aarch32_neon_cortex_a53;
++//                     f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_4x8__aarch32_neon_cortex_a53;
++//                     f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_4x8__aarch32_neon_cortex_a53;
++//                   #endif
++//                 }
++//                 break;
++//               case cpuinfo_uarch_cortex_a55:
++//                 if (mr == 4 && nr == 8) {
++//                   f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch32_neon_cortex_a55;
++//                   f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch32_neon_cortex_a55;
++//                   f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch32_neon_cortex_a53;
++//                   f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch32_neon_cortex_a53;
++//                   #if XNN_ENABLE_JIT
++//                     f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_1x8__aarch32_neon_cortex_a53;
++//                     f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_1x8__aarch32_neon_cortex_a53;
++//                     f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_4x8__aarch32_neon_cortex_a55;
++//                     f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_4x8__aarch32_neon_cortex_a55;
++//                   #endif
++//                 }
++//                 break;
++//               default:
++//                 break;
++//             }
++//           }
++//         }
++//         #endif  // XNN_MAX_UARCH_TYPES > 1
++//       #else  // XNN_ENABLE_ASSEMBLY
++//         f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__neon_lane_ld128);
++//         f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__neon_lane_ld128);
++//         f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__neon_lane_ld64);
++//         f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__neon_lane_ld64);
++//         f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//         f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
++//         f32_gemm_config.mr = 4;
++//         f32_gemm_config.nr = 8;
++//       #endif  // XNN_ENABLE_ASSEMBLY
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x4__scalar);
++//       f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x4__scalar);
++//       f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x4__scalar);
++//       f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x4__scalar);
++//       f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_4x4__scalar);
++//       f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_4x4__scalar);
++//       f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_1x4__scalar);
++//       f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_1x4__scalar);
++//       f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_4x4__scalar);
++//       f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_4x4__scalar);
++//       f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_1x4__scalar);
++//       f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_1x4__scalar);
++//       f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x4__scalar_float_x4;
++//       f32_gemm_config.mr = 4;
++//       f32_gemm_config.nr = 4;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     #if XNN_ENABLE_ASSEMBLY && !XNN_PLATFORM_IOS && !XNN_PLATFORM_MAC
++//       switch (cpuinfo_get_core(0)->uarch) {
++//         case cpuinfo_uarch_cortex_a72:
++//           f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch64_neonfma_prfm_cortex_a75);
++//           f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch64_neonfma_prfm_cortex_a75);
++//           f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a75);
++//           f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a75);
++//           f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//           f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
++//           f32_gemm_config.mr = 4;
++//           f32_gemm_config.nr = 8;
++//           break;
++//         case cpuinfo_uarch_cortex_a57:
++//         case cpuinfo_uarch_cortex_a75:
++//         case cpuinfo_uarch_cortex_a76:
++//         case cpuinfo_uarch_exynos_m3:
++//         case cpuinfo_uarch_exynos_m4:
++//           f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_6x8__asm_aarch64_neonfma_prfm_cortex_a75);
++//           f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_6x8__asm_aarch64_neonfma_prfm_cortex_a75);
++//           #if XNN_ENABLE_GEMM_M_SPECIALIZATION
++//             f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch64_neonfma_prfm_cortex_a75);
++//             f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch64_neonfma_prfm_cortex_a75);
++//           #endif
++//           f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a75);
++//           f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a75);
++//           f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//           f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
++//           f32_gemm_config.mr = 6;
++//           f32_gemm_config.nr = 8;
++//           #if XNN_ENABLE_JIT
++//             f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_codegen(xnn_generate_f32_gemm_ukernel_1x8__aarch64_neonfma_prfm_cortex_a75);
++//             f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_codegen(xnn_generate_f32_igemm_ukernel_1x8__aarch64_neonfma_prfm_cortex_a75);
++//             #if XNN_ENABLE_GEMM_M_SPECIALIZATION
++//               f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_codegen(xnn_generate_f32_gemm_ukernel_4x8__aarch64_neonfma_prfm_cortex_a75);
++//               f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_codegen(xnn_generate_f32_igemm_ukernel_4x8__aarch64_neonfma_prfm_cortex_a75);
++//             #endif
++//             f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_codegen(xnn_generate_f32_gemm_ukernel_6x8__aarch64_neonfma_prfm_cortex_a75);
++//             f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_codegen(xnn_generate_f32_igemm_ukernel_6x8__aarch64_neonfma_prfm_cortex_a75);
++//           #endif
++//           break;
++//         case cpuinfo_uarch_exynos_m1:
++//         case cpuinfo_uarch_exynos_m2:
++//           f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_6x8s4__neonfma);
++//           f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_6x8s4__neonfma);
++//           #if XNN_ENABLE_GEMM_M_SPECIALIZATION
++//             f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8s4__neonfma);
++//             f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8s4__neonfma);
++//           #endif
++//           f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8s4__neonfma);
++//           f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8s4__neonfma);
++//           f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//           f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
++//           f32_gemm_config.mr = 6;
++//           f32_gemm_config.nr = 8;
++//           f32_gemm_config.log2_sr = 2;
++//           break;
++//         case cpuinfo_uarch_cortex_a53:
++//           f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_6x8__asm_aarch64_neonfma_prfm_cortex_a53);
++//           f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_6x8__asm_aarch64_neonfma_prfm_cortex_a53);
++//           #if XNN_ENABLE_GEMM_M_SPECIALIZATION
++//             f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch64_neonfma_prfm_cortex_a53);
++//             f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch64_neonfma_prfm_cortex_a53);
++//           #endif
++//           f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a53);
++//           f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a53);
++//           f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//           f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
++//           f32_gemm_config.mr = 6;
++//           f32_gemm_config.nr = 8;
++//           break;
++//         case cpuinfo_uarch_cortex_a55r0:
++//           f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_6x8__asm_aarch64_neonfma_cortex_a53);
++//           f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_6x8__asm_aarch64_neonfma_cortex_a53);
++//           #if XNN_ENABLE_GEMM_M_SPECIALIZATION
++//             f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a53);
++//             f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a53);
++//           #endif
++//           f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a53);
++//           f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a53);
++//           f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//           f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
++//           f32_gemm_config.mr = 6;
++//           f32_gemm_config.nr = 8;
++//           break;
++//         case cpuinfo_uarch_cortex_a35:
++//         case cpuinfo_uarch_cortex_a55:
++//         case cpuinfo_uarch_kryo:
++//           f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_6x8__asm_aarch64_neonfma_cortex_a55);
++//           f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_6x8__asm_aarch64_neonfma_cortex_a55);
++//           #if XNN_ENABLE_GEMM_M_SPECIALIZATION
++//             f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a55);
++//             f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a55);
++//           #endif
++//           f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a53);
++//           f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a53);
++//           f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//           f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
++//           f32_gemm_config.mr = 6;
++//           f32_gemm_config.nr = 8;
++//           break;
++//         case cpuinfo_uarch_cortex_a73:
++//           f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_6x8__asm_aarch64_neonfma_cortex_a73);
++//           f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_6x8__asm_aarch64_neonfma_cortex_a73);
++//           f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a75);
++//           f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a75);
++//           f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//           f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
++//           f32_gemm_config.mr = 6;
++//           f32_gemm_config.nr = 8;
++//           break;
++//         case cpuinfo_uarch_cortex_a77:
++//         case cpuinfo_uarch_exynos_m5:
++//           f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a75);
++//           f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a75);
++//           f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a75);
++//           f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a75);
++//           f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//           f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
++//           f32_gemm_config.mr = 4;
++//           f32_gemm_config.nr = 8;
++//           break;
++//         case cpuinfo_uarch_cortex_a78:
++//         case cpuinfo_uarch_cortex_x1:
++//         default:
++//           f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_6x8__asm_aarch64_neonfma_ld128);
++//           f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_6x8__asm_aarch64_neonfma_ld128);
++//           #if XNN_ENABLE_GEMM_M_SPECIALIZATION
++//             f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch64_neonfma_ld128);
++//             f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch64_neonfma_ld128);
++//           #endif
++//           f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_ld64);
++//           f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_ld64);
++//           f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//           f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
++//           f32_gemm_config.mr = 6;
++//           f32_gemm_config.nr = 8;
++//           #if XNN_ENABLE_JIT
++//             f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_codegen(xnn_generate_f32_gemm_ukernel_1x8__aarch64_neonfma_ld64);
++//             #if XNN_ENABLE_GEMM_M_SPECIALIZATION
++//               f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_codegen(xnn_generate_f32_gemm_ukernel_4x8__aarch64_neonfma_ld128);
++//               f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_codegen(xnn_generate_f32_igemm_ukernel_4x8__aarch64_neonfma_ld128);
++//             #endif
++//             f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_codegen(xnn_generate_f32_gemm_ukernel_6x8__aarch64_neonfma_ld128);
++//             f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_codegen(xnn_generate_f32_igemm_ukernel_6x8__aarch64_neonfma_ld128);
++//           #endif
++//           break;
++//       }
++//       #if XNN_MAX_UARCH_TYPES > 1
++//       {
++//         /* Choose micro-kernels for little cores according to micro-kernel specification for the big core */
++//         const uint32_t mr = f32_gemm_config.mr;
++//         const uint32_t nr = f32_gemm_config.nr;
++//         const uint32_t log2_sr = f32_gemm_config.log2_sr;
++//         for (size_t i = 1; i < XNN_MAX_UARCH_TYPES; i++) {
++//           const struct cpuinfo_uarch_info* uarch_info = cpuinfo_get_uarch(i);
++//           if (uarch_info == NULL) {
++//             /* No more microarchitectures in the system */
++//             break;
++//           }
+ 
+-          switch (uarch_info->uarch) {
+-            case cpuinfo_uarch_cortex_a53:
+-              if (mr == 6 && nr == 8 && log2_sr == 0) {
+-                f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_6x8__asm_aarch64_neonfma_prfm_cortex_a53;
+-                f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_6x8__asm_aarch64_neonfma_prfm_cortex_a53;
+-                #if XNN_ENABLE_GEMM_M_SPECIALIZATION
+-                  f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch64_neonfma_prfm_cortex_a53;
+-                  f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch64_neonfma_prfm_cortex_a53;
+-                #endif
+-                f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a53;
+-                f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a53;
+-                #if XNN_ENABLE_JIT
+-                  f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_1x8__aarch64_neonfma_prfm_cortex_a53;
+-                  f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_1x8__aarch64_neonfma_prfm_cortex_a53;
+-                  #if XNN_ENABLE_GEMM_M_SPECIALIZATION
+-                    f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_4x8__aarch64_neonfma_prfm_cortex_a53;
+-                    f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_4x8__aarch64_neonfma_prfm_cortex_a53;
+-                  #endif
+-                  f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_6x8__aarch64_neonfma_prfm_cortex_a53;
+-                  f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_6x8__aarch64_neonfma_prfm_cortex_a53;
+-                #endif
+-              } else if (mr == 4 && nr == 8 && log2_sr == 0) {
+-                f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch64_neonfma_prfm_cortex_a53;
+-                f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch64_neonfma_prfm_cortex_a53;
+-                f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a53;
+-                f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a53;
+-                #if XNN_ENABLE_JIT
+-                  f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_1x8__aarch64_neonfma_prfm_cortex_a53;
+-                  f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_1x8__aarch64_neonfma_prfm_cortex_a53;
+-                  f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_4x8__aarch64_neonfma_prfm_cortex_a53;
+-                  f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_4x8__aarch64_neonfma_prfm_cortex_a53;
+-                #endif
+-              }
+-              break;
+-            case cpuinfo_uarch_cortex_a55r0:
+-              if (mr == 6 && nr == 8 && log2_sr == 0) {
+-                f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_6x8__asm_aarch64_neonfma_cortex_a53;
+-                f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_6x8__asm_aarch64_neonfma_cortex_a53;
+-                #if XNN_ENABLE_GEMM_M_SPECIALIZATION
+-                  f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a53;
+-                  f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a53;
+-                #endif
+-                f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a53;
+-                f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a53;
+-                #if XNN_ENABLE_JIT
+-                  f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_1x8__aarch64_neonfma_cortex_a53;
+-                  f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_1x8__aarch64_neonfma_cortex_a53;
+-                  #if XNN_ENABLE_GEMM_M_SPECIALIZATION
+-                    f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_4x8__aarch64_neonfma_cortex_a53;
+-                    f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_4x8__aarch64_neonfma_cortex_a53;
+-                  #endif
+-                  f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_6x8__aarch64_neonfma_cortex_a53;
+-                  f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_6x8__aarch64_neonfma_cortex_a53;
+-                #endif
+-              } else if (mr == 4 && nr == 8 && log2_sr == 0) {
+-                f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a53;
+-                f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a53;
+-                f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a53;
+-                f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a53;
+-                #if XNN_ENABLE_JIT
+-                  f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_1x8__aarch64_neonfma_cortex_a53;
+-                  f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_1x8__aarch64_neonfma_cortex_a53;
+-                  f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_4x8__aarch64_neonfma_cortex_a53;
+-                  f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_4x8__aarch64_neonfma_cortex_a53;
+-                #endif
+-              }
+-              break;
+-            case cpuinfo_uarch_cortex_a55:
+-              if (mr == 6 && nr == 8 && log2_sr == 0) {
+-                f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_6x8__asm_aarch64_neonfma_cortex_a55;
+-                f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_6x8__asm_aarch64_neonfma_cortex_a55;
+-                #if XNN_ENABLE_GEMM_M_SPECIALIZATION
+-                  f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a55;
+-                  f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a55;
+-                #endif
+-                f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a53;
+-                f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a53;
+-                #if XNN_ENABLE_JIT
+-                  f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_1x8__aarch64_neonfma_cortex_a53;
+-                  f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_1x8__aarch64_neonfma_cortex_a53;
+-                  f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_6x8__aarch64_neonfma_cortex_a55;
+-                  f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_6x8__aarch64_neonfma_cortex_a55;
+-                #endif
+-              } else if (mr == 4 && nr == 8 && log2_sr == 0) {
+-                f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a55;
+-                f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a55;
+-                f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a53;
+-                f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a53;
+-                #if XNN_ENABLE_JIT
+-                  f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_1x8__aarch64_neonfma_cortex_a53;
+-                  f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_1x8__aarch64_neonfma_cortex_a53;
+-                  f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_4x8__aarch64_neonfma_cortex_a55;
+-                  f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_4x8__aarch64_neonfma_cortex_a55;
+-                #endif
+-              }
+-              break;
+-            default:
+-              break;
+-          }
+-        }
+-      }
+-      #endif  // XNN_MAX_UARCH_TYPES > 1
+-    #else  // XNN_ENABLE_ASSEMBLY && !XNN_PLATFORM_IOS && !XNN_PLATFORM_MAC
+-      #if XNN_ENABLE_ASSEMBLY
+-        f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_6x8__asm_aarch64_neonfma_prfm_cortex_a75);
+-        f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_6x8__asm_aarch64_neonfma_prfm_cortex_a75);
+-        f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a75);
+-        f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a75);
+-        f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-        f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
+-        f32_gemm_config.mr = 6;
+-        f32_gemm_config.nr = 8;
+-      #else  // !XNN_ENABLE_ASSEMBLY
+-        f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_6x8__aarch64_neonfma_lane_ld64);
+-        f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_6x8__aarch64_neonfma_lane_ld64);
+-        f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__aarch64_neonfma_lane_ld64);
+-        f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__aarch64_neonfma_lane_ld64);
+-        f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-        f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
+-        f32_gemm_config.mr = 6;
+-        f32_gemm_config.nr = 8;
+-       #endif  // XNN_ENABLE_ASSEMBLY
+-    #endif  // XNN_ENABLE_ASSEMBLY && !XNN_PLATFORM_IOS && !XNN_PLATFORM_MAC
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
+-      f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(7)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_7x16__avx512f_broadcast);
+-      f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(7)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_7x16__avx512f_broadcast);
+-      f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x16__avx512f_broadcast);
+-      f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x16__avx512f_broadcast);
+-      f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x16__avx512f_prfm_x4;
+-      f32_gemm_config.mr = 7;
+-      f32_gemm_config.nr = 16;
+-    } else if (hardware_config->use_x86_fma3) {
+-      switch (cpuinfo_get_core(0)->uarch) {
+-        case cpuinfo_uarch_zen:
+-        case cpuinfo_uarch_dhyana:
+-          f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x16s4__fma3_broadcast);
+-          f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x16s4__fma3_broadcast);
+-          f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x16s4__fma3_broadcast);
+-          f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x16s4__fma3_broadcast);
+-          f32_gemm_config.init.f32 = xnn_init_f32_minmax_avx_params;
+-          f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x16s4__avx_x4;
+-          f32_gemm_config.mr = 4;
+-          f32_gemm_config.nr = 16;
+-          f32_gemm_config.log2_sr = 2;
+-          break;
+-        default:
+-          f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(5)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_5x16__fma3_broadcast);
+-          f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(5)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_5x16__fma3_broadcast);
+-          f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x16__fma3_broadcast);
+-          f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x16__fma3_broadcast);
+-          f32_gemm_config.init.f32 = xnn_init_f32_minmax_avx_params;
+-          f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x16__avx_x4;
+-          f32_gemm_config.mr = 5;
+-          f32_gemm_config.nr = 16;
+-          break;
+-      }
+-    } else if (hardware_config->use_x86_avx) {
+-      f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(5)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_5x16__avx_broadcast);
+-      f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(5)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_5x16__avx_broadcast);
+-      f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x16__avx_broadcast);
+-      f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x16__avx_broadcast);
+-      f32_gemm_config.init.f32 = xnn_init_f32_minmax_avx_params;
+-      f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x16__avx_x4;
+-      f32_gemm_config.mr = 5;
+-      f32_gemm_config.nr = 16;
+-    } else {
+-      f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__sse_load1);
+-      f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__sse_load1);
+-      f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__sse_load1);
+-      f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__sse_load1);
+-      f32_gemm_config.init.f32 = xnn_init_f32_minmax_sse_params;
+-      f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__sse2_x4;
+-      f32_gemm_config.mr = 4;
+-      f32_gemm_config.nr = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      #if XNN_ARCH_WASMRELAXEDSIMD
+-        f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__wasmrelaxedsimd_fma_loadsplat);
+-        f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__wasmrelaxedsimd_fma_loadsplat);
+-        f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__wasmrelaxedsimd_fma_loadsplat);
+-        f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__wasmrelaxedsimd_fma_loadsplat);
+-        f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_4x8__wasmrelaxedsimd_fma_loadsplat);
+-        f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_4x8__wasmrelaxedsimd_fma_loadsplat);
+-        f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_1x8__wasmrelaxedsimd_fma_loadsplat);
+-        f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_1x8__wasmrelaxedsimd_fma_loadsplat);
+-        f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_4x8__wasmrelaxedsimd_fma_loadsplat);
+-        f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_4x8__wasmrelaxedsimd_fma_loadsplat);
+-        f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_1x8__wasmrelaxedsimd_fma_loadsplat);
+-        f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_1x8__wasmrelaxedsimd_fma_loadsplat);
+-      #else
+-        f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__wasmsimd_x86_splat);
+-        f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__wasmsimd_x86_splat);
+-        f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__wasmsimd_x86_splat);
+-        f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__wasmsimd_x86_splat);
+-        f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_4x8__wasmsimd_splat);
+-        f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_4x8__wasmsimd_splat);
+-        f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_1x8__wasmsimd_splat);
+-        f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_1x8__wasmsimd_splat);
+-        f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_4x8__wasmsimd_splat);
+-        f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_4x8__wasmsimd_splat);
+-        f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_1x8__wasmsimd_splat);
+-        f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_1x8__wasmsimd_splat);
+-      #endif
++//           switch (uarch_info->uarch) {
++//             case cpuinfo_uarch_cortex_a53:
++//               if (mr == 6 && nr == 8 && log2_sr == 0) {
++//                 f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_6x8__asm_aarch64_neonfma_prfm_cortex_a53;
++//                 f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_6x8__asm_aarch64_neonfma_prfm_cortex_a53;
++//                 #if XNN_ENABLE_GEMM_M_SPECIALIZATION
++//                   f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch64_neonfma_prfm_cortex_a53;
++//                   f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch64_neonfma_prfm_cortex_a53;
++//                 #endif
++//                 f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a53;
++//                 f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a53;
++//                 #if XNN_ENABLE_JIT
++//                   f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_1x8__aarch64_neonfma_prfm_cortex_a53;
++//                   f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_1x8__aarch64_neonfma_prfm_cortex_a53;
++//                   #if XNN_ENABLE_GEMM_M_SPECIALIZATION
++//                     f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_4x8__aarch64_neonfma_prfm_cortex_a53;
++//                     f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_4x8__aarch64_neonfma_prfm_cortex_a53;
++//                   #endif
++//                   f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_6x8__aarch64_neonfma_prfm_cortex_a53;
++//                   f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_6x8__aarch64_neonfma_prfm_cortex_a53;
++//                 #endif
++//               } else if (mr == 4 && nr == 8 && log2_sr == 0) {
++//                 f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch64_neonfma_prfm_cortex_a53;
++//                 f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch64_neonfma_prfm_cortex_a53;
++//                 f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a53;
++//                 f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a53;
++//                 #if XNN_ENABLE_JIT
++//                   f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_1x8__aarch64_neonfma_prfm_cortex_a53;
++//                   f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_1x8__aarch64_neonfma_prfm_cortex_a53;
++//                   f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_4x8__aarch64_neonfma_prfm_cortex_a53;
++//                   f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_4x8__aarch64_neonfma_prfm_cortex_a53;
++//                 #endif
++//               }
++//               break;
++//             case cpuinfo_uarch_cortex_a55r0:
++//               if (mr == 6 && nr == 8 && log2_sr == 0) {
++//                 f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_6x8__asm_aarch64_neonfma_cortex_a53;
++//                 f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_6x8__asm_aarch64_neonfma_cortex_a53;
++//                 #if XNN_ENABLE_GEMM_M_SPECIALIZATION
++//                   f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a53;
++//                   f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a53;
++//                 #endif
++//                 f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a53;
++//                 f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a53;
++//                 #if XNN_ENABLE_JIT
++//                   f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_1x8__aarch64_neonfma_cortex_a53;
++//                   f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_1x8__aarch64_neonfma_cortex_a53;
++//                   #if XNN_ENABLE_GEMM_M_SPECIALIZATION
++//                     f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_4x8__aarch64_neonfma_cortex_a53;
++//                     f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_4x8__aarch64_neonfma_cortex_a53;
++//                   #endif
++//                   f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_6x8__aarch64_neonfma_cortex_a53;
++//                   f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_6x8__aarch64_neonfma_cortex_a53;
++//                 #endif
++//               } else if (mr == 4 && nr == 8 && log2_sr == 0) {
++//                 f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a53;
++//                 f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a53;
++//                 f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a53;
++//                 f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a53;
++//                 #if XNN_ENABLE_JIT
++//                   f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_1x8__aarch64_neonfma_cortex_a53;
++//                   f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_1x8__aarch64_neonfma_cortex_a53;
++//                   f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_4x8__aarch64_neonfma_cortex_a53;
++//                   f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_4x8__aarch64_neonfma_cortex_a53;
++//                 #endif
++//               }
++//               break;
++//             case cpuinfo_uarch_cortex_a55:
++//               if (mr == 6 && nr == 8 && log2_sr == 0) {
++//                 f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_6x8__asm_aarch64_neonfma_cortex_a55;
++//                 f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_6x8__asm_aarch64_neonfma_cortex_a55;
++//                 #if XNN_ENABLE_GEMM_M_SPECIALIZATION
++//                   f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a55;
++//                   f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a55;
++//                 #endif
++//                 f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a53;
++//                 f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a53;
++//                 #if XNN_ENABLE_JIT
++//                   f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_1x8__aarch64_neonfma_cortex_a53;
++//                   f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_1x8__aarch64_neonfma_cortex_a53;
++//                   f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_6x8__aarch64_neonfma_cortex_a55;
++//                   f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(6)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_6x8__aarch64_neonfma_cortex_a55;
++//                 #endif
++//               } else if (mr == 4 && nr == 8 && log2_sr == 0) {
++//                 f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a55;
++//                 f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__asm_aarch64_neonfma_cortex_a55;
++//                 f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a53;
++//                 f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_cortex_a53;
++//                 #if XNN_ENABLE_JIT
++//                   f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_1x8__aarch64_neonfma_cortex_a53;
++//                   f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_1x8__aarch64_neonfma_cortex_a53;
++//                   f32_gemm_config.generator.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_gemm_code_generator_fn) xnn_generate_f32_gemm_ukernel_4x8__aarch64_neonfma_cortex_a55;
++//                   f32_gemm_config.generator.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_jit_igemm_code_generator_fn) xnn_generate_f32_igemm_ukernel_4x8__aarch64_neonfma_cortex_a55;
++//                 #endif
++//               }
++//               break;
++//             default:
++//               break;
++//           }
++//         }
++//       }
++//       #endif  // XNN_MAX_UARCH_TYPES > 1
++//     #else  // XNN_ENABLE_ASSEMBLY && !XNN_PLATFORM_IOS && !XNN_PLATFORM_MAC
++//       #if XNN_ENABLE_ASSEMBLY
++//         f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_6x8__asm_aarch64_neonfma_prfm_cortex_a75);
++//         f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_6x8__asm_aarch64_neonfma_prfm_cortex_a75);
++//         f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a75);
++//         f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__asm_aarch64_neonfma_prfm_cortex_a75);
++//         f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//         f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
++//         f32_gemm_config.mr = 6;
++//         f32_gemm_config.nr = 8;
++//       #else  // !XNN_ENABLE_ASSEMBLY
++//         f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_6x8__aarch64_neonfma_lane_ld64);
++//         f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_6x8__aarch64_neonfma_lane_ld64);
++//         f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__aarch64_neonfma_lane_ld64);
++//         f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__aarch64_neonfma_lane_ld64);
++//         f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//         f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__neon_ld4lane_prfm_x4;
++//         f32_gemm_config.mr = 6;
++//         f32_gemm_config.nr = 8;
++//        #endif  // XNN_ENABLE_ASSEMBLY
++//     #endif  // XNN_ENABLE_ASSEMBLY && !XNN_PLATFORM_IOS && !XNN_PLATFORM_MAC
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
++//       f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(7)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_7x16__avx512f_broadcast);
++//       f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(7)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_7x16__avx512f_broadcast);
++//       f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x16__avx512f_broadcast);
++//       f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x16__avx512f_broadcast);
++//       f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x16__avx512f_prfm_x4;
++//       f32_gemm_config.mr = 7;
++//       f32_gemm_config.nr = 16;
++//     } else if (hardware_config->use_x86_fma3) {
++//       switch (cpuinfo_get_core(0)->uarch) {
++//         case cpuinfo_uarch_zen:
++//         case cpuinfo_uarch_dhyana:
++//           f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x16s4__fma3_broadcast);
++//           f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x16s4__fma3_broadcast);
++//           f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x16s4__fma3_broadcast);
++//           f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x16s4__fma3_broadcast);
++//           f32_gemm_config.init.f32 = xnn_init_f32_minmax_avx_params;
++//           f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x16s4__avx_x4;
++//           f32_gemm_config.mr = 4;
++//           f32_gemm_config.nr = 16;
++//           f32_gemm_config.log2_sr = 2;
++//           break;
++//         default:
++//           f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(5)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_5x16__fma3_broadcast);
++//           f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(5)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_5x16__fma3_broadcast);
++//           f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x16__fma3_broadcast);
++//           f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x16__fma3_broadcast);
++//           f32_gemm_config.init.f32 = xnn_init_f32_minmax_avx_params;
++//           f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x16__avx_x4;
++//           f32_gemm_config.mr = 5;
++//           f32_gemm_config.nr = 16;
++//           break;
++//       }
++//     } else if (hardware_config->use_x86_avx) {
++//       f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(5)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_5x16__avx_broadcast);
++//       f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(5)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_5x16__avx_broadcast);
++//       f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x16__avx_broadcast);
++//       f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x16__avx_broadcast);
++//       f32_gemm_config.init.f32 = xnn_init_f32_minmax_avx_params;
++//       f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x16__avx_x4;
++//       f32_gemm_config.mr = 5;
++//       f32_gemm_config.nr = 16;
++//     } else {
++//       f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__sse_load1);
++//       f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__sse_load1);
++//       f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__sse_load1);
++//       f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__sse_load1);
++//       f32_gemm_config.init.f32 = xnn_init_f32_minmax_sse_params;
++//       f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__sse2_x4;
++//       f32_gemm_config.mr = 4;
++//       f32_gemm_config.nr = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       #if XNN_ARCH_WASMRELAXEDSIMD
++//         f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__wasmrelaxedsimd_fma_loadsplat);
++//         f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__wasmrelaxedsimd_fma_loadsplat);
++//         f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__wasmrelaxedsimd_fma_loadsplat);
++//         f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__wasmrelaxedsimd_fma_loadsplat);
++//         f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_4x8__wasmrelaxedsimd_fma_loadsplat);
++//         f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_4x8__wasmrelaxedsimd_fma_loadsplat);
++//         f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_1x8__wasmrelaxedsimd_fma_loadsplat);
++//         f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_1x8__wasmrelaxedsimd_fma_loadsplat);
++//         f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_4x8__wasmrelaxedsimd_fma_loadsplat);
++//         f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_4x8__wasmrelaxedsimd_fma_loadsplat);
++//         f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_1x8__wasmrelaxedsimd_fma_loadsplat);
++//         f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_1x8__wasmrelaxedsimd_fma_loadsplat);
++//       #else
++//         f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x8__wasmsimd_x86_splat);
++//         f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x8__wasmsimd_x86_splat);
++//         f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__wasmsimd_x86_splat);
++//         f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__wasmsimd_x86_splat);
++//         f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_4x8__wasmsimd_splat);
++//         f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_4x8__wasmsimd_splat);
++//         f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_1x8__wasmsimd_splat);
++//         f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_1x8__wasmsimd_splat);
++//         f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_4x8__wasmsimd_splat);
++//         f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_4x8__wasmsimd_splat);
++//         f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_1x8__wasmsimd_splat);
++//         f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_1x8__wasmsimd_splat);
++//       #endif
+ 
+-      f32_gemm_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-      f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__wasmsimd_x4;
+-      f32_gemm_config.mr = 4;
+-      f32_gemm_config.nr = 8;
+-    } else {
+-      #if XNN_ARCH_WASMRELAXEDSIMD
+-        f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_6x8__wasmrelaxedsimd_fma_splat);
+-        f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_6x8__wasmrelaxedsimd_fma_splat);
+-        f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__wasmrelaxedsimd_fma_splat);
+-        f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__wasmrelaxedsimd_fma_splat);
+-        f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_6x8__wasmrelaxedsimd_fma_splat);
+-        f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_6x8__wasmrelaxedsimd_fma_splat);
+-        f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_1x8__wasmrelaxedsimd_fma_splat);
+-        f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_1x8__wasmrelaxedsimd_fma_splat);
+-        f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_6x8__wasmrelaxedsimd_fma_splat);
+-        f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_6x8__wasmrelaxedsimd_fma_splat);
+-        f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_1x8__wasmrelaxedsimd_fma_splat);
+-        f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_1x8__wasmrelaxedsimd_fma_splat);
+-        f32_gemm_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-        f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__wasmsimd_x4;
+-        f32_gemm_config.mr = 6;
+-        f32_gemm_config.nr = 8;
+-      #else
+-        f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(5)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_5x8__wasmsimd_arm_splat);
+-        f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(5)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_5x8__wasmsimd_arm_splat);
+-        f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__wasmsimd_arm_splat);
+-        f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__wasmsimd_arm_splat);
+-        f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(5)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_5x8__wasmsimd_splat);
+-        f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(5)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_5x8__wasmsimd_splat);
+-        f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_1x8__wasmsimd_splat);
+-        f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_1x8__wasmsimd_splat);
+-        f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(5)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_5x8__wasmsimd_splat);
+-        f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(5)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_5x8__wasmsimd_splat);
+-        f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_1x8__wasmsimd_splat);
+-        f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_1x8__wasmsimd_splat);
+-        f32_gemm_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-        f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__wasmsimd_x4;
+-        f32_gemm_config.mr = 5;
+-        f32_gemm_config.nr = 8;
+-      #endif
+-    }
+-  #elif XNN_ARCH_WASM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_2x4__scalar);
+-      f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_2x4__scalar);
+-      f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x4__wasm);
+-      f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x4__wasm);
+-      f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_2x4__scalar);
+-      f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_2x4__scalar);
+-      f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_1x4__wasm);
+-      f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_1x4__wasm);
+-      f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_2x4__scalar);
+-      f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_2x4__scalar);
+-      f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_1x4__scalar);
+-      f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_1x4__scalar);
+-      f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x4__scalar_float_x4;
+-      f32_gemm_config.mr = 2;
+-      f32_gemm_config.nr = 4;
+-    } else {
+-      f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x4__wasm);
+-      f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x4__wasm);
+-      f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x4__wasm);
+-      f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x4__wasm);
+-      f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_4x4__wasm);
+-      f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_4x4__wasm);
+-      f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_1x4__wasm);
+-      f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_1x4__wasm);
+-      f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_4x4__scalar);
+-      f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_4x4__scalar);
+-      f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_1x4__scalar);
+-      f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_1x4__scalar);
+-      f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x4__scalar_float_x4;
+-      f32_gemm_config.mr = 4;
+-      f32_gemm_config.nr = 4;
+-    }
+-  #elif XNN_ARCH_RISCV
+-    f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x4__scalar);
+-    f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x4__scalar);
+-    f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x4__scalar);
+-    f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x4__scalar);
+-    f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_4x4__scalar);
+-    f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_4x4__scalar);
+-    f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_1x4__scalar);
+-    f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_1x4__scalar);
+-    f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_4x4__scalar);
+-    f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_4x4__scalar);
+-    f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_1x4__scalar);
+-    f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_1x4__scalar);
+-    f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x4__scalar_float_x4;
+-    f32_gemm_config.mr = 4;
+-    f32_gemm_config.nr = 4;
+-  #endif
+-}
++//       f32_gemm_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//       f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__wasmsimd_x4;
++//       f32_gemm_config.mr = 4;
++//       f32_gemm_config.nr = 8;
++//     } else {
++//       #if XNN_ARCH_WASMRELAXEDSIMD
++//         f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_6x8__wasmrelaxedsimd_fma_splat);
++//         f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_6x8__wasmrelaxedsimd_fma_splat);
++//         f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__wasmrelaxedsimd_fma_splat);
++//         f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__wasmrelaxedsimd_fma_splat);
++//         f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_6x8__wasmrelaxedsimd_fma_splat);
++//         f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_6x8__wasmrelaxedsimd_fma_splat);
++//         f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_1x8__wasmrelaxedsimd_fma_splat);
++//         f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_1x8__wasmrelaxedsimd_fma_splat);
++//         f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_6x8__wasmrelaxedsimd_fma_splat);
++//         f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(6)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_6x8__wasmrelaxedsimd_fma_splat);
++//         f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_1x8__wasmrelaxedsimd_fma_splat);
++//         f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_1x8__wasmrelaxedsimd_fma_splat);
++//         f32_gemm_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//         f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__wasmsimd_x4;
++//         f32_gemm_config.mr = 6;
++//         f32_gemm_config.nr = 8;
++//       #else
++//         f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(5)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_5x8__wasmsimd_arm_splat);
++//         f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(5)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_5x8__wasmsimd_arm_splat);
++//         f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x8__wasmsimd_arm_splat);
++//         f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x8__wasmsimd_arm_splat);
++//         f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(5)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_5x8__wasmsimd_splat);
++//         f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(5)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_5x8__wasmsimd_splat);
++//         f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_1x8__wasmsimd_splat);
++//         f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_1x8__wasmsimd_splat);
++//         f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(5)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_5x8__wasmsimd_splat);
++//         f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(5)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_5x8__wasmsimd_splat);
++//         f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_1x8__wasmsimd_splat);
++//         f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_1x8__wasmsimd_splat);
++//         f32_gemm_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//         f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x8__wasmsimd_x4;
++//         f32_gemm_config.mr = 5;
++//         f32_gemm_config.nr = 8;
++//       #endif
++//     }
++//   #elif XNN_ARCH_WASM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_2x4__scalar);
++//       f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_2x4__scalar);
++//       f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x4__wasm);
++//       f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x4__wasm);
++//       f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_2x4__scalar);
++//       f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_2x4__scalar);
++//       f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_1x4__wasm);
++//       f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_1x4__wasm);
++//       f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_2x4__scalar);
++//       f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_2x4__scalar);
++//       f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_1x4__scalar);
++//       f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_1x4__scalar);
++//       f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x4__scalar_float_x4;
++//       f32_gemm_config.mr = 2;
++//       f32_gemm_config.nr = 4;
++//     } else {
++//       f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x4__wasm);
++//       f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x4__wasm);
++//       f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x4__wasm);
++//       f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x4__wasm);
++//       f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_4x4__wasm);
++//       f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_4x4__wasm);
++//       f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_1x4__wasm);
++//       f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_1x4__wasm);
++//       f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_4x4__scalar);
++//       f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_4x4__scalar);
++//       f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_1x4__scalar);
++//       f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_1x4__scalar);
++//       f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x4__scalar_float_x4;
++//       f32_gemm_config.mr = 4;
++//       f32_gemm_config.nr = 4;
++//     }
++//   #elif XNN_ARCH_RISCV
++//     f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x4__scalar);
++//     f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x4__scalar);
++//     f32_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_1x4__scalar);
++//     f32_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_1x4__scalar);
++//     f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_4x4__scalar);
++//     f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_4x4__scalar);
++//     f32_gemm_config.relu.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_relu_ukernel_1x4__scalar);
++//     f32_gemm_config.relu.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_relu_ukernel_1x4__scalar);
++//     f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_4x4__scalar);
++//     f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_4x4__scalar);
++//     f32_gemm_config.linear.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_1x4__scalar);
++//     f32_gemm_config.linear.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_1x4__scalar);
++//     f32_gemm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x4__scalar_float_x4;
++//     f32_gemm_config.mr = 4;
++//     f32_gemm_config.nr = 4;
++//   #endif
++// }
+ 
+-static void init_f32_gemm2_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      f32_gemm2_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x2__neon_lane_ld64);
+-      f32_gemm2_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x2__neon_lane_ld64);
+-      f32_gemm2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_gemm2_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x2__neon_ld2lane_prfm_x2;
+-      f32_gemm2_config.mr = 4;
+-      f32_gemm2_config.nr = 2;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_gemm2_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x2__scalar);
+-      f32_gemm2_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x2__scalar);
+-      f32_gemm2_config.linear.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_4x2__scalar);
+-      f32_gemm2_config.linear.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_4x2__scalar);
+-      f32_gemm2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_gemm2_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x2__scalar_float_x4;
+-      f32_gemm2_config.mr = 4;
+-      f32_gemm2_config.nr = 2;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    #if XNN_ENABLE_ASSEMBLY && !XNN_PLATFORM_IOS && !XNN_PLATFORM_MAC
+-      f32_gemm2_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x2__asm_aarch64_neonfma_prfm_cortex_a75);
+-      f32_gemm2_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x2__asm_aarch64_neonfma_prfm_cortex_a75);
+-      f32_gemm2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_gemm2_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x2__neon_ld2lane_prfm_x2;
+-      f32_gemm2_config.mr = 4;
+-      f32_gemm2_config.nr = 2;
+-    #else  // XNN_ENABLE_ASSEMBLY && !XNN_PLATFORM_IOS && !XNN_PLATFORM_MAC
+-      #if XNN_ENABLE_ASSEMBLY
+-        f32_gemm2_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x2__asm_aarch64_neonfma_prfm_cortex_a75);
+-        f32_gemm2_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x2__asm_aarch64_neonfma_prfm_cortex_a75);
+-        f32_gemm2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-        f32_gemm2_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x2__neon_ld2lane_prfm_x2;
+-        f32_gemm2_config.mr = 4;
+-        f32_gemm2_config.nr = 2;
+-      #else  // !XNN_ENABLE_ASSEMBLY
+-        f32_gemm2_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x2__aarch64_neonfma_lane_ld64);
+-        f32_gemm2_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x2__aarch64_neonfma_lane_ld64);
+-        f32_gemm2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-        f32_gemm2_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x2__neon_ld2lane_prfm_x2;
+-        f32_gemm2_config.mr = 4;
+-        f32_gemm2_config.nr = 2;
+-       #endif  // XNN_ENABLE_ASSEMBLY
+-    #endif  // XNN_ENABLE_ASSEMBLY && !XNN_PLATFORM_IOS && !XNN_PLATFORM_MAC
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    f32_gemm2_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x2c4__sse);
+-    f32_gemm2_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x2c4__sse);
+-    f32_gemm2_config.init.f32 = xnn_init_f32_minmax_sse_params;
+-    f32_gemm2_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x2c4__sse2_x4;
+-    f32_gemm2_config.mr = 4;
+-    f32_gemm2_config.nr = 2;
+-    f32_gemm2_config.log2_kr = 2;
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      #if XNN_ARCH_WASMRELAXEDSIMD
+-        f32_gemm2_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x2c4__wasmrelaxedsimd_fma);
+-        f32_gemm2_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x2c4__wasmrelaxedsimd_fma);
+-        f32_gemm2_config.linear.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_4x2c4__wasmrelaxedsimd_fma);
+-        f32_gemm2_config.linear.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_4x2c4__wasmrelaxedsimd_fma);
+-      #else
+-        f32_gemm2_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x2c4__wasmsimd_x86);
+-        f32_gemm2_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x2c4__wasmsimd_x86);
+-        f32_gemm2_config.linear.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_4x2c4__wasmsimd);
+-        f32_gemm2_config.linear.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_4x2c4__wasmsimd);
+-      #endif
++// static void init_f32_gemm2_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       f32_gemm2_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x2__neon_lane_ld64);
++//       f32_gemm2_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x2__neon_lane_ld64);
++//       f32_gemm2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_gemm2_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x2__neon_ld2lane_prfm_x2;
++//       f32_gemm2_config.mr = 4;
++//       f32_gemm2_config.nr = 2;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_gemm2_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x2__scalar);
++//       f32_gemm2_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x2__scalar);
++//       f32_gemm2_config.linear.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_4x2__scalar);
++//       f32_gemm2_config.linear.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_4x2__scalar);
++//       f32_gemm2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_gemm2_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x2__scalar_float_x4;
++//       f32_gemm2_config.mr = 4;
++//       f32_gemm2_config.nr = 2;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     #if XNN_ENABLE_ASSEMBLY && !XNN_PLATFORM_IOS && !XNN_PLATFORM_MAC
++//       f32_gemm2_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x2__asm_aarch64_neonfma_prfm_cortex_a75);
++//       f32_gemm2_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x2__asm_aarch64_neonfma_prfm_cortex_a75);
++//       f32_gemm2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_gemm2_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x2__neon_ld2lane_prfm_x2;
++//       f32_gemm2_config.mr = 4;
++//       f32_gemm2_config.nr = 2;
++//     #else  // XNN_ENABLE_ASSEMBLY && !XNN_PLATFORM_IOS && !XNN_PLATFORM_MAC
++//       #if XNN_ENABLE_ASSEMBLY
++//         f32_gemm2_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x2__asm_aarch64_neonfma_prfm_cortex_a75);
++//         f32_gemm2_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x2__asm_aarch64_neonfma_prfm_cortex_a75);
++//         f32_gemm2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//         f32_gemm2_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x2__neon_ld2lane_prfm_x2;
++//         f32_gemm2_config.mr = 4;
++//         f32_gemm2_config.nr = 2;
++//       #else  // !XNN_ENABLE_ASSEMBLY
++//         f32_gemm2_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x2__aarch64_neonfma_lane_ld64);
++//         f32_gemm2_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x2__aarch64_neonfma_lane_ld64);
++//         f32_gemm2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//         f32_gemm2_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x2__neon_ld2lane_prfm_x2;
++//         f32_gemm2_config.mr = 4;
++//         f32_gemm2_config.nr = 2;
++//        #endif  // XNN_ENABLE_ASSEMBLY
++//     #endif  // XNN_ENABLE_ASSEMBLY && !XNN_PLATFORM_IOS && !XNN_PLATFORM_MAC
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     f32_gemm2_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x2c4__sse);
++//     f32_gemm2_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x2c4__sse);
++//     f32_gemm2_config.init.f32 = xnn_init_f32_minmax_sse_params;
++//     f32_gemm2_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x2c4__sse2_x4;
++//     f32_gemm2_config.mr = 4;
++//     f32_gemm2_config.nr = 2;
++//     f32_gemm2_config.log2_kr = 2;
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       #if XNN_ARCH_WASMRELAXEDSIMD
++//         f32_gemm2_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x2c4__wasmrelaxedsimd_fma);
++//         f32_gemm2_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x2c4__wasmrelaxedsimd_fma);
++//         f32_gemm2_config.linear.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_4x2c4__wasmrelaxedsimd_fma);
++//         f32_gemm2_config.linear.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_4x2c4__wasmrelaxedsimd_fma);
++//       #else
++//         f32_gemm2_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x2c4__wasmsimd_x86);
++//         f32_gemm2_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x2c4__wasmsimd_x86);
++//         f32_gemm2_config.linear.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_4x2c4__wasmsimd);
++//         f32_gemm2_config.linear.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_4x2c4__wasmsimd);
++//       #endif
+ 
+-      f32_gemm2_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-      f32_gemm2_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x2c4__wasmsimd_x4;
+-      f32_gemm2_config.mr = 4;
+-      f32_gemm2_config.nr = 2;
+-      f32_gemm2_config.log2_kr = 2;
+-    } else {
+-      #if XNN_ARCH_WASMRELAXEDSIMD
+-        f32_gemm2_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x2c4__wasmrelaxedsimd_fma);
+-        f32_gemm2_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x2c4__wasmrelaxedsimd_fma);
+-        f32_gemm2_config.linear.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_4x2c4__wasmrelaxedsimd_fma);
+-        f32_gemm2_config.linear.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_4x2c4__wasmrelaxedsimd_fma);
+-      #else
+-        f32_gemm2_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x2c4__wasmsimd_arm);
+-        f32_gemm2_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x2c4__wasmsimd_arm);
+-        f32_gemm2_config.linear.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_4x2c4__wasmsimd);
+-        f32_gemm2_config.linear.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_4x2c4__wasmsimd);
+-      #endif
++//       f32_gemm2_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//       f32_gemm2_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x2c4__wasmsimd_x4;
++//       f32_gemm2_config.mr = 4;
++//       f32_gemm2_config.nr = 2;
++//       f32_gemm2_config.log2_kr = 2;
++//     } else {
++//       #if XNN_ARCH_WASMRELAXEDSIMD
++//         f32_gemm2_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x2c4__wasmrelaxedsimd_fma);
++//         f32_gemm2_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x2c4__wasmrelaxedsimd_fma);
++//         f32_gemm2_config.linear.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_4x2c4__wasmrelaxedsimd_fma);
++//         f32_gemm2_config.linear.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_4x2c4__wasmrelaxedsimd_fma);
++//       #else
++//         f32_gemm2_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x2c4__wasmsimd_arm);
++//         f32_gemm2_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x2c4__wasmsimd_arm);
++//         f32_gemm2_config.linear.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_4x2c4__wasmsimd);
++//         f32_gemm2_config.linear.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_4x2c4__wasmsimd);
++//       #endif
+ 
+-      f32_gemm2_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-      f32_gemm2_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x2c4__wasmsimd_x4;
+-      f32_gemm2_config.mr = 4;
+-      f32_gemm2_config.nr = 2;
+-      f32_gemm2_config.log2_kr = 2;
+-    }
+-  #elif XNN_ARCH_WASM
+-    f32_gemm2_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x2__wasm);
+-    f32_gemm2_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x2__wasm);
+-    f32_gemm2_config.linear.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_4x2__scalar);
+-    f32_gemm2_config.linear.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_4x2__scalar);
+-    f32_gemm2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_gemm2_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x2__scalar_float_x4;
+-    f32_gemm2_config.mr = 4;
+-    f32_gemm2_config.nr = 2;
+-  #elif XNN_ARCH_RISCV
+-    f32_gemm2_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x2__scalar);
+-    f32_gemm2_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x2__scalar);
+-    f32_gemm2_config.linear.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_4x2__scalar);
+-    f32_gemm2_config.linear.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_4x2__scalar);
+-    f32_gemm2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_gemm2_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x2__scalar_float_x4;
+-    f32_gemm2_config.mr = 4;
+-    f32_gemm2_config.nr = 2;
+-  #endif
+-}
++//       f32_gemm2_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//       f32_gemm2_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x2c4__wasmsimd_x4;
++//       f32_gemm2_config.mr = 4;
++//       f32_gemm2_config.nr = 2;
++//       f32_gemm2_config.log2_kr = 2;
++//     }
++//   #elif XNN_ARCH_WASM
++//     f32_gemm2_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x2__wasm);
++//     f32_gemm2_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x2__wasm);
++//     f32_gemm2_config.linear.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_4x2__scalar);
++//     f32_gemm2_config.linear.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_4x2__scalar);
++//     f32_gemm2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_gemm2_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x2__scalar_float_x4;
++//     f32_gemm2_config.mr = 4;
++//     f32_gemm2_config.nr = 2;
++//   #elif XNN_ARCH_RISCV
++//     f32_gemm2_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_minmax_ukernel_4x2__scalar);
++//     f32_gemm2_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_minmax_ukernel_4x2__scalar);
++//     f32_gemm2_config.linear.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_f32_gemm_ukernel_4x2__scalar);
++//     f32_gemm2_config.linear.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_f32_igemm_ukernel_4x2__scalar);
++//     f32_gemm2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_gemm2_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_x32_packw_gemm_goi_ukernel_x2__scalar_float_x4;
++//     f32_gemm2_config.mr = 4;
++//     f32_gemm2_config.nr = 2;
++//   #endif
++// }
+ 
+-static void init_qc8_gemm_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      #if XNN_ENABLE_ASSEMBLY
+-        if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
+-          #if XNN_ENABLE_ARM_DOTPROD
+-            switch (cpuinfo_get_uarch(0)->uarch) {
+-              case cpuinfo_uarch_cortex_a55:
+-                qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x8c4__asm_aarch32_neondot_cortex_a55);
+-                qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x8c4__asm_aarch32_neondot_cortex_a55);
+-                qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c4__neondot);
+-                qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c4__neondot);
+-                qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
+-                qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-                qc8_gemm_config.mr = 4;
+-                qc8_gemm_config.nr = 8;
+-                qc8_gemm_config.log2_kr = 2;
+-                break;
+-              default:
+-                qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x8c4__asm_aarch32_neondot_ld64);
+-                qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x8c4__asm_aarch32_neondot_ld64);
+-                qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c4__neondot);
+-                qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c4__neondot);
+-                qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
+-                qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-                qc8_gemm_config.mr = 4;
+-                qc8_gemm_config.nr = 8;
+-                qc8_gemm_config.log2_kr = 2;
+-                break;
+-            }
+-          #endif  // XNN_ENABLE_ARM_DOTPROD
+-        } else {
+-          switch (cpuinfo_get_uarch(0)->uarch) {
+-            case cpuinfo_uarch_cortex_a5:
+-            case cpuinfo_uarch_cortex_a7:
+-            case cpuinfo_uarch_krait:
+-            case cpuinfo_uarch_kryo:
+-              qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
+-              qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
+-              qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
+-              qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
+-              qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neon_params;
+-              qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-              qc8_gemm_config.mr = 4;
+-              qc8_gemm_config.nr = 8;
+-              break;
+-            case cpuinfo_uarch_cortex_a32:
+-            case cpuinfo_uarch_cortex_a35:
+-              qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_cortex_a35);
+-              qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_cortex_a35);
+-              qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_cortex_a35);
+-              qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_cortex_a35);
+-              qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
+-              qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-              qc8_gemm_config.mr = 4;
+-              qc8_gemm_config.nr = 8;
+-              break;
+-            case cpuinfo_uarch_cortex_a53:
+-            case cpuinfo_uarch_cortex_a57:
+-              qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_prfm_cortex_a53);
+-              qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_prfm_cortex_a53);
+-              qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_prfm_cortex_a35);
+-              qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_prfm_cortex_a35);
+-              qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
+-              qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-              qc8_gemm_config.mr = 4;
+-              qc8_gemm_config.nr = 8;
+-              break;
+-            case cpuinfo_uarch_cortex_a55r0:
+-              qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_cortex_a53);
+-              qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_cortex_a53);
+-              qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_cortex_a35);
+-              qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_cortex_a35);
+-              qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
+-              qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-              qc8_gemm_config.mr = 4;
+-              qc8_gemm_config.nr = 8;
+-              break;
+-            case cpuinfo_uarch_cortex_a72:
+-              qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_2x8c2s4__neonv8_mlal);
+-              qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_2x8c2s4__neonv8_mlal);
+-              qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c2s4__neonv8_mlal);
+-              qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c2s4__neonv8_mlal);
+-              qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
+-              qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-              qc8_gemm_config.mr = 2;
+-              qc8_gemm_config.nr = 8;
+-              qc8_gemm_config.log2_kr = 1;
+-              qc8_gemm_config.log2_sr = 2;
+-              break;
+-            case cpuinfo_uarch_exynos_m1:
+-            case cpuinfo_uarch_exynos_m2:
+-            case cpuinfo_uarch_exynos_m3:
+-              qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_prfm_ld64);
+-              qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_prfm_ld64);
+-              qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_prfm_cortex_a35);
+-              qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_prfm_cortex_a35);
+-              qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
+-              qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-              qc8_gemm_config.mr = 4;
+-              qc8_gemm_config.nr = 8;
+-              break;
++// static void init_qc8_gemm_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       #if XNN_ENABLE_ASSEMBLY
++//         if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
++//           #if XNN_ENABLE_ARM_DOTPROD
++//             switch (cpuinfo_get_uarch(0)->uarch) {
++//               case cpuinfo_uarch_cortex_a55:
++//                 qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x8c4__asm_aarch32_neondot_cortex_a55);
++//                 qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x8c4__asm_aarch32_neondot_cortex_a55);
++//                 qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c4__neondot);
++//                 qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c4__neondot);
++//                 qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
++//                 qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//                 qc8_gemm_config.mr = 4;
++//                 qc8_gemm_config.nr = 8;
++//                 qc8_gemm_config.log2_kr = 2;
++//                 break;
++//               default:
++//                 qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x8c4__asm_aarch32_neondot_ld64);
++//                 qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x8c4__asm_aarch32_neondot_ld64);
++//                 qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c4__neondot);
++//                 qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c4__neondot);
++//                 qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
++//                 qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//                 qc8_gemm_config.mr = 4;
++//                 qc8_gemm_config.nr = 8;
++//                 qc8_gemm_config.log2_kr = 2;
++//                 break;
++//             }
++//           #endif  // XNN_ENABLE_ARM_DOTPROD
++//         } else {
++//           switch (cpuinfo_get_uarch(0)->uarch) {
++//             case cpuinfo_uarch_cortex_a5:
++//             case cpuinfo_uarch_cortex_a7:
++//             case cpuinfo_uarch_krait:
++//             case cpuinfo_uarch_kryo:
++//               qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
++//               qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
++//               qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
++//               qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
++//               qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neon_params;
++//               qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//               qc8_gemm_config.mr = 4;
++//               qc8_gemm_config.nr = 8;
++//               break;
++//             case cpuinfo_uarch_cortex_a32:
++//             case cpuinfo_uarch_cortex_a35:
++//               qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_cortex_a35);
++//               qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_cortex_a35);
++//               qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_cortex_a35);
++//               qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_cortex_a35);
++//               qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
++//               qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//               qc8_gemm_config.mr = 4;
++//               qc8_gemm_config.nr = 8;
++//               break;
++//             case cpuinfo_uarch_cortex_a53:
++//             case cpuinfo_uarch_cortex_a57:
++//               qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_prfm_cortex_a53);
++//               qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_prfm_cortex_a53);
++//               qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_prfm_cortex_a35);
++//               qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_prfm_cortex_a35);
++//               qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
++//               qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//               qc8_gemm_config.mr = 4;
++//               qc8_gemm_config.nr = 8;
++//               break;
++//             case cpuinfo_uarch_cortex_a55r0:
++//               qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_cortex_a53);
++//               qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_cortex_a53);
++//               qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_cortex_a35);
++//               qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_cortex_a35);
++//               qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
++//               qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//               qc8_gemm_config.mr = 4;
++//               qc8_gemm_config.nr = 8;
++//               break;
++//             case cpuinfo_uarch_cortex_a72:
++//               qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_2x8c2s4__neonv8_mlal);
++//               qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_2x8c2s4__neonv8_mlal);
++//               qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c2s4__neonv8_mlal);
++//               qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c2s4__neonv8_mlal);
++//               qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
++//               qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//               qc8_gemm_config.mr = 2;
++//               qc8_gemm_config.nr = 8;
++//               qc8_gemm_config.log2_kr = 1;
++//               qc8_gemm_config.log2_sr = 2;
++//               break;
++//             case cpuinfo_uarch_exynos_m1:
++//             case cpuinfo_uarch_exynos_m2:
++//             case cpuinfo_uarch_exynos_m3:
++//               qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_prfm_ld64);
++//               qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_prfm_ld64);
++//               qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_prfm_cortex_a35);
++//               qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_prfm_cortex_a35);
++//               qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
++//               qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//               qc8_gemm_config.mr = 4;
++//               qc8_gemm_config.nr = 8;
++//               break;
+ 
+-            default:
+-              if (hardware_config->use_arm_neon_v8) {
+-                qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_ld64);
+-                qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_ld64);
+-                qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_cortex_a35);
+-                qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_cortex_a35);
+-                qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
+-                qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-                qc8_gemm_config.mr = 4;
+-                qc8_gemm_config.nr = 8;
+-              } else {
+-                qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x8__asm_aarch32_neon_mlal_lane_ld64);
+-                qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x8__asm_aarch32_neon_mlal_lane_ld64);
+-                qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
+-                qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
+-                qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neon_params;
+-                qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-                qc8_gemm_config.mr = 4;
+-                qc8_gemm_config.nr = 8;
+-              }
+-              break;
+-          }
+-        }
+-        #if XNN_MAX_UARCH_TYPES > 1
+-        {
+-          /* Choose micro-kernels for little cores according to micro-kernel specification for the big core */
+-          const uint32_t mr = qc8_gemm_config.mr;
+-          const uint32_t nr = qc8_gemm_config.nr;
+-          const uint32_t log2_kr = qc8_gemm_config.log2_kr;
+-          for (size_t i = 1; i < XNN_MAX_UARCH_TYPES; i++) {
+-            const struct cpuinfo_uarch_info* uarch_info = cpuinfo_get_uarch(i);
+-            if (uarch_info == NULL) {
+-              /* No more microarchitectures in the system */
+-              break;
+-            }
++//             default:
++//               if (hardware_config->use_arm_neon_v8) {
++//                 qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_ld64);
++//                 qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_ld64);
++//                 qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_cortex_a35);
++//                 qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_cortex_a35);
++//                 qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
++//                 qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//                 qc8_gemm_config.mr = 4;
++//                 qc8_gemm_config.nr = 8;
++//               } else {
++//                 qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x8__asm_aarch32_neon_mlal_lane_ld64);
++//                 qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x8__asm_aarch32_neon_mlal_lane_ld64);
++//                 qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
++//                 qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
++//                 qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neon_params;
++//                 qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//                 qc8_gemm_config.mr = 4;
++//                 qc8_gemm_config.nr = 8;
++//               }
++//               break;
++//           }
++//         }
++//         #if XNN_MAX_UARCH_TYPES > 1
++//         {
++//           /* Choose micro-kernels for little cores according to micro-kernel specification for the big core */
++//           const uint32_t mr = qc8_gemm_config.mr;
++//           const uint32_t nr = qc8_gemm_config.nr;
++//           const uint32_t log2_kr = qc8_gemm_config.log2_kr;
++//           for (size_t i = 1; i < XNN_MAX_UARCH_TYPES; i++) {
++//             const struct cpuinfo_uarch_info* uarch_info = cpuinfo_get_uarch(i);
++//             if (uarch_info == NULL) {
++//               /* No more microarchitectures in the system */
++//               break;
++//             }
+ 
+-            switch (uarch_info->uarch) {
+-              case cpuinfo_uarch_cortex_a55:
+-                #if XNN_ENABLE_ARM_DOTPROD
+-                  if (mr == 4 && nr == 8 && log2_kr == 2 && hardware_config->use_arm_neon_dot) {
+-                    qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x8c4__asm_aarch32_neondot_cortex_a55;
+-                    qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x8c4__asm_aarch32_neondot_cortex_a55;
+-                    qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c4__neondot;
+-                    qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c4__neondot;
+-                  }
+-                #endif  // XNN_ENABLE_ARM_DOTPROD
+-                break;
+-              case cpuinfo_uarch_cortex_a53:
+-                if (mr == 4 && nr == 8 && log2_kr == 0) {
+-                  qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_prfm_cortex_a53;
+-                  qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_prfm_cortex_a53;
+-                  qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_prfm_cortex_a35;
+-                  qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_prfm_cortex_a35;
+-                }
+-                break;
+-              case cpuinfo_uarch_cortex_a55r0:
+-                if (mr == 4 && nr == 8 && log2_kr == 0) {
+-                  qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_cortex_a53;
+-                  qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_cortex_a53;
+-                  qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_cortex_a35;
+-                  qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_cortex_a35;
+-                }
+-                break;
++//             switch (uarch_info->uarch) {
++//               case cpuinfo_uarch_cortex_a55:
++//                 #if XNN_ENABLE_ARM_DOTPROD
++//                   if (mr == 4 && nr == 8 && log2_kr == 2 && hardware_config->use_arm_neon_dot) {
++//                     qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x8c4__asm_aarch32_neondot_cortex_a55;
++//                     qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x8c4__asm_aarch32_neondot_cortex_a55;
++//                     qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c4__neondot;
++//                     qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c4__neondot;
++//                   }
++//                 #endif  // XNN_ENABLE_ARM_DOTPROD
++//                 break;
++//               case cpuinfo_uarch_cortex_a53:
++//                 if (mr == 4 && nr == 8 && log2_kr == 0) {
++//                   qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_prfm_cortex_a53;
++//                   qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_prfm_cortex_a53;
++//                   qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_prfm_cortex_a35;
++//                   qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_prfm_cortex_a35;
++//                 }
++//                 break;
++//               case cpuinfo_uarch_cortex_a55r0:
++//                 if (mr == 4 && nr == 8 && log2_kr == 0) {
++//                   qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_cortex_a53;
++//                   qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x8__asm_aarch32_neonv8_mlal_lane_cortex_a53;
++//                   qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_cortex_a35;
++//                   qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8__asm_aarch32_neonv8_mlal_lane_cortex_a35;
++//                 }
++//                 break;
+ 
+-              default:
+-                break;
+-            }
+-          }
+-        }
+-        #endif  // XNN_MAX_UARCH_TYPES > 1
+-      #else  // XNN_ENABLE_ASSEMBLY
+-        if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
+-          #if XNN_ENABLE_ARM_DOTPROD
+-            qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x8c4__neondot);
+-            qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x8c4__neondot);
+-            qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c4__neondot);
+-            qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c4__neondot);
+-            qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
+-            qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-            qc8_gemm_config.mr = 4;
+-            qc8_gemm_config.nr = 8;
+-            qc8_gemm_config.log2_kr = 2;
+-          #endif  // XNN_ENABLE_ARM_DOTPROD
+-        } else if (hardware_config->use_arm_neon_v8) {
+-          qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_2x8c2s4__neonv8_mlal);
+-          qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_2x8c2s4__neonv8_mlal);
+-          qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c2s4__neonv8_mlal);
+-          qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c2s4__neonv8_mlal);
+-          qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
+-          qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-          qc8_gemm_config.mr = 2;
+-          qc8_gemm_config.nr = 8;
+-          qc8_gemm_config.log2_kr = 1;
+-          qc8_gemm_config.log2_sr = 2;
+-        } else {
+-          qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_2x8c2s4__neon_mlal);
+-          qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_2x8c2s4__neon_mlal);
+-          qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c2s4__neon_mlal);
+-          qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c2s4__neon_mlal);
+-          qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neon_params;
+-          qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-          qc8_gemm_config.mr = 2;
+-          qc8_gemm_config.nr = 8;
+-          qc8_gemm_config.log2_kr = 1;
+-          qc8_gemm_config.log2_sr = 2;
+-        }
+-      #endif  // XNN_ENABLE_ASSEMBLY
+-    } else {
+-      qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_2x2c4__armsimd32);
+-      qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_2x2c4__armsimd32);
+-      qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x2c4__armsimd32);
+-      qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x2c4__armsimd32);
+-      qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_armsimd32_params;
+-      qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-      qc8_gemm_config.mr = 2;
+-      qc8_gemm_config.nr = 2;
+-      qc8_gemm_config.log2_kr = 2;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    #if XNN_PLATFORM_IOS || XNN_PLATFORM_MAC || XNN_PLATFORM_WINDOWS
+-      #if XNN_ENABLE_ASSEMBLY
+-        if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
+-          #if XNN_ENABLE_ARM_DOTPROD
+-            qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x16c4__asm_aarch64_neondot_ld128);
+-            qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x16c4__neondot);
+-            qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x16c4__asm_aarch64_neondot_ld128);
+-            qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x16c4__neondot);
+-            qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
+-            qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-            qc8_gemm_config.mr = 4;
+-            qc8_gemm_config.nr = 16;
+-            qc8_gemm_config.log2_kr = 2;
+-          #endif  // XNN_ENABLE_ARM_DOTPROD
+-        } else {
+-          qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_2x8c8__asm_aarch64_neon_mlal);
+-          qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_2x8c8__asm_aarch64_neon_mlal);
+-          qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c8__asm_aarch64_neon_mlal);
+-          qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c8__asm_aarch64_neon_mlal);
+-          qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
+-          qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-          qc8_gemm_config.mr = 2;
+-          qc8_gemm_config.nr = 8;
+-          qc8_gemm_config.log2_kr = 3;
+-        }
+-      #else  // !XNN_ENABLE_ASSEMBLY
+-        if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
+-          #if XNN_ENABLE_ARM_DOTPROD
+-            qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x16c4__neondot);
+-            qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x16c4__neondot);
+-            qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x16c4__neondot);
+-            qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x16c4__neondot);
+-            qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
+-            qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-            qc8_gemm_config.mr = 4;
+-            qc8_gemm_config.nr = 16;
+-            qc8_gemm_config.log2_kr = 2;
+-          #endif  // XNN_ENABLE_ARM_DOTPROD
+-        } else {
+-          qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_2x8c2s4__neonv8_mlal);
+-          qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_2x8c2s4__neonv8_mlal);
+-          qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c2s4__neonv8_mlal);
+-          qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c2s4__neonv8_mlal);
+-          qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
+-          qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-          qc8_gemm_config.mr = 2;
+-          qc8_gemm_config.nr = 8;
+-          qc8_gemm_config.log2_kr = 1;
+-          qc8_gemm_config.log2_sr = 2;
+-        }
+-      #endif  // XNN_ENABLE_ASSEMBLY
+-    #else  // !XNN_PLATFORM_IOS && !XNN_PLATFORM_MAC
+-      #if XNN_ENABLE_ASSEMBLY
+-        if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
+-          #if XNN_ENABLE_ARM_DOTPROD
+-            switch (cpuinfo_get_core(0)->uarch) {
+-              case cpuinfo_uarch_cortex_a55:
+-                qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x16c4__asm_aarch64_neondot_cortex_a55);
+-                qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x16c4__asm_aarch64_neondot_cortex_a55);
+-                break;
+-              case cpuinfo_uarch_cortex_x1:
+-              case cpuinfo_uarch_cortex_a78:
+-                qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x16c4__asm_aarch64_neondot_ld128);
+-                qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x16c4__asm_aarch64_neondot_ld128);
+-                break;
+-              default:
+-                qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x16c4__asm_aarch64_neondot_ld64);
+-                qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x16c4__asm_aarch64_neondot_ld64);
+-                break;
+-            }
+-            qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x16c4__neondot);
+-            qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x16c4__neondot);
+-            qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
+-            qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-            qc8_gemm_config.mr = 4;
+-            qc8_gemm_config.nr = 16;
+-            qc8_gemm_config.log2_kr = 2;
+-          #endif  // XNN_ENABLE_ARM_DOTPROD
+-        } else {
+-          switch (cpuinfo_get_core(0)->uarch) {
+-            case cpuinfo_uarch_cortex_a35:
+-            case cpuinfo_uarch_kryo:
+-              qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x16__asm_aarch64_neon_mlal_lane_ld64);
+-              qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x16__asm_aarch64_neon_mlal_lane_ld64);
+-              qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x16__neonv8_mlal_lane);
+-              qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x16__neonv8_mlal_lane);
+-              qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
+-              qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-              qc8_gemm_config.mr = 4;
+-              qc8_gemm_config.nr = 16;
+-              break;
++//               default:
++//                 break;
++//             }
++//           }
++//         }
++//         #endif  // XNN_MAX_UARCH_TYPES > 1
++//       #else  // XNN_ENABLE_ASSEMBLY
++//         if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
++//           #if XNN_ENABLE_ARM_DOTPROD
++//             qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x8c4__neondot);
++//             qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x8c4__neondot);
++//             qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c4__neondot);
++//             qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c4__neondot);
++//             qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
++//             qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//             qc8_gemm_config.mr = 4;
++//             qc8_gemm_config.nr = 8;
++//             qc8_gemm_config.log2_kr = 2;
++//           #endif  // XNN_ENABLE_ARM_DOTPROD
++//         } else if (hardware_config->use_arm_neon_v8) {
++//           qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_2x8c2s4__neonv8_mlal);
++//           qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_2x8c2s4__neonv8_mlal);
++//           qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c2s4__neonv8_mlal);
++//           qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c2s4__neonv8_mlal);
++//           qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
++//           qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//           qc8_gemm_config.mr = 2;
++//           qc8_gemm_config.nr = 8;
++//           qc8_gemm_config.log2_kr = 1;
++//           qc8_gemm_config.log2_sr = 2;
++//         } else {
++//           qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_2x8c2s4__neon_mlal);
++//           qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_2x8c2s4__neon_mlal);
++//           qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c2s4__neon_mlal);
++//           qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c2s4__neon_mlal);
++//           qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neon_params;
++//           qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//           qc8_gemm_config.mr = 2;
++//           qc8_gemm_config.nr = 8;
++//           qc8_gemm_config.log2_kr = 1;
++//           qc8_gemm_config.log2_sr = 2;
++//         }
++//       #endif  // XNN_ENABLE_ASSEMBLY
++//     } else {
++//       qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_2x2c4__armsimd32);
++//       qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_2x2c4__armsimd32);
++//       qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x2c4__armsimd32);
++//       qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x2c4__armsimd32);
++//       qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_armsimd32_params;
++//       qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//       qc8_gemm_config.mr = 2;
++//       qc8_gemm_config.nr = 2;
++//       qc8_gemm_config.log2_kr = 2;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     #if XNN_PLATFORM_IOS || XNN_PLATFORM_MAC || XNN_PLATFORM_WINDOWS
++//       #if XNN_ENABLE_ASSEMBLY
++//         if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
++//           #if XNN_ENABLE_ARM_DOTPROD
++//             qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x16c4__asm_aarch64_neondot_ld128);
++//             qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x16c4__neondot);
++//             qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x16c4__asm_aarch64_neondot_ld128);
++//             qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x16c4__neondot);
++//             qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
++//             qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//             qc8_gemm_config.mr = 4;
++//             qc8_gemm_config.nr = 16;
++//             qc8_gemm_config.log2_kr = 2;
++//           #endif  // XNN_ENABLE_ARM_DOTPROD
++//         } else {
++//           qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_2x8c8__asm_aarch64_neon_mlal);
++//           qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_2x8c8__asm_aarch64_neon_mlal);
++//           qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c8__asm_aarch64_neon_mlal);
++//           qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c8__asm_aarch64_neon_mlal);
++//           qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
++//           qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//           qc8_gemm_config.mr = 2;
++//           qc8_gemm_config.nr = 8;
++//           qc8_gemm_config.log2_kr = 3;
++//         }
++//       #else  // !XNN_ENABLE_ASSEMBLY
++//         if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
++//           #if XNN_ENABLE_ARM_DOTPROD
++//             qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x16c4__neondot);
++//             qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x16c4__neondot);
++//             qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x16c4__neondot);
++//             qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x16c4__neondot);
++//             qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
++//             qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//             qc8_gemm_config.mr = 4;
++//             qc8_gemm_config.nr = 16;
++//             qc8_gemm_config.log2_kr = 2;
++//           #endif  // XNN_ENABLE_ARM_DOTPROD
++//         } else {
++//           qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_2x8c2s4__neonv8_mlal);
++//           qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_2x8c2s4__neonv8_mlal);
++//           qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c2s4__neonv8_mlal);
++//           qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c2s4__neonv8_mlal);
++//           qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
++//           qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//           qc8_gemm_config.mr = 2;
++//           qc8_gemm_config.nr = 8;
++//           qc8_gemm_config.log2_kr = 1;
++//           qc8_gemm_config.log2_sr = 2;
++//         }
++//       #endif  // XNN_ENABLE_ASSEMBLY
++//     #else  // !XNN_PLATFORM_IOS && !XNN_PLATFORM_MAC
++//       #if XNN_ENABLE_ASSEMBLY
++//         if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
++//           #if XNN_ENABLE_ARM_DOTPROD
++//             switch (cpuinfo_get_core(0)->uarch) {
++//               case cpuinfo_uarch_cortex_a55:
++//                 qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x16c4__asm_aarch64_neondot_cortex_a55);
++//                 qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x16c4__asm_aarch64_neondot_cortex_a55);
++//                 break;
++//               case cpuinfo_uarch_cortex_x1:
++//               case cpuinfo_uarch_cortex_a78:
++//                 qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x16c4__asm_aarch64_neondot_ld128);
++//                 qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x16c4__asm_aarch64_neondot_ld128);
++//                 break;
++//               default:
++//                 qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x16c4__asm_aarch64_neondot_ld64);
++//                 qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x16c4__asm_aarch64_neondot_ld64);
++//                 break;
++//             }
++//             qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x16c4__neondot);
++//             qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x16c4__neondot);
++//             qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
++//             qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//             qc8_gemm_config.mr = 4;
++//             qc8_gemm_config.nr = 16;
++//             qc8_gemm_config.log2_kr = 2;
++//           #endif  // XNN_ENABLE_ARM_DOTPROD
++//         } else {
++//           switch (cpuinfo_get_core(0)->uarch) {
++//             case cpuinfo_uarch_cortex_a35:
++//             case cpuinfo_uarch_kryo:
++//               qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x16__asm_aarch64_neon_mlal_lane_ld64);
++//               qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x16__asm_aarch64_neon_mlal_lane_ld64);
++//               qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x16__neonv8_mlal_lane);
++//               qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x16__neonv8_mlal_lane);
++//               qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
++//               qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//               qc8_gemm_config.mr = 4;
++//               qc8_gemm_config.nr = 16;
++//               break;
+ 
+-            case cpuinfo_uarch_cortex_a53:
+-            case cpuinfo_uarch_cortex_a55r0:
+-              qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x16__asm_aarch64_neon_mlal_lane_cortex_a53);
+-              qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x16__asm_aarch64_neon_mlal_lane_cortex_a53);
+-              qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x16__neonv8_mlal_lane);
+-              qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x16__neonv8_mlal_lane);
+-              qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
+-              qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-              qc8_gemm_config.mr = 4;
+-              qc8_gemm_config.nr = 16;
+-              break;
++//             case cpuinfo_uarch_cortex_a53:
++//             case cpuinfo_uarch_cortex_a55r0:
++//               qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x16__asm_aarch64_neon_mlal_lane_cortex_a53);
++//               qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x16__asm_aarch64_neon_mlal_lane_cortex_a53);
++//               qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x16__neonv8_mlal_lane);
++//               qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x16__neonv8_mlal_lane);
++//               qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
++//               qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//               qc8_gemm_config.mr = 4;
++//               qc8_gemm_config.nr = 16;
++//               break;
+ 
+-            case cpuinfo_uarch_cortex_a72:
+-            case cpuinfo_uarch_cortex_a73:
+-              qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_2x8c8__asm_aarch64_neon_mlal_prfm);
+-              qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_2x8c8__asm_aarch64_neon_mlal_prfm);
+-              qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c8__asm_aarch64_neon_mlal_prfm);
+-              qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c8__asm_aarch64_neon_mlal_prfm);
+-              qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
+-              qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-              qc8_gemm_config.mr = 2;
+-              qc8_gemm_config.nr = 8;
+-              qc8_gemm_config.log2_kr = 3;
+-              break;
++//             case cpuinfo_uarch_cortex_a72:
++//             case cpuinfo_uarch_cortex_a73:
++//               qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_2x8c8__asm_aarch64_neon_mlal_prfm);
++//               qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_2x8c8__asm_aarch64_neon_mlal_prfm);
++//               qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c8__asm_aarch64_neon_mlal_prfm);
++//               qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c8__asm_aarch64_neon_mlal_prfm);
++//               qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
++//               qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//               qc8_gemm_config.mr = 2;
++//               qc8_gemm_config.nr = 8;
++//               qc8_gemm_config.log2_kr = 3;
++//               break;
+ 
+-            default:
+-              qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_2x8c8__asm_aarch64_neon_mlal);
+-              qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_2x8c8__asm_aarch64_neon_mlal);
+-              qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c8__asm_aarch64_neon_mlal);
+-              qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c8__asm_aarch64_neon_mlal);
+-              qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
+-              qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-              qc8_gemm_config.mr = 2;
+-              qc8_gemm_config.nr = 8;
+-              qc8_gemm_config.log2_kr = 3;
+-              break;
+-          }
+-        }
+-        #if XNN_MAX_UARCH_TYPES > 1
+-        {
+-          /* Choose micro-kernels for little cores according to micro-kernel specification for the big core */
+-          const uint32_t mr = qc8_gemm_config.mr;
+-          const uint32_t nr = qc8_gemm_config.nr;
+-          const uint32_t log2_kr = qc8_gemm_config.log2_kr;
+-          for (size_t i = 1; i < XNN_MAX_UARCH_TYPES; i++) {
+-            const struct cpuinfo_uarch_info* uarch_info = cpuinfo_get_uarch(i);
+-            if (uarch_info == NULL) {
+-              /* No more microarchitectures in the system */
+-              break;
+-            }
++//             default:
++//               qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_2x8c8__asm_aarch64_neon_mlal);
++//               qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_2x8c8__asm_aarch64_neon_mlal);
++//               qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c8__asm_aarch64_neon_mlal);
++//               qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c8__asm_aarch64_neon_mlal);
++//               qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
++//               qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//               qc8_gemm_config.mr = 2;
++//               qc8_gemm_config.nr = 8;
++//               qc8_gemm_config.log2_kr = 3;
++//               break;
++//           }
++//         }
++//         #if XNN_MAX_UARCH_TYPES > 1
++//         {
++//           /* Choose micro-kernels for little cores according to micro-kernel specification for the big core */
++//           const uint32_t mr = qc8_gemm_config.mr;
++//           const uint32_t nr = qc8_gemm_config.nr;
++//           const uint32_t log2_kr = qc8_gemm_config.log2_kr;
++//           for (size_t i = 1; i < XNN_MAX_UARCH_TYPES; i++) {
++//             const struct cpuinfo_uarch_info* uarch_info = cpuinfo_get_uarch(i);
++//             if (uarch_info == NULL) {
++//               /* No more microarchitectures in the system */
++//               break;
++//             }
+ 
+-            switch (uarch_info->uarch) {
+-              case cpuinfo_uarch_cortex_a53:
+-              case cpuinfo_uarch_cortex_a55r0:
+-                if (mr == 2 && nr == 8 && log2_kr == 3) {
+-                  qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)].function[i] = (xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_2x8c8__asm_aarch64_neon_mlal_prfm_cortex_a53;
+-                  qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)].function[i] = (xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_2x8c8__asm_aarch64_neon_mlal_prfm_cortex_a53;
+-                  qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c8__asm_aarch64_neon_mlal_prfm_cortex_a53;
+-                  qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c8__asm_aarch64_neon_mlal_prfm_cortex_a53;
+-                }
+-                break;
++//             switch (uarch_info->uarch) {
++//               case cpuinfo_uarch_cortex_a53:
++//               case cpuinfo_uarch_cortex_a55r0:
++//                 if (mr == 2 && nr == 8 && log2_kr == 3) {
++//                   qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)].function[i] = (xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_2x8c8__asm_aarch64_neon_mlal_prfm_cortex_a53;
++//                   qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)].function[i] = (xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_2x8c8__asm_aarch64_neon_mlal_prfm_cortex_a53;
++//                   qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c8__asm_aarch64_neon_mlal_prfm_cortex_a53;
++//                   qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c8__asm_aarch64_neon_mlal_prfm_cortex_a53;
++//                 }
++//                 break;
+ 
+-              case cpuinfo_uarch_cortex_a55:
+-                #if XNN_ENABLE_ARM_DOTPROD
+-                  if (mr == 4 && nr == 16 && log2_kr == 2 && hardware_config->use_arm_neon_dot) {
+-                    qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x16c4__asm_aarch64_neondot_cortex_a55;
+-                    qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x16c4__asm_aarch64_neondot_cortex_a55;
+-                    qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x16c4__neondot;
+-                    qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x16c4__neondot;
+-                  }
+-                #endif  // XNN_ENABLE_ARM_DOTPROD
+-                break;
+-              default:
+-                break;
+-            }
+-          }
+-        }
+-        #endif  // XNN_MAX_UARCH_TYPES > 1
+-      #else  // !XNN_ENABLE_ASSEMBLY
+-        if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
+-          #if XNN_ENABLE_ARM_DOTPROD
+-            qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x16c4__neondot);
+-            qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x16c4__neondot);
+-            qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x16c4__neondot);
+-            qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x16c4__neondot);
+-            qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
+-            qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-            qc8_gemm_config.mr = 4;
+-            qc8_gemm_config.nr = 16;
+-            qc8_gemm_config.log2_kr = 2;
+-          #endif  // XNN_ENABLE_ARM_DOTPROD
+-        } else {
+-          qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_2x8c2s4__neonv8_mlal);
+-          qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_2x8c2s4__neonv8_mlal);
+-          qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c2s4__neonv8_mlal);
+-          qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c2s4__neonv8_mlal);
+-          qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
+-          qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-          qc8_gemm_config.mr = 2;
+-          qc8_gemm_config.nr = 8;
+-          qc8_gemm_config.log2_kr = 1;
+-          qc8_gemm_config.log2_sr = 2;
+-        }
+-      #endif  // XNN_ENABLE_ASSEMBLY
+-    #endif  // XNN_PLATFORM_IOS || XNN_PLATFORM_MAC || XNN_PLATFORM_WINDOWS
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512skx) {
+-      qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x16c8__avx512skx);
+-      qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x16c8__avx512skx);
+-      qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x16c8__avx512skx);
+-      qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x16c8__avx512skx);
+-      qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_avx512_params;
+-      qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-      qc8_gemm_config.mr = 4;
+-      qc8_gemm_config.nr = 16;
+-      qc8_gemm_config.log2_kr = 3;
+-    } else if (hardware_config->use_x86_xop) {
+-      // XOP should be checked before AVX2: AMD Excavator supports both, but performs better with XOP microkernels
+-      qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_2x4c8__xop_ld64);
+-      qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_2x4c8__xop_ld64);
+-      qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x4c8__xop_ld64);
+-      qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x4c8__xop_ld64);
+-      qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse4_params;
+-      qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-      qc8_gemm_config.mr = 2;
+-      qc8_gemm_config.nr = 4;
+-      qc8_gemm_config.log2_kr = 3;
+-    } else if (hardware_config->use_x86_avx2) {
+-      qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_3x8c8__avx2);
+-      qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_3x8c8__avx2);
+-      qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c8__avx2);
+-      qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c8__avx2);
+-      qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_avx2_params;
+-      qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-      qc8_gemm_config.mr = 3;
+-      qc8_gemm_config.nr = 8;
+-      qc8_gemm_config.log2_kr = 3;
+-    } else if (hardware_config->use_x86_avx) {
+-      qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_2x4c8__avx_ld128);
+-      qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_2x4c8__avx_ld128);
+-      qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x4c8__avx_ld128);
+-      qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x4c8__avx_ld128);
+-      qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse4_params;
+-      qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-      qc8_gemm_config.mr = 2;
+-      qc8_gemm_config.nr = 4;
+-      qc8_gemm_config.log2_kr = 3;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_3x4c8__sse41_ld64);
+-      qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_3x4c8__sse41_ld64);
+-      qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x4c8__sse41_ld64);
+-      qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x4c8__sse41_ld64);
+-      qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse4_params;
+-      qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-      qc8_gemm_config.mr = 3;
+-      qc8_gemm_config.nr = 4;
+-      qc8_gemm_config.log2_kr = 3;
+-    } else {
+-      qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_3x4c8__sse2_ld64);
+-      qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_3x4c8__sse2_ld64);
+-      qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x4c8__sse2_ld64);
+-      qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x4c8__sse2_ld64);
+-      qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse2_params;
+-      qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-      qc8_gemm_config.mr = 3;
+-      qc8_gemm_config.nr = 4;
+-      qc8_gemm_config.log2_kr = 3;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    #if XNN_ARCH_WASMRELAXEDSIMD
+-      const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-      assert(hardware_config != NULL);
+-      if (hardware_config->use_wasm_sdot) {
+-        qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x4c16__wasmsdot);
+-        qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x4c16__wasmsdot);
+-        qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x4c16__wasmsdot);
+-        qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x4c16__wasmsdot);
+-        qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_wasmsimd_params;
+-        qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-        qc8_gemm_config.mr = 4;
+-        qc8_gemm_config.nr = 4;
+-        qc8_gemm_config.log2_kr = 4;
+-      } else {
+-        qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x4c2s4__wasmsimd_dot16x2_ld128);
+-        qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x4c2s4__wasmsimd_dot16x2_ld128);
+-        qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x4c2s4__wasmsimd_dot16x2_ld128);
+-        qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x4c2s4__wasmsimd_dot16x2_ld128);
+-        qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_wasmsimd_params;
+-        qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-        qc8_gemm_config.mr = 4;
+-        qc8_gemm_config.nr = 4;
+-        qc8_gemm_config.log2_kr = 1;
+-        qc8_gemm_config.log2_sr = 2;
+-      }
+-    #else
+-      qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x4c2s4__wasmsimd_dot16x2_ld128);
+-      qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x4c2s4__wasmsimd_dot16x2_ld128);
+-      qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x4c2s4__wasmsimd_dot16x2_ld128);
+-      qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x4c2s4__wasmsimd_dot16x2_ld128);
+-      qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_wasmsimd_params;
+-      qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-      qc8_gemm_config.mr = 4;
+-      qc8_gemm_config.nr = 4;
+-      qc8_gemm_config.log2_kr = 1;
+-      qc8_gemm_config.log2_sr = 2;
+-    #endif
+-  #elif XNN_ARCH_WASM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_2x2__scalar_imagic);
+-      qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_2x2__scalar_imagic);
+-      qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x2__scalar_imagic);
+-      qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x2__scalar_imagic);
+-      qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_imagic_params;
+-      qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-      qc8_gemm_config.mr = 2;
+-      qc8_gemm_config.nr = 2;
+-    } else {
+-      qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x4__wasm_fmagic);
+-      qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x4__wasm_fmagic);
+-      qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x4__wasm_fmagic);
+-      qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x4__wasm_fmagic);
+-      qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_fmagic_params;
+-      qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-      qc8_gemm_config.mr = 4;
+-      qc8_gemm_config.nr = 4;
+-    }
+-  #elif XNN_ARCH_RISCV
+-    qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_3x4__scalar_lrintf);
+-    qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_3x4__scalar_lrintf);
+-    qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x4__scalar_lrintf);
+-    qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x4__scalar_lrintf);
+-    qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_lrintf_params;
+-    qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-    qc8_gemm_config.mr = 3;
+-    qc8_gemm_config.nr = 4;
+-  #endif
+-}
++//               case cpuinfo_uarch_cortex_a55:
++//                 #if XNN_ENABLE_ARM_DOTPROD
++//                   if (mr == 4 && nr == 16 && log2_kr == 2 && hardware_config->use_arm_neon_dot) {
++//                     qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x16c4__asm_aarch64_neondot_cortex_a55;
++//                     qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x16c4__asm_aarch64_neondot_cortex_a55;
++//                     qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x16c4__neondot;
++//                     qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x16c4__neondot;
++//                   }
++//                 #endif  // XNN_ENABLE_ARM_DOTPROD
++//                 break;
++//               default:
++//                 break;
++//             }
++//           }
++//         }
++//         #endif  // XNN_MAX_UARCH_TYPES > 1
++//       #else  // !XNN_ENABLE_ASSEMBLY
++//         if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
++//           #if XNN_ENABLE_ARM_DOTPROD
++//             qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x16c4__neondot);
++//             qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x16c4__neondot);
++//             qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x16c4__neondot);
++//             qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x16c4__neondot);
++//             qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
++//             qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//             qc8_gemm_config.mr = 4;
++//             qc8_gemm_config.nr = 16;
++//             qc8_gemm_config.log2_kr = 2;
++//           #endif  // XNN_ENABLE_ARM_DOTPROD
++//         } else {
++//           qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_2x8c2s4__neonv8_mlal);
++//           qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_2x8c2s4__neonv8_mlal);
++//           qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c2s4__neonv8_mlal);
++//           qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c2s4__neonv8_mlal);
++//           qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_neonv8_params;
++//           qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//           qc8_gemm_config.mr = 2;
++//           qc8_gemm_config.nr = 8;
++//           qc8_gemm_config.log2_kr = 1;
++//           qc8_gemm_config.log2_sr = 2;
++//         }
++//       #endif  // XNN_ENABLE_ASSEMBLY
++//     #endif  // XNN_PLATFORM_IOS || XNN_PLATFORM_MAC || XNN_PLATFORM_WINDOWS
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512skx) {
++//       qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x16c8__avx512skx);
++//       qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x16c8__avx512skx);
++//       qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x16c8__avx512skx);
++//       qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x16c8__avx512skx);
++//       qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_avx512_params;
++//       qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//       qc8_gemm_config.mr = 4;
++//       qc8_gemm_config.nr = 16;
++//       qc8_gemm_config.log2_kr = 3;
++//     } else if (hardware_config->use_x86_xop) {
++//       // XOP should be checked before AVX2: AMD Excavator supports both, but performs better with XOP microkernels
++//       qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_2x4c8__xop_ld64);
++//       qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_2x4c8__xop_ld64);
++//       qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x4c8__xop_ld64);
++//       qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x4c8__xop_ld64);
++//       qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse4_params;
++//       qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//       qc8_gemm_config.mr = 2;
++//       qc8_gemm_config.nr = 4;
++//       qc8_gemm_config.log2_kr = 3;
++//     } else if (hardware_config->use_x86_avx2) {
++//       qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_3x8c8__avx2);
++//       qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_3x8c8__avx2);
++//       qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x8c8__avx2);
++//       qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x8c8__avx2);
++//       qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_avx2_params;
++//       qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//       qc8_gemm_config.mr = 3;
++//       qc8_gemm_config.nr = 8;
++//       qc8_gemm_config.log2_kr = 3;
++//     } else if (hardware_config->use_x86_avx) {
++//       qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_2x4c8__avx_ld128);
++//       qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_2x4c8__avx_ld128);
++//       qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x4c8__avx_ld128);
++//       qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x4c8__avx_ld128);
++//       qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse4_params;
++//       qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//       qc8_gemm_config.mr = 2;
++//       qc8_gemm_config.nr = 4;
++//       qc8_gemm_config.log2_kr = 3;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_3x4c8__sse41_ld64);
++//       qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_3x4c8__sse41_ld64);
++//       qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x4c8__sse41_ld64);
++//       qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x4c8__sse41_ld64);
++//       qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse4_params;
++//       qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//       qc8_gemm_config.mr = 3;
++//       qc8_gemm_config.nr = 4;
++//       qc8_gemm_config.log2_kr = 3;
++//     } else {
++//       qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_3x4c8__sse2_ld64);
++//       qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_3x4c8__sse2_ld64);
++//       qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x4c8__sse2_ld64);
++//       qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x4c8__sse2_ld64);
++//       qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_sse2_params;
++//       qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//       qc8_gemm_config.mr = 3;
++//       qc8_gemm_config.nr = 4;
++//       qc8_gemm_config.log2_kr = 3;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     #if XNN_ARCH_WASMRELAXEDSIMD
++//       const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//       assert(hardware_config != NULL);
++//       if (hardware_config->use_wasm_sdot) {
++//         qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x4c16__wasmsdot);
++//         qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x4c16__wasmsdot);
++//         qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x4c16__wasmsdot);
++//         qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x4c16__wasmsdot);
++//         qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_wasmsimd_params;
++//         qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//         qc8_gemm_config.mr = 4;
++//         qc8_gemm_config.nr = 4;
++//         qc8_gemm_config.log2_kr = 4;
++//       } else {
++//         qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x4c2s4__wasmsimd_dot16x2_ld128);
++//         qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x4c2s4__wasmsimd_dot16x2_ld128);
++//         qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x4c2s4__wasmsimd_dot16x2_ld128);
++//         qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x4c2s4__wasmsimd_dot16x2_ld128);
++//         qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_wasmsimd_params;
++//         qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//         qc8_gemm_config.mr = 4;
++//         qc8_gemm_config.nr = 4;
++//         qc8_gemm_config.log2_kr = 1;
++//         qc8_gemm_config.log2_sr = 2;
++//       }
++//     #else
++//       qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x4c2s4__wasmsimd_dot16x2_ld128);
++//       qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x4c2s4__wasmsimd_dot16x2_ld128);
++//       qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x4c2s4__wasmsimd_dot16x2_ld128);
++//       qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x4c2s4__wasmsimd_dot16x2_ld128);
++//       qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_wasmsimd_params;
++//       qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//       qc8_gemm_config.mr = 4;
++//       qc8_gemm_config.nr = 4;
++//       qc8_gemm_config.log2_kr = 1;
++//       qc8_gemm_config.log2_sr = 2;
++//     #endif
++//   #elif XNN_ARCH_WASM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_2x2__scalar_imagic);
++//       qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_2x2__scalar_imagic);
++//       qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x2__scalar_imagic);
++//       qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x2__scalar_imagic);
++//       qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_imagic_params;
++//       qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//       qc8_gemm_config.mr = 2;
++//       qc8_gemm_config.nr = 2;
++//     } else {
++//       qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_4x4__wasm_fmagic);
++//       qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_4x4__wasm_fmagic);
++//       qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x4__wasm_fmagic);
++//       qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x4__wasm_fmagic);
++//       qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_fmagic_params;
++//       qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//       qc8_gemm_config.mr = 4;
++//       qc8_gemm_config.nr = 4;
++//     }
++//   #elif XNN_ARCH_RISCV
++//     qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_3x4__scalar_lrintf);
++//     qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_3x4__scalar_lrintf);
++//     qc8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qc8_gemm_minmax_fp32_ukernel_1x4__scalar_lrintf);
++//     qc8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qc8_igemm_minmax_fp32_ukernel_1x4__scalar_lrintf);
++//     qc8_gemm_config.init.qc8 = xnn_init_qc8_conv_minmax_fp32_scalar_lrintf_params;
++//     qc8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//     qc8_gemm_config.mr = 3;
++//     qc8_gemm_config.nr = 4;
++//   #endif
++// }
+ 
+-static void init_qs8_gemm_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      #if XNN_ENABLE_ASSEMBLY
+-        if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
+-          #if XNN_ENABLE_ARM_DOTPROD
+-            switch (cpuinfo_get_uarch(0)->uarch) {
+-              case cpuinfo_uarch_cortex_a55:
+-                qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x8c4__asm_aarch32_neondot_cortex_a55);
+-                qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x8c4__asm_aarch32_neondot_cortex_a55);
+-                qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8c4__neondot);
+-                qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8c4__neondot);
+-                qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
+-                qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-                qs8_gemm_config.mr = 4;
+-                qs8_gemm_config.nr = 8;
+-                qs8_gemm_config.log2_kr = 2;
+-                break;
+-              default:
+-                qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x8c4__asm_aarch32_neondot_ld64);
+-                qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x8c4__asm_aarch32_neondot_ld64);
+-                qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8c4__neondot);
+-                qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8c4__neondot);
+-                qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
+-                qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-                qs8_gemm_config.mr = 4;
+-                qs8_gemm_config.nr = 8;
+-                qs8_gemm_config.log2_kr = 2;
+-                break;
+-            }
+-          #endif  // XNN_ENABLE_ARM_DOTPROD
+-        } else {
+-          switch (cpuinfo_get_uarch(0)->uarch) {
+-            case cpuinfo_uarch_cortex_a5:
+-            case cpuinfo_uarch_cortex_a7:
+-            case cpuinfo_uarch_krait:
+-            case cpuinfo_uarch_kryo:
+-              qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
+-              qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
+-              qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
+-              qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
+-              qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
+-              qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-              qs8_gemm_config.mr = 4;
+-              qs8_gemm_config.nr = 8;
+-              break;
+-            case cpuinfo_uarch_cortex_a32:
+-            case cpuinfo_uarch_cortex_a35:
+-              qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_cortex_a7);
+-              qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_cortex_a7);
+-              qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
+-              qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
+-              qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
+-              qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-              qs8_gemm_config.mr = 4;
+-              qs8_gemm_config.nr = 8;
+-              break;
+-            case cpuinfo_uarch_cortex_a53:
+-            case cpuinfo_uarch_cortex_a57:
+-              qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a53);
+-              qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a53);
+-              qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
+-              qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
+-              qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
+-              qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-              qs8_gemm_config.mr = 4;
+-              qs8_gemm_config.nr = 8;
+-              break;
+-            case cpuinfo_uarch_cortex_a55r0:
+-              qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_cortex_a53);
+-              qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_cortex_a53);
+-              qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
+-              qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
+-              qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
+-              qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-              qs8_gemm_config.mr = 4;
+-              qs8_gemm_config.nr = 8;
+-              break;
+-            case cpuinfo_uarch_cortex_a72:
+-              qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_2x8c2s4__neon_mlal);
+-              qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_2x8c2s4__neon_mlal);
+-              qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8c2s4__neon_mlal);
+-              qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8c2s4__neon_mlal);
+-              qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
+-              qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-              qs8_gemm_config.mr = 2;
+-              qs8_gemm_config.nr = 8;
+-              qs8_gemm_config.log2_kr = 1;
+-              qs8_gemm_config.log2_sr = 2;
+-              break;
+-            case cpuinfo_uarch_exynos_m1:
+-            case cpuinfo_uarch_exynos_m2:
+-            case cpuinfo_uarch_exynos_m3:
+-              qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_ld64);
+-              qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_ld64);
+-              qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
+-              qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
+-              qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
+-              qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-              qs8_gemm_config.mr = 4;
+-              qs8_gemm_config.nr = 8;
+-              break;
+-            default:
+-              qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_ld64);
+-              qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_ld64);
+-              qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
+-              qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
+-              qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
+-              qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-              qs8_gemm_config.mr = 4;
+-              qs8_gemm_config.nr = 8;
+-              break;
+-          }
+-        }
+-        #if XNN_MAX_UARCH_TYPES > 1
+-        {
+-          /* Choose micro-kernels for little cores according to micro-kernel specification for the big core */
+-          const uint32_t mr = qs8_gemm_config.mr;
+-          const uint32_t nr = qs8_gemm_config.nr;
+-          const uint32_t log2_kr = qs8_gemm_config.log2_kr;
+-          for (size_t i = 1; i < XNN_MAX_UARCH_TYPES; i++) {
+-            const struct cpuinfo_uarch_info* uarch_info = cpuinfo_get_uarch(i);
+-            if (uarch_info == NULL) {
+-              /* No more microarchitectures in the system */
+-              break;
+-            }
++// static void init_qs8_gemm_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       #if XNN_ENABLE_ASSEMBLY
++//         if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
++//           #if XNN_ENABLE_ARM_DOTPROD
++//             switch (cpuinfo_get_uarch(0)->uarch) {
++//               case cpuinfo_uarch_cortex_a55:
++//                 qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x8c4__asm_aarch32_neondot_cortex_a55);
++//                 qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x8c4__asm_aarch32_neondot_cortex_a55);
++//                 qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8c4__neondot);
++//                 qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8c4__neondot);
++//                 qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
++//                 qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//                 qs8_gemm_config.mr = 4;
++//                 qs8_gemm_config.nr = 8;
++//                 qs8_gemm_config.log2_kr = 2;
++//                 break;
++//               default:
++//                 qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x8c4__asm_aarch32_neondot_ld64);
++//                 qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x8c4__asm_aarch32_neondot_ld64);
++//                 qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8c4__neondot);
++//                 qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8c4__neondot);
++//                 qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
++//                 qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//                 qs8_gemm_config.mr = 4;
++//                 qs8_gemm_config.nr = 8;
++//                 qs8_gemm_config.log2_kr = 2;
++//                 break;
++//             }
++//           #endif  // XNN_ENABLE_ARM_DOTPROD
++//         } else {
++//           switch (cpuinfo_get_uarch(0)->uarch) {
++//             case cpuinfo_uarch_cortex_a5:
++//             case cpuinfo_uarch_cortex_a7:
++//             case cpuinfo_uarch_krait:
++//             case cpuinfo_uarch_kryo:
++//               qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
++//               qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
++//               qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
++//               qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
++//               qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
++//               qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//               qs8_gemm_config.mr = 4;
++//               qs8_gemm_config.nr = 8;
++//               break;
++//             case cpuinfo_uarch_cortex_a32:
++//             case cpuinfo_uarch_cortex_a35:
++//               qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_cortex_a7);
++//               qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_cortex_a7);
++//               qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
++//               qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
++//               qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
++//               qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//               qs8_gemm_config.mr = 4;
++//               qs8_gemm_config.nr = 8;
++//               break;
++//             case cpuinfo_uarch_cortex_a53:
++//             case cpuinfo_uarch_cortex_a57:
++//               qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a53);
++//               qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a53);
++//               qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
++//               qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
++//               qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
++//               qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//               qs8_gemm_config.mr = 4;
++//               qs8_gemm_config.nr = 8;
++//               break;
++//             case cpuinfo_uarch_cortex_a55r0:
++//               qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_cortex_a53);
++//               qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_cortex_a53);
++//               qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
++//               qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
++//               qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
++//               qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//               qs8_gemm_config.mr = 4;
++//               qs8_gemm_config.nr = 8;
++//               break;
++//             case cpuinfo_uarch_cortex_a72:
++//               qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_2x8c2s4__neon_mlal);
++//               qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_2x8c2s4__neon_mlal);
++//               qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8c2s4__neon_mlal);
++//               qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8c2s4__neon_mlal);
++//               qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
++//               qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//               qs8_gemm_config.mr = 2;
++//               qs8_gemm_config.nr = 8;
++//               qs8_gemm_config.log2_kr = 1;
++//               qs8_gemm_config.log2_sr = 2;
++//               break;
++//             case cpuinfo_uarch_exynos_m1:
++//             case cpuinfo_uarch_exynos_m2:
++//             case cpuinfo_uarch_exynos_m3:
++//               qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_ld64);
++//               qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_ld64);
++//               qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
++//               qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
++//               qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
++//               qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//               qs8_gemm_config.mr = 4;
++//               qs8_gemm_config.nr = 8;
++//               break;
++//             default:
++//               qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_ld64);
++//               qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_ld64);
++//               qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
++//               qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
++//               qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
++//               qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//               qs8_gemm_config.mr = 4;
++//               qs8_gemm_config.nr = 8;
++//               break;
++//           }
++//         }
++//         #if XNN_MAX_UARCH_TYPES > 1
++//         {
++//           /* Choose micro-kernels for little cores according to micro-kernel specification for the big core */
++//           const uint32_t mr = qs8_gemm_config.mr;
++//           const uint32_t nr = qs8_gemm_config.nr;
++//           const uint32_t log2_kr = qs8_gemm_config.log2_kr;
++//           for (size_t i = 1; i < XNN_MAX_UARCH_TYPES; i++) {
++//             const struct cpuinfo_uarch_info* uarch_info = cpuinfo_get_uarch(i);
++//             if (uarch_info == NULL) {
++//               /* No more microarchitectures in the system */
++//               break;
++//             }
+ 
+-            switch (uarch_info->uarch) {
+-              case cpuinfo_uarch_cortex_a55:
+-                #if XNN_ENABLE_ARM_DOTPROD
+-                  if (mr == 4 && nr == 8 && log2_kr == 2 && hardware_config->use_arm_neon_dot) {
+-                    qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x8c4__asm_aarch32_neondot_cortex_a55;
+-                    qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x8c4__asm_aarch32_neondot_cortex_a55;
+-                    qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8c4__neondot;
+-                    qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8c4__neondot;
+-                  }
+-                #endif  // XNN_ENABLE_ARM_DOTPROD
+-                break;
+-              case cpuinfo_uarch_cortex_a53:
+-                if (mr == 4 && nr == 8 && log2_kr == 0) {
+-                  qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a53;
+-                  qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a53;
+-                  qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7;
+-                  qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7;
+-                }
+-                break;
+-              case cpuinfo_uarch_cortex_a55r0:
+-                if (mr == 4 && nr == 8 && log2_kr == 0) {
+-                  qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_cortex_a53;
+-                  qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_cortex_a53;
+-                  qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7;
+-                  qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7;
+-                }
+-                break;
+-              default:
+-                break;
+-            }
+-          }
+-        }
+-        #endif  // XNN_MAX_UARCH_TYPES > 1
+-      #else  // XNN_ENABLE_ASSEMBLY
+-        if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
+-          #if XNN_ENABLE_ARM_DOTPROD
+-            qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x8c4__neondot);
+-            qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x8c4__neondot);
+-            qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8c4__neondot);
+-            qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8c4__neondot);
+-            qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
+-            qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-            qs8_gemm_config.mr = 4;
+-            qs8_gemm_config.nr = 8;
+-            qs8_gemm_config.log2_kr = 2;
+-          #endif  // XNN_ENABLE_ARM_DOTPROD
+-        } else {
+-          qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_2x8c2s4__neon_mlal);
+-          qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_2x8c2s4__neon_mlal);
+-          qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8c2s4__neon_mlal);
+-          qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8c2s4__neon_mlal);
+-          qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
+-          qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-          qs8_gemm_config.mr = 2;
+-          qs8_gemm_config.nr = 8;
+-          qs8_gemm_config.log2_kr = 1;
+-          qs8_gemm_config.log2_sr = 2;
+-        }
+-      #endif  // XNN_ENABLE_ASSEMBLY
+-    } else {
+-      qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_2x2c4__armsimd32);
+-      qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_2x2c4__armsimd32);
+-      qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_1x2c4__armsimd32);
+-      qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_1x2c4__armsimd32);
+-      qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_fp32_armsimd32_params;
+-      qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-      qs8_gemm_config.mr = 2;
+-      qs8_gemm_config.nr = 2;
+-      qs8_gemm_config.log2_kr = 2;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    #if XNN_PLATFORM_IOS || XNN_PLATFORM_MAC || XNN_PLATFORM_WINDOWS
+-      #if XNN_ENABLE_ASSEMBLY
+-        if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
+-          #if XNN_ENABLE_ARM_DOTPROD
+-            qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_ld128);
+-            qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x16c4__neondot);
+-            qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_ld128);
+-            qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x16c4__neondot);
+-            qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
+-            qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-            qs8_gemm_config.mr = 4;
+-            qs8_gemm_config.nr = 16;
+-            qs8_gemm_config.log2_kr = 2;
+-          #endif  // XNN_ENABLE_ARM_DOTPROD
+-        } else {
+-          qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_2x8c8__asm_aarch64_neon_mlal);
+-          qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_2x8c8__asm_aarch64_neon_mlal);
+-          qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8c8__asm_aarch64_neon_mlal);
+-          qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8c8__asm_aarch64_neon_mlal);
+-          qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
+-          qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-          qs8_gemm_config.mr = 2;
+-          qs8_gemm_config.nr = 8;
+-          qs8_gemm_config.log2_kr = 3;
+-        }
+-      #else  // !XNN_ENABLE_ASSEMBLY
+-        if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
+-          #if XNN_ENABLE_ARM_DOTPROD
+-            qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x16c4__neondot);
+-            qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x16c4__neondot);
+-            qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x16c4__neondot);
+-            qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x16c4__neondot);
+-            qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
+-            qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-            qs8_gemm_config.mr = 4;
+-            qs8_gemm_config.nr = 16;
+-            qs8_gemm_config.log2_kr = 2;
+-          #endif  // XNN_ENABLE_ARM_DOTPROD
+-        } else {
+-          qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_2x8c2s4__neon_mlal);
+-          qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_2x8c2s4__neon_mlal);
+-          qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8c2s4__neon_mlal);
+-          qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8c2s4__neon_mlal);
+-          qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
+-          qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-          qs8_gemm_config.mr = 2;
+-          qs8_gemm_config.nr = 8;
+-          qs8_gemm_config.log2_kr = 1;
+-          qs8_gemm_config.log2_sr = 2;
+-        }
+-      #endif  // XNN_ENABLE_ASSEMBLY
+-    #else  // !XNN_PLATFORM_IOS && !XNN_PLATFORM_MAC
+-      #if XNN_ENABLE_ASSEMBLY
+-        if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
+-          #if XNN_ENABLE_ARM_DOTPROD
+-            switch (cpuinfo_get_core(0)->uarch) {
+-              case cpuinfo_uarch_cortex_a55:
+-                qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_cortex_a55);
+-                qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_cortex_a55);
+-                break;
+-              case cpuinfo_uarch_cortex_x1:
+-              case cpuinfo_uarch_cortex_a78:
+-                qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_ld128);
+-                qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_ld128);
+-                break;
+-              default:
+-                qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_ld64);
+-                qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_ld64);
+-                break;
+-            }
+-            qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x16c4__neondot);
+-            qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x16c4__neondot);
+-            qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
+-            qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-            qs8_gemm_config.mr = 4;
+-            qs8_gemm_config.nr = 16;
+-            qs8_gemm_config.log2_kr = 2;
+-          #endif  // XNN_ENABLE_ARM_DOTPROD
+-        } else {
+-          switch (cpuinfo_get_core(0)->uarch) {
+-            case cpuinfo_uarch_cortex_a35:
+-            case cpuinfo_uarch_kryo:
+-              qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x16__asm_aarch64_neon_mlal_lane_ld64);
+-              qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x16__asm_aarch64_neon_mlal_lane_ld64);
+-              qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x16__neon_mlal_lane);
+-              qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x16__neon_mlal_lane);
+-              qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
+-              qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-              qs8_gemm_config.mr = 4;
+-              qs8_gemm_config.nr = 16;
+-              break;
++//             switch (uarch_info->uarch) {
++//               case cpuinfo_uarch_cortex_a55:
++//                 #if XNN_ENABLE_ARM_DOTPROD
++//                   if (mr == 4 && nr == 8 && log2_kr == 2 && hardware_config->use_arm_neon_dot) {
++//                     qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x8c4__asm_aarch32_neondot_cortex_a55;
++//                     qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x8c4__asm_aarch32_neondot_cortex_a55;
++//                     qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8c4__neondot;
++//                     qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8c4__neondot;
++//                   }
++//                 #endif  // XNN_ENABLE_ARM_DOTPROD
++//                 break;
++//               case cpuinfo_uarch_cortex_a53:
++//                 if (mr == 4 && nr == 8 && log2_kr == 0) {
++//                   qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a53;
++//                   qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a53;
++//                   qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7;
++//                   qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7;
++//                 }
++//                 break;
++//               case cpuinfo_uarch_cortex_a55r0:
++//                 if (mr == 4 && nr == 8 && log2_kr == 0) {
++//                   qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_cortex_a53;
++//                   qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_cortex_a53;
++//                   qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7;
++//                   qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7;
++//                 }
++//                 break;
++//               default:
++//                 break;
++//             }
++//           }
++//         }
++//         #endif  // XNN_MAX_UARCH_TYPES > 1
++//       #else  // XNN_ENABLE_ASSEMBLY
++//         if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
++//           #if XNN_ENABLE_ARM_DOTPROD
++//             qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x8c4__neondot);
++//             qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x8c4__neondot);
++//             qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8c4__neondot);
++//             qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8c4__neondot);
++//             qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
++//             qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//             qs8_gemm_config.mr = 4;
++//             qs8_gemm_config.nr = 8;
++//             qs8_gemm_config.log2_kr = 2;
++//           #endif  // XNN_ENABLE_ARM_DOTPROD
++//         } else {
++//           qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_2x8c2s4__neon_mlal);
++//           qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_2x8c2s4__neon_mlal);
++//           qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8c2s4__neon_mlal);
++//           qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8c2s4__neon_mlal);
++//           qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
++//           qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//           qs8_gemm_config.mr = 2;
++//           qs8_gemm_config.nr = 8;
++//           qs8_gemm_config.log2_kr = 1;
++//           qs8_gemm_config.log2_sr = 2;
++//         }
++//       #endif  // XNN_ENABLE_ASSEMBLY
++//     } else {
++//       qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_2x2c4__armsimd32);
++//       qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_2x2c4__armsimd32);
++//       qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_1x2c4__armsimd32);
++//       qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_1x2c4__armsimd32);
++//       qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_fp32_armsimd32_params;
++//       qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//       qs8_gemm_config.mr = 2;
++//       qs8_gemm_config.nr = 2;
++//       qs8_gemm_config.log2_kr = 2;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     #if XNN_PLATFORM_IOS || XNN_PLATFORM_MAC || XNN_PLATFORM_WINDOWS
++//       #if XNN_ENABLE_ASSEMBLY
++//         if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
++//           #if XNN_ENABLE_ARM_DOTPROD
++//             qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_ld128);
++//             qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x16c4__neondot);
++//             qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_ld128);
++//             qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x16c4__neondot);
++//             qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
++//             qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//             qs8_gemm_config.mr = 4;
++//             qs8_gemm_config.nr = 16;
++//             qs8_gemm_config.log2_kr = 2;
++//           #endif  // XNN_ENABLE_ARM_DOTPROD
++//         } else {
++//           qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_2x8c8__asm_aarch64_neon_mlal);
++//           qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_2x8c8__asm_aarch64_neon_mlal);
++//           qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8c8__asm_aarch64_neon_mlal);
++//           qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8c8__asm_aarch64_neon_mlal);
++//           qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
++//           qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//           qs8_gemm_config.mr = 2;
++//           qs8_gemm_config.nr = 8;
++//           qs8_gemm_config.log2_kr = 3;
++//         }
++//       #else  // !XNN_ENABLE_ASSEMBLY
++//         if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
++//           #if XNN_ENABLE_ARM_DOTPROD
++//             qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x16c4__neondot);
++//             qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x16c4__neondot);
++//             qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x16c4__neondot);
++//             qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x16c4__neondot);
++//             qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
++//             qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//             qs8_gemm_config.mr = 4;
++//             qs8_gemm_config.nr = 16;
++//             qs8_gemm_config.log2_kr = 2;
++//           #endif  // XNN_ENABLE_ARM_DOTPROD
++//         } else {
++//           qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_2x8c2s4__neon_mlal);
++//           qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_2x8c2s4__neon_mlal);
++//           qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8c2s4__neon_mlal);
++//           qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8c2s4__neon_mlal);
++//           qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
++//           qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//           qs8_gemm_config.mr = 2;
++//           qs8_gemm_config.nr = 8;
++//           qs8_gemm_config.log2_kr = 1;
++//           qs8_gemm_config.log2_sr = 2;
++//         }
++//       #endif  // XNN_ENABLE_ASSEMBLY
++//     #else  // !XNN_PLATFORM_IOS && !XNN_PLATFORM_MAC
++//       #if XNN_ENABLE_ASSEMBLY
++//         if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
++//           #if XNN_ENABLE_ARM_DOTPROD
++//             switch (cpuinfo_get_core(0)->uarch) {
++//               case cpuinfo_uarch_cortex_a55:
++//                 qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_cortex_a55);
++//                 qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_cortex_a55);
++//                 break;
++//               case cpuinfo_uarch_cortex_x1:
++//               case cpuinfo_uarch_cortex_a78:
++//                 qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_ld128);
++//                 qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_ld128);
++//                 break;
++//               default:
++//                 qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_ld64);
++//                 qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_ld64);
++//                 break;
++//             }
++//             qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x16c4__neondot);
++//             qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x16c4__neondot);
++//             qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
++//             qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//             qs8_gemm_config.mr = 4;
++//             qs8_gemm_config.nr = 16;
++//             qs8_gemm_config.log2_kr = 2;
++//           #endif  // XNN_ENABLE_ARM_DOTPROD
++//         } else {
++//           switch (cpuinfo_get_core(0)->uarch) {
++//             case cpuinfo_uarch_cortex_a35:
++//             case cpuinfo_uarch_kryo:
++//               qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x16__asm_aarch64_neon_mlal_lane_ld64);
++//               qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x16__asm_aarch64_neon_mlal_lane_ld64);
++//               qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x16__neon_mlal_lane);
++//               qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x16__neon_mlal_lane);
++//               qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
++//               qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//               qs8_gemm_config.mr = 4;
++//               qs8_gemm_config.nr = 16;
++//               break;
+ 
+-            case cpuinfo_uarch_cortex_a53:
+-            case cpuinfo_uarch_cortex_a55r0:
+-              qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x16__asm_aarch64_neon_mlal_lane_cortex_a53);
+-              qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x16__asm_aarch64_neon_mlal_lane_cortex_a53);
+-              qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x16__neon_mlal_lane);
+-              qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x16__neon_mlal_lane);
+-              qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
+-              qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-              qs8_gemm_config.mr = 4;
+-              qs8_gemm_config.nr = 16;
+-              break;
++//             case cpuinfo_uarch_cortex_a53:
++//             case cpuinfo_uarch_cortex_a55r0:
++//               qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x16__asm_aarch64_neon_mlal_lane_cortex_a53);
++//               qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x16__asm_aarch64_neon_mlal_lane_cortex_a53);
++//               qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x16__neon_mlal_lane);
++//               qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x16__neon_mlal_lane);
++//               qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
++//               qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//               qs8_gemm_config.mr = 4;
++//               qs8_gemm_config.nr = 16;
++//               break;
+ 
+-            case cpuinfo_uarch_cortex_a72:
+-            case cpuinfo_uarch_cortex_a73:
+-              qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_2x8c8__asm_aarch64_neon_mlal_prfm);
+-              qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_2x8c8__asm_aarch64_neon_mlal_prfm);
+-              qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8c8__asm_aarch64_neon_mlal_prfm);
+-              qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8c8__asm_aarch64_neon_mlal_prfm);
+-              qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
+-              qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-              qs8_gemm_config.mr = 2;
+-              qs8_gemm_config.nr = 8;
+-              qs8_gemm_config.log2_kr = 3;
+-              break;
++//             case cpuinfo_uarch_cortex_a72:
++//             case cpuinfo_uarch_cortex_a73:
++//               qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_2x8c8__asm_aarch64_neon_mlal_prfm);
++//               qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_2x8c8__asm_aarch64_neon_mlal_prfm);
++//               qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8c8__asm_aarch64_neon_mlal_prfm);
++//               qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8c8__asm_aarch64_neon_mlal_prfm);
++//               qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
++//               qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//               qs8_gemm_config.mr = 2;
++//               qs8_gemm_config.nr = 8;
++//               qs8_gemm_config.log2_kr = 3;
++//               break;
+ 
+-            default:
+-              qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_2x8c8__asm_aarch64_neon_mlal);
+-              qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_2x8c8__asm_aarch64_neon_mlal);
+-              qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8c8__asm_aarch64_neon_mlal);
+-              qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8c8__asm_aarch64_neon_mlal);
+-              qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
+-              qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-              qs8_gemm_config.mr = 2;
+-              qs8_gemm_config.nr = 8;
+-              qs8_gemm_config.log2_kr = 3;
+-              break;
+-          }
+-        }
+-        #if XNN_MAX_UARCH_TYPES > 1
+-        {
+-          /* Choose micro-kernels for little cores according to micro-kernel specification for the big core */
+-          const uint32_t mr = qs8_gemm_config.mr;
+-          const uint32_t nr = qs8_gemm_config.nr;
+-          const uint32_t log2_kr = qs8_gemm_config.log2_kr;
+-          for (size_t i = 1; i < XNN_MAX_UARCH_TYPES; i++) {
+-            const struct cpuinfo_uarch_info* uarch_info = cpuinfo_get_uarch(i);
+-            if (uarch_info == NULL) {
+-              /* No more microarchitectures in the system */
+-              break;
+-            }
++//             default:
++//               qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_2x8c8__asm_aarch64_neon_mlal);
++//               qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_2x8c8__asm_aarch64_neon_mlal);
++//               qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8c8__asm_aarch64_neon_mlal);
++//               qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8c8__asm_aarch64_neon_mlal);
++//               qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
++//               qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//               qs8_gemm_config.mr = 2;
++//               qs8_gemm_config.nr = 8;
++//               qs8_gemm_config.log2_kr = 3;
++//               break;
++//           }
++//         }
++//         #if XNN_MAX_UARCH_TYPES > 1
++//         {
++//           /* Choose micro-kernels for little cores according to micro-kernel specification for the big core */
++//           const uint32_t mr = qs8_gemm_config.mr;
++//           const uint32_t nr = qs8_gemm_config.nr;
++//           const uint32_t log2_kr = qs8_gemm_config.log2_kr;
++//           for (size_t i = 1; i < XNN_MAX_UARCH_TYPES; i++) {
++//             const struct cpuinfo_uarch_info* uarch_info = cpuinfo_get_uarch(i);
++//             if (uarch_info == NULL) {
++//               /* No more microarchitectures in the system */
++//               break;
++//             }
+ 
+-            switch (uarch_info->uarch) {
+-              case cpuinfo_uarch_cortex_a53:
+-              case cpuinfo_uarch_cortex_a55r0:
+-                if (mr == 2 && nr == 8 && log2_kr == 3) {
+-                  qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)].function[i] = (xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_2x8c8__asm_aarch64_neon_mlal_prfm_cortex_a53;
+-                  qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)].function[i] = (xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_2x8c8__asm_aarch64_neon_mlal_prfm_cortex_a53;
+-                  qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8c8__asm_aarch64_neon_mlal_prfm_cortex_a53;
+-                  qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8c8__asm_aarch64_neon_mlal_prfm_cortex_a53;
+-                }
+-                break;
++//             switch (uarch_info->uarch) {
++//               case cpuinfo_uarch_cortex_a53:
++//               case cpuinfo_uarch_cortex_a55r0:
++//                 if (mr == 2 && nr == 8 && log2_kr == 3) {
++//                   qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)].function[i] = (xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_2x8c8__asm_aarch64_neon_mlal_prfm_cortex_a53;
++//                   qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)].function[i] = (xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_2x8c8__asm_aarch64_neon_mlal_prfm_cortex_a53;
++//                   qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8c8__asm_aarch64_neon_mlal_prfm_cortex_a53;
++//                   qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8c8__asm_aarch64_neon_mlal_prfm_cortex_a53;
++//                 }
++//                 break;
+ 
+-              case cpuinfo_uarch_cortex_a55:
+-                #if XNN_ENABLE_ARM_DOTPROD
+-                  if (mr == 4 && nr == 16 && log2_kr == 2 && hardware_config->use_arm_neon_dot) {
+-                    qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_cortex_a55;
+-                    qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_cortex_a55;
+-                    qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x16c4__neondot;
+-                    qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x16c4__neondot;
+-                  }
+-                #endif  // XNN_ENABLE_ARM_DOTPROD
+-                break;
+-              default:
+-                break;
+-            }
+-          }
+-        }
+-        #endif  // XNN_MAX_UARCH_TYPES > 1
+-      #else  // !XNN_ENABLE_ASSEMBLY
+-        if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
+-          #if XNN_ENABLE_ARM_DOTPROD
+-            qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x16c4__neondot);
+-            qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x16c4__neondot);
+-            qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x16c4__neondot);
+-            qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x16c4__neondot);
+-            qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
+-            qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-            qs8_gemm_config.mr = 4;
+-            qs8_gemm_config.nr = 16;
+-            qs8_gemm_config.log2_kr = 2;
+-          #endif  // XNN_ENABLE_ARM_DOTPROD
+-        } else {
+-          qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_2x8c2s4__neon_mlal);
+-          qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_2x8c2s4__neon_mlal);
+-          qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8c2s4__neon_mlal);
+-          qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8c2s4__neon_mlal);
+-          qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
+-          qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-          qs8_gemm_config.mr = 2;
+-          qs8_gemm_config.nr = 8;
+-          qs8_gemm_config.log2_kr = 1;
+-          qs8_gemm_config.log2_sr = 2;
+-        }
+-      #endif  // XNN_ENABLE_ASSEMBLY
+-    #endif  // XNN_PLATFORM_IOS || XNN_PLATFORM_MAC || XNN_PLATFORM_WINDOWS
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512skx) {
+-      qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_4x16c8__avx512skx);
+-      qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_4x16c8__avx512skx);
+-      qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_1x16c8__avx512skx);
+-      qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_1x16c8__avx512skx);
+-      qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_fp32_avx512_params;
+-      qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-      qs8_gemm_config.mr = 4;
+-      qs8_gemm_config.nr = 16;
+-      qs8_gemm_config.log2_kr = 3;
+-    } else if (hardware_config->use_x86_xop) {
+-      // XOP should be checked before AVX2: AMD Excavator supports both, but performs better with XOP microkernels
+-      qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_2x4c8__xop_ld64);
+-      qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_2x4c8__xop_ld64);
+-      qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_1x4c8__xop_ld64);
+-      qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_1x4c8__xop_ld64);
+-      qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_fp32_sse4_params;
+-      qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-      qs8_gemm_config.mr = 2;
+-      qs8_gemm_config.nr = 4;
+-      qs8_gemm_config.log2_kr = 3;
+-    } else if (hardware_config->use_x86_avx2) {
+-      qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_3x8c8__avx2);
+-      qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_3x8c8__avx2);
+-      qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_1x8c8__avx2);
+-      qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_1x8c8__avx2);
+-      qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_fp32_avx2_params;
+-      qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-      qs8_gemm_config.mr = 3;
+-      qs8_gemm_config.nr = 8;
+-      qs8_gemm_config.log2_kr = 3;
+-    } else if (hardware_config->use_x86_avx) {
+-      qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_2x4c8__avx_ld128);
+-      qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_2x4c8__avx_ld128);
+-      qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_1x4c8__avx_ld128);
+-      qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_1x4c8__avx_ld128);
+-      qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_fp32_sse4_params;
+-      qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-      qs8_gemm_config.mr = 2;
+-      qs8_gemm_config.nr = 4;
+-      qs8_gemm_config.log2_kr = 3;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_3x4c8__sse41_ld64);
+-      qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_3x4c8__sse41_ld64);
+-      qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_1x4c8__sse41_ld64);
+-      qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_1x4c8__sse41_ld64);
+-      qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_fp32_sse4_params;
+-      qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-      qs8_gemm_config.mr = 3;
+-      qs8_gemm_config.nr = 4;
+-      qs8_gemm_config.log2_kr = 3;
+-    } else {
+-      qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_3x4c8__sse2_ld64);
+-      qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_3x4c8__sse2_ld64);
+-      qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_1x4c8__sse2_ld64);
+-      qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_1x4c8__sse2_ld64);
+-      qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_fp32_sse2_params;
+-      qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-      qs8_gemm_config.mr = 3;
+-      qs8_gemm_config.nr = 4;
+-      qs8_gemm_config.log2_kr = 3;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    #if XNN_ARCH_WASMRELAXEDSIMD
+-      const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-      assert(hardware_config != NULL);
+-      if (hardware_config->use_wasm_sdot) {
+-        qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_4x4c16__wasmsdot);
+-        qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_4x4c16__wasmsdot);
+-        qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_1x4c16__wasmsdot);
+-        qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_1x4c16__wasmsdot);
+-        qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_fp32_wasmsimd_params;
+-        qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-        qs8_gemm_config.mr = 4;
+-        qs8_gemm_config.nr = 4;
+-        qs8_gemm_config.log2_kr = 4;
+-      } else {
+-        qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_4x4c2s4__wasmsimd_dot16x2_ld128);
+-        qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_4x4c2s4__wasmsimd_dot16x2_ld128);
+-        qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_1x4c2s4__wasmsimd_dot16x2_ld128);
+-        qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_1x4c2s4__wasmsimd_dot16x2_ld128);
+-        qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_fp32_wasmsimd_params;
+-        qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-        qs8_gemm_config.mr = 4;
+-        qs8_gemm_config.nr = 4;
+-        qs8_gemm_config.log2_kr = 1;
+-        qs8_gemm_config.log2_sr = 2;
+-      }
+-    #else
+-      qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_4x4c2s4__wasmsimd_dot16x2_ld128);
+-      qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_4x4c2s4__wasmsimd_dot16x2_ld128);
+-      qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_1x4c2s4__wasmsimd_dot16x2_ld128);
+-      qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_1x4c2s4__wasmsimd_dot16x2_ld128);
+-      qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_fp32_wasmsimd_params;
+-      qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-      qs8_gemm_config.mr = 4;
+-      qs8_gemm_config.nr = 4;
+-      qs8_gemm_config.log2_kr = 1;
+-      qs8_gemm_config.log2_sr = 2;
+-    #endif
+-  #elif XNN_ARCH_WASM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_2x2__scalar_imagic);
+-      qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_2x2__scalar_imagic);
+-      qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_1x2__scalar_imagic);
+-      qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_1x2__scalar_imagic);
+-      qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_fp32_scalar_imagic_params;
+-      qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-      qs8_gemm_config.mr = 2;
+-      qs8_gemm_config.nr = 2;
+-    } else {
+-      qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_4x4__wasm_fmagic);
+-      qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_4x4__wasm_fmagic);
+-      qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_1x4__wasm_fmagic);
+-      qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_1x4__wasm_fmagic);
+-      qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_fp32_scalar_fmagic_params;
+-      qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-      qs8_gemm_config.mr = 4;
+-      qs8_gemm_config.nr = 4;
+-    }
+-  #elif XNN_ARCH_RISCV
+-    qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_3x4__scalar_lrintf);
+-    qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_3x4__scalar_lrintf);
+-    qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_1x4__scalar_lrintf);
+-    qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_1x4__scalar_lrintf);
+-    qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_fp32_scalar_lrintf_params;
+-    qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
+-    qs8_gemm_config.mr = 3;
+-    qs8_gemm_config.nr = 4;
+-  #endif
+-}
++//               case cpuinfo_uarch_cortex_a55:
++//                 #if XNN_ENABLE_ARM_DOTPROD
++//                   if (mr == 4 && nr == 16 && log2_kr == 2 && hardware_config->use_arm_neon_dot) {
++//                     qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_cortex_a55;
++//                     qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_cortex_a55;
++//                     qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x16c4__neondot;
++//                     qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x16c4__neondot;
++//                   }
++//                 #endif  // XNN_ENABLE_ARM_DOTPROD
++//                 break;
++//               default:
++//                 break;
++//             }
++//           }
++//         }
++//         #endif  // XNN_MAX_UARCH_TYPES > 1
++//       #else  // !XNN_ENABLE_ASSEMBLY
++//         if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
++//           #if XNN_ENABLE_ARM_DOTPROD
++//             qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_4x16c4__neondot);
++//             qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x16c4__neondot);
++//             qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_4x16c4__neondot);
++//             qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x16c4__neondot);
++//             qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
++//             qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//             qs8_gemm_config.mr = 4;
++//             qs8_gemm_config.nr = 16;
++//             qs8_gemm_config.log2_kr = 2;
++//           #endif  // XNN_ENABLE_ARM_DOTPROD
++//         } else {
++//           qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_2x8c2s4__neon_mlal);
++//           qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_2x8c2s4__neon_mlal);
++//           qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_rndnu_ukernel_1x8c2s4__neon_mlal);
++//           qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_rndnu_ukernel_1x8c2s4__neon_mlal);
++//           qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_rndnu_neon_params;
++//           qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//           qs8_gemm_config.mr = 2;
++//           qs8_gemm_config.nr = 8;
++//           qs8_gemm_config.log2_kr = 1;
++//           qs8_gemm_config.log2_sr = 2;
++//         }
++//       #endif  // XNN_ENABLE_ASSEMBLY
++//     #endif  // XNN_PLATFORM_IOS || XNN_PLATFORM_MAC || XNN_PLATFORM_WINDOWS
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512skx) {
++//       qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_4x16c8__avx512skx);
++//       qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_4x16c8__avx512skx);
++//       qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_1x16c8__avx512skx);
++//       qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_1x16c8__avx512skx);
++//       qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_fp32_avx512_params;
++//       qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//       qs8_gemm_config.mr = 4;
++//       qs8_gemm_config.nr = 16;
++//       qs8_gemm_config.log2_kr = 3;
++//     } else if (hardware_config->use_x86_xop) {
++//       // XOP should be checked before AVX2: AMD Excavator supports both, but performs better with XOP microkernels
++//       qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_2x4c8__xop_ld64);
++//       qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_2x4c8__xop_ld64);
++//       qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_1x4c8__xop_ld64);
++//       qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_1x4c8__xop_ld64);
++//       qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_fp32_sse4_params;
++//       qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//       qs8_gemm_config.mr = 2;
++//       qs8_gemm_config.nr = 4;
++//       qs8_gemm_config.log2_kr = 3;
++//     } else if (hardware_config->use_x86_avx2) {
++//       qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_3x8c8__avx2);
++//       qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_3x8c8__avx2);
++//       qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_1x8c8__avx2);
++//       qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_1x8c8__avx2);
++//       qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_fp32_avx2_params;
++//       qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//       qs8_gemm_config.mr = 3;
++//       qs8_gemm_config.nr = 8;
++//       qs8_gemm_config.log2_kr = 3;
++//     } else if (hardware_config->use_x86_avx) {
++//       qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_2x4c8__avx_ld128);
++//       qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_2x4c8__avx_ld128);
++//       qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_1x4c8__avx_ld128);
++//       qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_1x4c8__avx_ld128);
++//       qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_fp32_sse4_params;
++//       qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//       qs8_gemm_config.mr = 2;
++//       qs8_gemm_config.nr = 4;
++//       qs8_gemm_config.log2_kr = 3;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_3x4c8__sse41_ld64);
++//       qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_3x4c8__sse41_ld64);
++//       qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_1x4c8__sse41_ld64);
++//       qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_1x4c8__sse41_ld64);
++//       qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_fp32_sse4_params;
++//       qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//       qs8_gemm_config.mr = 3;
++//       qs8_gemm_config.nr = 4;
++//       qs8_gemm_config.log2_kr = 3;
++//     } else {
++//       qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_3x4c8__sse2_ld64);
++//       qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_3x4c8__sse2_ld64);
++//       qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_1x4c8__sse2_ld64);
++//       qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_1x4c8__sse2_ld64);
++//       qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_fp32_sse2_params;
++//       qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//       qs8_gemm_config.mr = 3;
++//       qs8_gemm_config.nr = 4;
++//       qs8_gemm_config.log2_kr = 3;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     #if XNN_ARCH_WASMRELAXEDSIMD
++//       const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//       assert(hardware_config != NULL);
++//       if (hardware_config->use_wasm_sdot) {
++//         qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_4x4c16__wasmsdot);
++//         qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_4x4c16__wasmsdot);
++//         qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_1x4c16__wasmsdot);
++//         qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_1x4c16__wasmsdot);
++//         qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_fp32_wasmsimd_params;
++//         qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//         qs8_gemm_config.mr = 4;
++//         qs8_gemm_config.nr = 4;
++//         qs8_gemm_config.log2_kr = 4;
++//       } else {
++//         qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_4x4c2s4__wasmsimd_dot16x2_ld128);
++//         qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_4x4c2s4__wasmsimd_dot16x2_ld128);
++//         qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_1x4c2s4__wasmsimd_dot16x2_ld128);
++//         qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_1x4c2s4__wasmsimd_dot16x2_ld128);
++//         qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_fp32_wasmsimd_params;
++//         qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//         qs8_gemm_config.mr = 4;
++//         qs8_gemm_config.nr = 4;
++//         qs8_gemm_config.log2_kr = 1;
++//         qs8_gemm_config.log2_sr = 2;
++//       }
++//     #else
++//       qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_4x4c2s4__wasmsimd_dot16x2_ld128);
++//       qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_4x4c2s4__wasmsimd_dot16x2_ld128);
++//       qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_1x4c2s4__wasmsimd_dot16x2_ld128);
++//       qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_1x4c2s4__wasmsimd_dot16x2_ld128);
++//       qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_fp32_wasmsimd_params;
++//       qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//       qs8_gemm_config.mr = 4;
++//       qs8_gemm_config.nr = 4;
++//       qs8_gemm_config.log2_kr = 1;
++//       qs8_gemm_config.log2_sr = 2;
++//     #endif
++//   #elif XNN_ARCH_WASM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_2x2__scalar_imagic);
++//       qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_2x2__scalar_imagic);
++//       qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_1x2__scalar_imagic);
++//       qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_1x2__scalar_imagic);
++//       qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_fp32_scalar_imagic_params;
++//       qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//       qs8_gemm_config.mr = 2;
++//       qs8_gemm_config.nr = 2;
++//     } else {
++//       qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_4x4__wasm_fmagic);
++//       qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_4x4__wasm_fmagic);
++//       qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_1x4__wasm_fmagic);
++//       qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_1x4__wasm_fmagic);
++//       qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_fp32_scalar_fmagic_params;
++//       qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//       qs8_gemm_config.mr = 4;
++//       qs8_gemm_config.nr = 4;
++//     }
++//   #elif XNN_ARCH_RISCV
++//     qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_3x4__scalar_lrintf);
++//     qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_3x4__scalar_lrintf);
++//     qs8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qs8_gemm_minmax_fp32_ukernel_1x4__scalar_lrintf);
++//     qs8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qs8_igemm_minmax_fp32_ukernel_1x4__scalar_lrintf);
++//     qs8_gemm_config.init.qs8 = xnn_init_qs8_conv_minmax_fp32_scalar_lrintf_params;
++//     qs8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qs8_gemm_goi_w;
++//     qs8_gemm_config.mr = 3;
++//     qs8_gemm_config.nr = 4;
++//   #endif
++// }
+ 
+-static void init_qu8_gemm_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      #if XNN_ENABLE_ASSEMBLY
+-        if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
+-          #if XNN_ENABLE_ARM_DOTPROD
+-            qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x8c4__neondot);
+-            qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x8c4__neondot);
+-            qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x8c4__neondot);
+-            qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x8c4__neondot);
+-            qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
+-            qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
+-            qu8_gemm_config.mr = 4;
+-            qu8_gemm_config.nr = 8;
+-            qu8_gemm_config.log2_kr = 2;
+-          #endif  // XNN_ENABLE_ARM_DOTPROD
+-        } else {
+-          switch (cpuinfo_get_uarch(0)->uarch) {
+-            case cpuinfo_uarch_cortex_a5:
+-            case cpuinfo_uarch_cortex_a7:
+-            case cpuinfo_uarch_krait:
+-            case cpuinfo_uarch_kryo:
+-              qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
+-              qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
+-              qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
+-              qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
+-              qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
+-              qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
+-              qu8_gemm_config.mr = 4;
+-              qu8_gemm_config.nr = 8;
+-              break;
+-            case cpuinfo_uarch_cortex_a32:
+-            case cpuinfo_uarch_cortex_a35:
+-              qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_cortex_a7);
+-              qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_cortex_a7);
+-              qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
+-              qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
+-              qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
+-              qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
+-              qu8_gemm_config.mr = 4;
+-              qu8_gemm_config.nr = 8;
+-              break;
+-            case cpuinfo_uarch_cortex_a53:
+-            case cpuinfo_uarch_cortex_a57:
+-            case cpuinfo_uarch_cortex_a72:
+-              qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a53);
+-              qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a53);
+-              qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
+-              qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
+-              qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
+-              qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
+-              qu8_gemm_config.mr = 4;
+-              qu8_gemm_config.nr = 8;
+-              break;
+-            case cpuinfo_uarch_cortex_a55r0:
+-              qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_cortex_a53);
+-              qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_cortex_a53);
+-              qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
+-              qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
+-              qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
+-              qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
+-              qu8_gemm_config.mr = 4;
+-              qu8_gemm_config.nr = 8;
+-              break;
+-            case cpuinfo_uarch_exynos_m1:
+-            case cpuinfo_uarch_exynos_m2:
+-            case cpuinfo_uarch_exynos_m3:
+-              qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_ld64);
+-              qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_ld64);
+-              qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
+-              qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
+-              qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
+-              qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
+-              qu8_gemm_config.mr = 4;
+-              qu8_gemm_config.nr = 8;
+-              break;
+-            default:
+-              qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_ld64);
+-              qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_ld64);
+-              qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
+-              qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
+-              qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
+-              qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
+-              qu8_gemm_config.mr = 4;
+-              qu8_gemm_config.nr = 8;
+-              break;
+-          }
+-        }
+-        #if XNN_MAX_UARCH_TYPES > 1
+-        {
+-          /* Choose micro-kernels for little cores according to micro-kernel specification for the big core */
+-          const uint32_t mr = qu8_gemm_config.mr;
+-          const uint32_t nr = qu8_gemm_config.nr;
+-          const uint32_t log2_kr = qu8_gemm_config.log2_kr;
+-          for (size_t i = 1; i < XNN_MAX_UARCH_TYPES; i++) {
+-            const struct cpuinfo_uarch_info* uarch_info = cpuinfo_get_uarch(i);
+-            if (uarch_info == NULL) {
+-              /* No more microarchitectures in the system */
+-              break;
+-            }
++// static void init_qu8_gemm_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       #if XNN_ENABLE_ASSEMBLY
++//         if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
++//           #if XNN_ENABLE_ARM_DOTPROD
++//             qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x8c4__neondot);
++//             qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x8c4__neondot);
++//             qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x8c4__neondot);
++//             qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x8c4__neondot);
++//             qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
++//             qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
++//             qu8_gemm_config.mr = 4;
++//             qu8_gemm_config.nr = 8;
++//             qu8_gemm_config.log2_kr = 2;
++//           #endif  // XNN_ENABLE_ARM_DOTPROD
++//         } else {
++//           switch (cpuinfo_get_uarch(0)->uarch) {
++//             case cpuinfo_uarch_cortex_a5:
++//             case cpuinfo_uarch_cortex_a7:
++//             case cpuinfo_uarch_krait:
++//             case cpuinfo_uarch_kryo:
++//               qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
++//               qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
++//               qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
++//               qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
++//               qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
++//               qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
++//               qu8_gemm_config.mr = 4;
++//               qu8_gemm_config.nr = 8;
++//               break;
++//             case cpuinfo_uarch_cortex_a32:
++//             case cpuinfo_uarch_cortex_a35:
++//               qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_cortex_a7);
++//               qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_cortex_a7);
++//               qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
++//               qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
++//               qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
++//               qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
++//               qu8_gemm_config.mr = 4;
++//               qu8_gemm_config.nr = 8;
++//               break;
++//             case cpuinfo_uarch_cortex_a53:
++//             case cpuinfo_uarch_cortex_a57:
++//             case cpuinfo_uarch_cortex_a72:
++//               qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a53);
++//               qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a53);
++//               qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
++//               qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
++//               qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
++//               qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
++//               qu8_gemm_config.mr = 4;
++//               qu8_gemm_config.nr = 8;
++//               break;
++//             case cpuinfo_uarch_cortex_a55r0:
++//               qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_cortex_a53);
++//               qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_cortex_a53);
++//               qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
++//               qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
++//               qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
++//               qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
++//               qu8_gemm_config.mr = 4;
++//               qu8_gemm_config.nr = 8;
++//               break;
++//             case cpuinfo_uarch_exynos_m1:
++//             case cpuinfo_uarch_exynos_m2:
++//             case cpuinfo_uarch_exynos_m3:
++//               qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_ld64);
++//               qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_ld64);
++//               qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
++//               qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7);
++//               qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
++//               qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
++//               qu8_gemm_config.mr = 4;
++//               qu8_gemm_config.nr = 8;
++//               break;
++//             default:
++//               qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_ld64);
++//               qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_ld64);
++//               qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
++//               qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7);
++//               qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
++//               qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
++//               qu8_gemm_config.mr = 4;
++//               qu8_gemm_config.nr = 8;
++//               break;
++//           }
++//         }
++//         #if XNN_MAX_UARCH_TYPES > 1
++//         {
++//           /* Choose micro-kernels for little cores according to micro-kernel specification for the big core */
++//           const uint32_t mr = qu8_gemm_config.mr;
++//           const uint32_t nr = qu8_gemm_config.nr;
++//           const uint32_t log2_kr = qu8_gemm_config.log2_kr;
++//           for (size_t i = 1; i < XNN_MAX_UARCH_TYPES; i++) {
++//             const struct cpuinfo_uarch_info* uarch_info = cpuinfo_get_uarch(i);
++//             if (uarch_info == NULL) {
++//               /* No more microarchitectures in the system */
++//               break;
++//             }
+ 
+-            switch (uarch_info->uarch) {
+-              case cpuinfo_uarch_cortex_a53:
+-                if (mr == 4 && nr == 8 && log2_kr == 0) {
+-                  qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a53;
+-                  qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a53;
+-                  qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7;
+-                  qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7;
+-                }
+-                break;
+-              case cpuinfo_uarch_cortex_a55r0:
+-                if (mr == 4 && nr == 8 && log2_kr == 0) {
+-                  qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_cortex_a53;
+-                  qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_cortex_a53;
+-                  qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7;
+-                  qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7;
+-                }
+-                break;
+-              default:
+-                break;
+-            }
+-          }
+-        }
+-        #endif  // XNN_MAX_UARCH_TYPES > 1
+-      #else  // XNN_ENABLE_ASSEMBLY
+-        if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
+-          #if XNN_ENABLE_ARM_DOTPROD
+-            qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x8c4__neondot);
+-            qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x8c4__neondot);
+-            qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x8c4__neondot);
+-            qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x8c4__neondot);
+-            qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
+-            qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
+-            qu8_gemm_config.mr = 4;
+-            qu8_gemm_config.nr = 8;
+-            qu8_gemm_config.log2_kr = 2;
+-          #endif  // XNN_ENABLE_ARM_DOTPROD
+-        } else {
+-          qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_3x8__neon_mlal_lane);
+-          qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_3x8__neon_mlal_lane);
+-          qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x8__neon_mlal_lane);
+-          qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x8__neon_mlal_lane);
+-          qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
+-          qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
+-          qu8_gemm_config.mr = 3;
+-          qu8_gemm_config.nr = 8;
+-        }
+-      #endif  // XNN_ENABLE_ASSEMBLY
+-    } else {
+-      qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_2x2c4__armsimd32);
+-      qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_2x2c4__armsimd32);
+-      qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_1x2c4__armsimd32);
+-      qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_1x2c4__armsimd32);
+-      qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_fp32_armsimd32_params;
+-      qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
+-      qu8_gemm_config.mr = 2;
+-      qu8_gemm_config.nr = 2;
+-      qu8_gemm_config.log2_kr = 2;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    #if XNN_ENABLE_ASSEMBLY
+-      if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
+-        #if XNN_ENABLE_ARM_DOTPROD
+-          switch (cpuinfo_get_core(0)->uarch) {
+-            case cpuinfo_uarch_cortex_a55:
+-              qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_cortex_a55);
+-              qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_cortex_a55);
+-              qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x16c4__neondot);
+-              qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x16c4__neondot);
+-              qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
+-              qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
+-              qu8_gemm_config.mr = 4;
+-              qu8_gemm_config.nr = 16;
+-              qu8_gemm_config.log2_kr = 2;
+-              break;
+-            default:
+-              qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_ld128);
+-              qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_ld128);
+-              qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x16c4__neondot);
+-              qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x16c4__neondot);
+-              qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
+-              qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
+-              qu8_gemm_config.mr = 4;
+-              qu8_gemm_config.nr = 16;
+-              qu8_gemm_config.log2_kr = 2;
+-              break;
+-          }
+-        #endif  // XNN_ENABLE_ARM_DOTPROD
+-      } else {
+-        switch (cpuinfo_get_core(0)->uarch) {
+-          case cpuinfo_uarch_cortex_a53:
+-          case cpuinfo_uarch_cortex_a55r0:
+-          case cpuinfo_uarch_kryo:
+-            qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x16__asm_aarch64_neon_mlal_lane_prfm_cortex_a53);
+-            qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x16__asm_aarch64_neon_mlal_lane_prfm_cortex_a53);
+-            qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x16__neon_mlal_lane);
+-            qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x16__neon_mlal_lane);
+-            qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
+-            qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
+-            qu8_gemm_config.mr = 4;
+-            qu8_gemm_config.nr = 16;
+-            break;
++//             switch (uarch_info->uarch) {
++//               case cpuinfo_uarch_cortex_a53:
++//                 if (mr == 4 && nr == 8 && log2_kr == 0) {
++//                   qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a53;
++//                   qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a53;
++//                   qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7;
++//                   qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_prfm_cortex_a7;
++//                 }
++//                 break;
++//               case cpuinfo_uarch_cortex_a55r0:
++//                 if (mr == 4 && nr == 8 && log2_kr == 0) {
++//                   qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_cortex_a53;
++//                   qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x8__asm_aarch32_neon_mlal_lane_cortex_a53;
++//                   qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7;
++//                   qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)].function[i] = (xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x8__asm_aarch32_neon_mlal_lane_cortex_a7;
++//                 }
++//                 break;
++//               default:
++//                 break;
++//             }
++//           }
++//         }
++//         #endif  // XNN_MAX_UARCH_TYPES > 1
++//       #else  // XNN_ENABLE_ASSEMBLY
++//         if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
++//           #if XNN_ENABLE_ARM_DOTPROD
++//             qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x8c4__neondot);
++//             qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x8c4__neondot);
++//             qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x8c4__neondot);
++//             qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x8c4__neondot);
++//             qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
++//             qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
++//             qu8_gemm_config.mr = 4;
++//             qu8_gemm_config.nr = 8;
++//             qu8_gemm_config.log2_kr = 2;
++//           #endif  // XNN_ENABLE_ARM_DOTPROD
++//         } else {
++//           qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_3x8__neon_mlal_lane);
++//           qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_3x8__neon_mlal_lane);
++//           qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x8__neon_mlal_lane);
++//           qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x8__neon_mlal_lane);
++//           qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
++//           qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
++//           qu8_gemm_config.mr = 3;
++//           qu8_gemm_config.nr = 8;
++//         }
++//       #endif  // XNN_ENABLE_ASSEMBLY
++//     } else {
++//       qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_2x2c4__armsimd32);
++//       qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_2x2c4__armsimd32);
++//       qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_1x2c4__armsimd32);
++//       qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_1x2c4__armsimd32);
++//       qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_fp32_armsimd32_params;
++//       qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
++//       qu8_gemm_config.mr = 2;
++//       qu8_gemm_config.nr = 2;
++//       qu8_gemm_config.log2_kr = 2;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     #if XNN_ENABLE_ASSEMBLY
++//       if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
++//         #if XNN_ENABLE_ARM_DOTPROD
++//           switch (cpuinfo_get_core(0)->uarch) {
++//             case cpuinfo_uarch_cortex_a55:
++//               qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_cortex_a55);
++//               qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_cortex_a55);
++//               qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x16c4__neondot);
++//               qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x16c4__neondot);
++//               qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
++//               qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
++//               qu8_gemm_config.mr = 4;
++//               qu8_gemm_config.nr = 16;
++//               qu8_gemm_config.log2_kr = 2;
++//               break;
++//             default:
++//               qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_ld128);
++//               qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_ld128);
++//               qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x16c4__neondot);
++//               qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x16c4__neondot);
++//               qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
++//               qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
++//               qu8_gemm_config.mr = 4;
++//               qu8_gemm_config.nr = 16;
++//               qu8_gemm_config.log2_kr = 2;
++//               break;
++//           }
++//         #endif  // XNN_ENABLE_ARM_DOTPROD
++//       } else {
++//         switch (cpuinfo_get_core(0)->uarch) {
++//           case cpuinfo_uarch_cortex_a53:
++//           case cpuinfo_uarch_cortex_a55r0:
++//           case cpuinfo_uarch_kryo:
++//             qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x16__asm_aarch64_neon_mlal_lane_prfm_cortex_a53);
++//             qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x16__asm_aarch64_neon_mlal_lane_prfm_cortex_a53);
++//             qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x16__neon_mlal_lane);
++//             qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x16__neon_mlal_lane);
++//             qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
++//             qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
++//             qu8_gemm_config.mr = 4;
++//             qu8_gemm_config.nr = 16;
++//             break;
+ 
+-          case cpuinfo_uarch_cortex_a57:
+-          case cpuinfo_uarch_cortex_a72:
+-          case cpuinfo_uarch_cortex_a73:
+-          case cpuinfo_uarch_cortex_a75:
+-          case cpuinfo_uarch_cortex_a76:
+-          case cpuinfo_uarch_exynos_m1:
+-          case cpuinfo_uarch_exynos_m2:
+-          case cpuinfo_uarch_exynos_m3:
+-          case cpuinfo_uarch_exynos_m4:
+-            qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x16__asm_aarch64_neon_mlal_lane_prfm_cortex_a75);
+-            qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x16__asm_aarch64_neon_mlal_lane_prfm_cortex_a75);
+-            qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x16__neon_mlal_lane);
+-            qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x16__neon_mlal_lane);
+-            qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
+-            qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
+-            qu8_gemm_config.mr = 4;
+-            qu8_gemm_config.nr = 16;
+-            break;
++//           case cpuinfo_uarch_cortex_a57:
++//           case cpuinfo_uarch_cortex_a72:
++//           case cpuinfo_uarch_cortex_a73:
++//           case cpuinfo_uarch_cortex_a75:
++//           case cpuinfo_uarch_cortex_a76:
++//           case cpuinfo_uarch_exynos_m1:
++//           case cpuinfo_uarch_exynos_m2:
++//           case cpuinfo_uarch_exynos_m3:
++//           case cpuinfo_uarch_exynos_m4:
++//             qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x16__asm_aarch64_neon_mlal_lane_prfm_cortex_a75);
++//             qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x16__asm_aarch64_neon_mlal_lane_prfm_cortex_a75);
++//             qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x16__neon_mlal_lane);
++//             qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x16__neon_mlal_lane);
++//             qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
++//             qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
++//             qu8_gemm_config.mr = 4;
++//             qu8_gemm_config.nr = 16;
++//             break;
+ 
+-          default:
+-            qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x16__asm_aarch64_neon_mlal_lane_cortex_a75);
+-            qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x16__asm_aarch64_neon_mlal_lane_cortex_a75);
+-            qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x16__neon_mlal_lane);
+-            qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x16__neon_mlal_lane);
+-            qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
+-            qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
+-            qu8_gemm_config.mr = 4;
+-            qu8_gemm_config.nr = 16;
+-            break;
+-        }
+-      }
+-      #if XNN_MAX_UARCH_TYPES > 1
+-      {
+-        /* Choose micro-kernels for little cores according to micro-kernel specification for the big core */
+-        const uint32_t mr = qu8_gemm_config.mr;
+-        const uint32_t nr = qu8_gemm_config.nr;
+-        const uint32_t log2_kr = qu8_gemm_config.log2_kr;
+-        for (size_t i = 1; i < XNN_MAX_UARCH_TYPES; i++) {
+-          const struct cpuinfo_uarch_info* uarch_info = cpuinfo_get_uarch(i);
+-          if (uarch_info == NULL) {
+-            /* No more microarchitectures in the system */
+-            break;
+-          }
++//           default:
++//             qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x16__asm_aarch64_neon_mlal_lane_cortex_a75);
++//             qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x16__asm_aarch64_neon_mlal_lane_cortex_a75);
++//             qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x16__neon_mlal_lane);
++//             qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x16__neon_mlal_lane);
++//             qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
++//             qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
++//             qu8_gemm_config.mr = 4;
++//             qu8_gemm_config.nr = 16;
++//             break;
++//         }
++//       }
++//       #if XNN_MAX_UARCH_TYPES > 1
++//       {
++//         /* Choose micro-kernels for little cores according to micro-kernel specification for the big core */
++//         const uint32_t mr = qu8_gemm_config.mr;
++//         const uint32_t nr = qu8_gemm_config.nr;
++//         const uint32_t log2_kr = qu8_gemm_config.log2_kr;
++//         for (size_t i = 1; i < XNN_MAX_UARCH_TYPES; i++) {
++//           const struct cpuinfo_uarch_info* uarch_info = cpuinfo_get_uarch(i);
++//           if (uarch_info == NULL) {
++//             /* No more microarchitectures in the system */
++//             break;
++//           }
+ 
+-          switch (uarch_info->uarch) {
+-            case cpuinfo_uarch_cortex_a53:
+-            case cpuinfo_uarch_cortex_a55r0:
+-              if (mr == 4 && nr == 16 && log2_kr == 0) {
+-                qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x16__asm_aarch64_neon_mlal_lane_prfm_cortex_a53;
+-                qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x16__asm_aarch64_neon_mlal_lane_prfm_cortex_a53;
+-              }
+-              break;
++//           switch (uarch_info->uarch) {
++//             case cpuinfo_uarch_cortex_a53:
++//             case cpuinfo_uarch_cortex_a55r0:
++//               if (mr == 4 && nr == 16 && log2_kr == 0) {
++//                 qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x16__asm_aarch64_neon_mlal_lane_prfm_cortex_a53;
++//                 qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x16__asm_aarch64_neon_mlal_lane_prfm_cortex_a53;
++//               }
++//               break;
+ 
+-            case cpuinfo_uarch_cortex_a55:
+-              #if XNN_ENABLE_ARM_DOTPROD
+-                if (mr == 4 && nr == 16 && log2_kr == 2 && hardware_config->use_arm_neon_dot) {
+-                  qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_cortex_a55;
+-                  qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_cortex_a55;
+-                }
+-              #endif  // XNN_ENABLE_ARM_DOTPROD
+-              break;
+-            default:
+-              break;
+-          }
+-        }
+-      }
+-      #endif  // XNN_MAX_UARCH_TYPES > 1
+-    #else  // !XNN_ENABLE_ASSEMBLY
+-      if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
+-        #if XNN_ENABLE_ARM_DOTPROD
+-          qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x16c4__neondot);
+-          qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x16c4__neondot);
+-          qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x16c4__neondot);
+-          qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x16c4__neondot);
+-          qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
+-          qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
+-          qu8_gemm_config.mr = 4;
+-          qu8_gemm_config.nr = 16;
+-          qu8_gemm_config.log2_kr = 2;
+-        #endif  // XNN_ENABLE_ARM_DOTPROD
+-      } else {
+-        qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x16__neon_mlal_lane);
+-        qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x16__neon_mlal_lane);
+-        qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x16__neon_mlal_lane);
+-        qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x16__neon_mlal_lane);
+-        qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
+-        qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
+-        qu8_gemm_config.mr = 4;
+-        qu8_gemm_config.nr = 16;
+-      }
+-    #endif  // XNN_ENABLE_ASSEMBLY
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512skx) {
+-      qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_4x16c8__avx512skx);
+-      qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_4x16c8__avx512skx);
+-      qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_1x16c8__avx512skx);
+-      qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_1x16c8__avx512skx);
+-      qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_fp32_avx512_params;
+-      qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
+-      qu8_gemm_config.mr = 4;
+-      qu8_gemm_config.nr = 16;
+-      qu8_gemm_config.log2_kr = 3;
+-    } else if (hardware_config->use_x86_xop) {
+-      // XOP should be checked before AVX2: AMD Excavator supports both, but performs better with XOP microkernels
+-      qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_2x4c8__xop_ld64);
+-      qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_2x4c8__xop_ld64);
+-      qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_1x4c8__xop_ld64);
+-      qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_1x4c8__xop_ld64);
+-      qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_fp32_sse2_params;
+-      qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
+-      qu8_gemm_config.mr = 2;
+-      qu8_gemm_config.nr = 4;
+-      qu8_gemm_config.log2_kr = 3;
+-    } else if (hardware_config->use_x86_avx2) {
+-      qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_3x8c8__avx2);
+-      qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_3x8c8__avx2);
+-      qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_1x8c8__avx2);
+-      qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_1x8c8__avx2);
+-      qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_fp32_avx2_params;
+-      qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
+-      qu8_gemm_config.mr = 3;
+-      qu8_gemm_config.nr = 8;
+-      qu8_gemm_config.log2_kr = 3;
+-    } else if (hardware_config->use_x86_avx) {
+-      qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_2x4c8__avx_ld128);
+-      qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_2x4c8__avx_ld128);
+-      qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_1x4c8__avx_ld128);
+-      qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_1x4c8__avx_ld128);
+-      qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_fp32_sse2_params;
+-      qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
+-      qu8_gemm_config.mr = 2;
+-      qu8_gemm_config.nr = 4;
+-      qu8_gemm_config.log2_kr = 3;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_3x4c8__sse41_ld64);
+-      qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_3x4c8__sse41_ld64);
+-      qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_1x4c8__sse41_ld64);
+-      qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_1x4c8__sse41_ld64);
+-      qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_fp32_sse2_params;
+-      qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
+-      qu8_gemm_config.mr = 3;
+-      qu8_gemm_config.nr = 4;
+-      qu8_gemm_config.log2_kr = 3;
+-    } else {
+-      qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_3x4c8__sse2_ld64);
+-      qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_3x4c8__sse2_ld64);
+-      qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_1x4c8__sse2_ld64);
+-      qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_1x4c8__sse2_ld64);
+-      qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_fp32_sse2_params;
+-      qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
+-      qu8_gemm_config.mr = 3;
+-      qu8_gemm_config.nr = 4;
+-      qu8_gemm_config.log2_kr = 3;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_4x4c2s4__wasmsimd_dot16x2_ld128);
+-    qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_4x4c2s4__wasmsimd_dot16x2_ld128);
+-    qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_1x4c2s4__wasmsimd_dot16x2_ld128);
+-    qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_1x4c2s4__wasmsimd_dot16x2_ld128);
+-    qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_fp32_wasmsimd_params;
+-    qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
+-    qu8_gemm_config.mr = 4;
+-    qu8_gemm_config.nr = 4;
+-    qu8_gemm_config.log2_kr = 1;
+-    qu8_gemm_config.log2_sr = 2;
+-  #elif XNN_ARCH_WASM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_2x2__scalar_imagic);
+-      qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_2x2__scalar_imagic);
+-      qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_1x2__scalar_imagic);
+-      qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_1x2__scalar_imagic);
+-      qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_fp32_scalar_imagic_params;
+-      qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
+-      qu8_gemm_config.mr = 2;
+-      qu8_gemm_config.nr = 2;
+-    } else {
+-      qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_4x4__wasm_fmagic);
+-      qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_4x4__wasm_fmagic);
+-      qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_1x4__wasm_fmagic);
+-      qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_1x4__wasm_fmagic);
+-      qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_fp32_scalar_fmagic_params;
+-      qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
+-      qu8_gemm_config.mr = 4;
+-      qu8_gemm_config.nr = 4;
+-    }
+-  #elif XNN_ARCH_RISCV
+-    qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_3x4__scalar_lrintf);
+-    qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_3x4__scalar_lrintf);
+-    qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_1x4__scalar_lrintf);
+-    qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_1x4__scalar_lrintf);
+-    qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_fp32_scalar_lrintf_params;
+-    qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
+-    qu8_gemm_config.mr = 3;
+-    qu8_gemm_config.nr = 4;
+-  #endif
+-}
++//             case cpuinfo_uarch_cortex_a55:
++//               #if XNN_ENABLE_ARM_DOTPROD
++//                 if (mr == 4 && nr == 16 && log2_kr == 2 && hardware_config->use_arm_neon_dot) {
++//                   qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_cortex_a55;
++//                   qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)].function[i] = (xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x16c4__asm_aarch64_neondot_cortex_a55;
++//                 }
++//               #endif  // XNN_ENABLE_ARM_DOTPROD
++//               break;
++//             default:
++//               break;
++//           }
++//         }
++//       }
++//       #endif  // XNN_MAX_UARCH_TYPES > 1
++//     #else  // !XNN_ENABLE_ASSEMBLY
++//       if (XNN_ENABLE_ARM_DOTPROD && hardware_config->use_arm_neon_dot) {
++//         #if XNN_ENABLE_ARM_DOTPROD
++//           qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x16c4__neondot);
++//           qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x16c4__neondot);
++//           qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x16c4__neondot);
++//           qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x16c4__neondot);
++//           qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
++//           qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
++//           qu8_gemm_config.mr = 4;
++//           qu8_gemm_config.nr = 16;
++//           qu8_gemm_config.log2_kr = 2;
++//         #endif  // XNN_ENABLE_ARM_DOTPROD
++//       } else {
++//         qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_4x16__neon_mlal_lane);
++//         qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_4x16__neon_mlal_lane);
++//         qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_rndnu_ukernel_1x16__neon_mlal_lane);
++//         qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_rndnu_ukernel_1x16__neon_mlal_lane);
++//         qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_rndnu_neon_params;
++//         qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
++//         qu8_gemm_config.mr = 4;
++//         qu8_gemm_config.nr = 16;
++//       }
++//     #endif  // XNN_ENABLE_ASSEMBLY
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512skx) {
++//       qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_4x16c8__avx512skx);
++//       qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_4x16c8__avx512skx);
++//       qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_1x16c8__avx512skx);
++//       qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_1x16c8__avx512skx);
++//       qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_fp32_avx512_params;
++//       qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
++//       qu8_gemm_config.mr = 4;
++//       qu8_gemm_config.nr = 16;
++//       qu8_gemm_config.log2_kr = 3;
++//     } else if (hardware_config->use_x86_xop) {
++//       // XOP should be checked before AVX2: AMD Excavator supports both, but performs better with XOP microkernels
++//       qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_2x4c8__xop_ld64);
++//       qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_2x4c8__xop_ld64);
++//       qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_1x4c8__xop_ld64);
++//       qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_1x4c8__xop_ld64);
++//       qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_fp32_sse2_params;
++//       qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
++//       qu8_gemm_config.mr = 2;
++//       qu8_gemm_config.nr = 4;
++//       qu8_gemm_config.log2_kr = 3;
++//     } else if (hardware_config->use_x86_avx2) {
++//       qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_3x8c8__avx2);
++//       qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_3x8c8__avx2);
++//       qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_1x8c8__avx2);
++//       qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_1x8c8__avx2);
++//       qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_fp32_avx2_params;
++//       qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
++//       qu8_gemm_config.mr = 3;
++//       qu8_gemm_config.nr = 8;
++//       qu8_gemm_config.log2_kr = 3;
++//     } else if (hardware_config->use_x86_avx) {
++//       qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_2x4c8__avx_ld128);
++//       qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_2x4c8__avx_ld128);
++//       qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_1x4c8__avx_ld128);
++//       qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_1x4c8__avx_ld128);
++//       qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_fp32_sse2_params;
++//       qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
++//       qu8_gemm_config.mr = 2;
++//       qu8_gemm_config.nr = 4;
++//       qu8_gemm_config.log2_kr = 3;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_3x4c8__sse41_ld64);
++//       qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_3x4c8__sse41_ld64);
++//       qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_1x4c8__sse41_ld64);
++//       qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_1x4c8__sse41_ld64);
++//       qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_fp32_sse2_params;
++//       qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
++//       qu8_gemm_config.mr = 3;
++//       qu8_gemm_config.nr = 4;
++//       qu8_gemm_config.log2_kr = 3;
++//     } else {
++//       qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_3x4c8__sse2_ld64);
++//       qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_3x4c8__sse2_ld64);
++//       qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_1x4c8__sse2_ld64);
++//       qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_1x4c8__sse2_ld64);
++//       qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_fp32_sse2_params;
++//       qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
++//       qu8_gemm_config.mr = 3;
++//       qu8_gemm_config.nr = 4;
++//       qu8_gemm_config.log2_kr = 3;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_4x4c2s4__wasmsimd_dot16x2_ld128);
++//     qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_4x4c2s4__wasmsimd_dot16x2_ld128);
++//     qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_1x4c2s4__wasmsimd_dot16x2_ld128);
++//     qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_1x4c2s4__wasmsimd_dot16x2_ld128);
++//     qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_fp32_wasmsimd_params;
++//     qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
++//     qu8_gemm_config.mr = 4;
++//     qu8_gemm_config.nr = 4;
++//     qu8_gemm_config.log2_kr = 1;
++//     qu8_gemm_config.log2_sr = 2;
++//   #elif XNN_ARCH_WASM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_2x2__scalar_imagic);
++//       qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(2)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_2x2__scalar_imagic);
++//       qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_1x2__scalar_imagic);
++//       qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_1x2__scalar_imagic);
++//       qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_fp32_scalar_imagic_params;
++//       qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
++//       qu8_gemm_config.mr = 2;
++//       qu8_gemm_config.nr = 2;
++//     } else {
++//       qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_4x4__wasm_fmagic);
++//       qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(4)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_4x4__wasm_fmagic);
++//       qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_1x4__wasm_fmagic);
++//       qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_1x4__wasm_fmagic);
++//       qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_fp32_scalar_fmagic_params;
++//       qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
++//       qu8_gemm_config.mr = 4;
++//       qu8_gemm_config.nr = 4;
++//     }
++//   #elif XNN_ARCH_RISCV
++//     qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_3x4__scalar_lrintf);
++//     qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(3)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_3x4__scalar_lrintf);
++//     qu8_gemm_config.minmax.gemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_gemm_ukernel((xnn_gemm_ukernel_fn) xnn_qu8_gemm_minmax_fp32_ukernel_1x4__scalar_lrintf);
++//     qu8_gemm_config.minmax.igemm[XNN_MR_TO_INDEX(1)] = xnn_init_hmp_igemm_ukernel((xnn_igemm_ukernel_fn) xnn_qu8_igemm_minmax_fp32_ukernel_1x4__scalar_lrintf);
++//     qu8_gemm_config.init.qu8 = xnn_init_qu8_conv_minmax_fp32_scalar_lrintf_params;
++//     qu8_gemm_config.pack_gemm_goi = (xnn_packw_gemm_goi_ukernel_fn) xnn_pack_qu8_gemm_goi_w;
++//     qu8_gemm_config.mr = 3;
++//     qu8_gemm_config.nr = 4;
++//   #endif
++// }
+ 
+ #if XNN_PLATFORM_WINDOWS
+   static BOOL CALLBACK init_f16_gemm_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_gemm_config();
++    //init_f16_gemm_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_gemm_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_gemm_config();
++    //init_f32_gemm_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_gemm2_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_gemm_config();
++    //init_f32_gemm_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_qc8_gemm_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_qc8_gemm_config();
++    //init_qc8_gemm_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_qs8_gemm_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_qs8_gemm_config();
++    //init_qs8_gemm_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_qu8_gemm_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_qu8_gemm_config();
++    //init_qu8_gemm_config();
+     return TRUE;
+   }
+ #endif
+diff --git a/src/ibilinear-chw-config.c b/src/ibilinear-chw-config.c
+index be8a43634..e853e8265 100644
+--- a/src/ibilinear-chw-config.c
++++ b/src/ibilinear-chw-config.c
+@@ -29,70 +29,70 @@ static struct xnn_ibilinear_chw_config f32_ibilinear_chw_config = {0};
+   static pthread_once_t init_guard_f32_ibilinear_chw = PTHREAD_ONCE_INIT;
+ #endif
+ 
+-static void init_f16_ibilinear_chw_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_ibilinear_chw_config.ukernel = (xnn_ibilinear_chw_ukernel_fn) xnn_f16_ibilinear_chw_ukernel__neonfp16arith_p8;
+-      f16_ibilinear_chw_config.channel_tile = 1;
+-      f16_ibilinear_chw_config.pixel_tile = 8;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_ibilinear_chw_config.ukernel = (xnn_ibilinear_chw_ukernel_fn) xnn_f16_ibilinear_chw_ukernel__neonfp16arith_p8;
+-      f16_ibilinear_chw_config.channel_tile = 1;
+-      f16_ibilinear_chw_config.pixel_tile = 8;
+-    }
+-  #endif
+-}
++// static void init_f16_ibilinear_chw_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_ibilinear_chw_config.ukernel = (xnn_ibilinear_chw_ukernel_fn) xnn_f16_ibilinear_chw_ukernel__neonfp16arith_p8;
++//       f16_ibilinear_chw_config.channel_tile = 1;
++//       f16_ibilinear_chw_config.pixel_tile = 8;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_ibilinear_chw_config.ukernel = (xnn_ibilinear_chw_ukernel_fn) xnn_f16_ibilinear_chw_ukernel__neonfp16arith_p8;
++//       f16_ibilinear_chw_config.channel_tile = 1;
++//       f16_ibilinear_chw_config.pixel_tile = 8;
++//     }
++//   #endif
++// }
+ 
+-static void init_f32_ibilinear_chw_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      f32_ibilinear_chw_config.ukernel = (xnn_ibilinear_chw_ukernel_fn) xnn_f32_ibilinear_chw_ukernel__neon_p8;
+-      f32_ibilinear_chw_config.channel_tile = 1;
+-      f32_ibilinear_chw_config.pixel_tile = 8;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_ibilinear_chw_config.ukernel = (xnn_ibilinear_chw_ukernel_fn) xnn_f32_ibilinear_chw_ukernel__scalar_p4;
+-      f32_ibilinear_chw_config.channel_tile = 1;
+-      f32_ibilinear_chw_config.pixel_tile = 4;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_ibilinear_chw_config.ukernel = (xnn_ibilinear_chw_ukernel_fn) xnn_f32_ibilinear_chw_ukernel__neonfma_p8;
+-    f32_ibilinear_chw_config.channel_tile = 1;
+-    f32_ibilinear_chw_config.pixel_tile = 8;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    f32_ibilinear_chw_config.ukernel = (xnn_ibilinear_chw_ukernel_fn) xnn_f32_ibilinear_chw_ukernel__sse_p8;
+-    f32_ibilinear_chw_config.channel_tile = 1;
+-    f32_ibilinear_chw_config.pixel_tile = 8;
+-  #elif XNN_ARCH_WASMRELAXEDSIMD || XNN_ARCH_WASMSIMD
+-    f32_ibilinear_chw_config.ukernel = (xnn_ibilinear_chw_ukernel_fn) xnn_f32_ibilinear_chw_ukernel__wasmsimd_p8;
+-    f32_ibilinear_chw_config.channel_tile = 1;
+-    f32_ibilinear_chw_config.pixel_tile = 8;
+-  #elif XNN_ARCH_WASM
+-    f32_ibilinear_chw_config.ukernel = (xnn_ibilinear_chw_ukernel_fn) xnn_f32_ibilinear_chw_ukernel__scalar_p4;
+-    f32_ibilinear_chw_config.channel_tile = 1;
+-    f32_ibilinear_chw_config.pixel_tile = 4;
+-  #elif XNN_ARCH_RISCV
+-    f32_ibilinear_chw_config.ukernel = (xnn_ibilinear_chw_ukernel_fn) xnn_f32_ibilinear_chw_ukernel__scalar_p4;
+-    f32_ibilinear_chw_config.channel_tile = 1;
+-    f32_ibilinear_chw_config.pixel_tile = 4;
+-  #endif
+-}
++// static void init_f32_ibilinear_chw_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       f32_ibilinear_chw_config.ukernel = (xnn_ibilinear_chw_ukernel_fn) xnn_f32_ibilinear_chw_ukernel__neon_p8;
++//       f32_ibilinear_chw_config.channel_tile = 1;
++//       f32_ibilinear_chw_config.pixel_tile = 8;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_ibilinear_chw_config.ukernel = (xnn_ibilinear_chw_ukernel_fn) xnn_f32_ibilinear_chw_ukernel__scalar_p4;
++//       f32_ibilinear_chw_config.channel_tile = 1;
++//       f32_ibilinear_chw_config.pixel_tile = 4;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_ibilinear_chw_config.ukernel = (xnn_ibilinear_chw_ukernel_fn) xnn_f32_ibilinear_chw_ukernel__neonfma_p8;
++//     f32_ibilinear_chw_config.channel_tile = 1;
++//     f32_ibilinear_chw_config.pixel_tile = 8;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     f32_ibilinear_chw_config.ukernel = (xnn_ibilinear_chw_ukernel_fn) xnn_f32_ibilinear_chw_ukernel__sse_p8;
++//     f32_ibilinear_chw_config.channel_tile = 1;
++//     f32_ibilinear_chw_config.pixel_tile = 8;
++//   #elif XNN_ARCH_WASMRELAXEDSIMD || XNN_ARCH_WASMSIMD
++//     f32_ibilinear_chw_config.ukernel = (xnn_ibilinear_chw_ukernel_fn) xnn_f32_ibilinear_chw_ukernel__wasmsimd_p8;
++//     f32_ibilinear_chw_config.channel_tile = 1;
++//     f32_ibilinear_chw_config.pixel_tile = 8;
++//   #elif XNN_ARCH_WASM
++//     f32_ibilinear_chw_config.ukernel = (xnn_ibilinear_chw_ukernel_fn) xnn_f32_ibilinear_chw_ukernel__scalar_p4;
++//     f32_ibilinear_chw_config.channel_tile = 1;
++//     f32_ibilinear_chw_config.pixel_tile = 4;
++//   #elif XNN_ARCH_RISCV
++//     f32_ibilinear_chw_config.ukernel = (xnn_ibilinear_chw_ukernel_fn) xnn_f32_ibilinear_chw_ukernel__scalar_p4;
++//     f32_ibilinear_chw_config.channel_tile = 1;
++//     f32_ibilinear_chw_config.pixel_tile = 4;
++//   #endif
++// }
+ 
+ #if XNN_PLATFORM_WINDOWS
+   static BOOL CALLBACK init_f16_ibilinear_chw_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_ibilinear_chw_config();
++    //init_f16_ibilinear_chw_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_ibilinear_chw_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_ibilinear_chw_config();
++    //init_f32_ibilinear_chw_config();
+     return TRUE;
+   }
+ #endif
+diff --git a/src/ibilinear-config.c b/src/ibilinear-config.c
+index 7627b6432..f29ba919f 100644
+--- a/src/ibilinear-config.c
++++ b/src/ibilinear-config.c
+@@ -35,180 +35,180 @@ static struct xnn_ibilinear_config u8_ibilinear_config = {0};
+   static pthread_once_t init_guard_u8_ibilinear = PTHREAD_ONCE_INIT;
+ #endif
+ 
+-static void init_f16_ibilinear_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_f16_ibilinear_ukernel__neonfp16arith_c8;
+-      f16_ibilinear_config.pixel_tile = 1;
+-      f16_ibilinear_config.channel_tile = 8;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_f16_ibilinear_ukernel__neonfp16arith_c8;
+-      f16_ibilinear_config.pixel_tile = 1;
+-      f16_ibilinear_config.channel_tile = 8;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx2) {
+-      f16_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_f16_ibilinear_ukernel__fma3_c8;
+-      f16_ibilinear_config.pixel_tile = 1;
+-      f16_ibilinear_config.channel_tile = 8;
+-    }
+-  #endif
+-}
++// static void init_f16_ibilinear_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_f16_ibilinear_ukernel__neonfp16arith_c8;
++//       f16_ibilinear_config.pixel_tile = 1;
++//       f16_ibilinear_config.channel_tile = 8;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_f16_ibilinear_ukernel__neonfp16arith_c8;
++//       f16_ibilinear_config.pixel_tile = 1;
++//       f16_ibilinear_config.channel_tile = 8;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx2) {
++//       f16_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_f16_ibilinear_ukernel__fma3_c8;
++//       f16_ibilinear_config.pixel_tile = 1;
++//       f16_ibilinear_config.channel_tile = 8;
++//     }
++//   #endif
++// }
+ 
+-static void init_f32_ibilinear_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      f32_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_f32_ibilinear_ukernel__neon_c8;
+-      f32_ibilinear_config.pixel_tile = 1;
+-      f32_ibilinear_config.channel_tile = 8;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_f32_ibilinear_ukernel__scalar_c2;
+-      f32_ibilinear_config.pixel_tile = 1;
+-      f32_ibilinear_config.channel_tile = 2;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_f32_ibilinear_ukernel__neonfma_c8;
+-    f32_ibilinear_config.pixel_tile = 1;
+-    f32_ibilinear_config.channel_tile = 8;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    f32_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_f32_ibilinear_ukernel__sse_c8;
+-    f32_ibilinear_config.pixel_tile = 1;
+-    f32_ibilinear_config.channel_tile = 8;
+-  #elif XNN_ARCH_WASMRELAXEDSIMD
+-    f32_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_f32_ibilinear_ukernel__wasmrelaxedsimd_c8;
+-    f32_ibilinear_config.pixel_tile = 1;
+-    f32_ibilinear_config.channel_tile = 8;
+-  #elif XNN_ARCH_WASMSIMD
+-    f32_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_f32_ibilinear_ukernel__wasmsimd_c8;
+-    f32_ibilinear_config.pixel_tile = 1;
+-    f32_ibilinear_config.channel_tile = 8;
+-  #elif XNN_ARCH_WASM
+-    f32_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_f32_ibilinear_ukernel__scalar_c2;
+-    f32_ibilinear_config.pixel_tile = 1;
+-    f32_ibilinear_config.channel_tile = 2;
+-  #elif XNN_ARCH_RISCV
+-    f32_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_f32_ibilinear_ukernel__scalar_c2;
+-    f32_ibilinear_config.pixel_tile = 1;
+-    f32_ibilinear_config.channel_tile = 2;
+-  #endif
+-}
++// static void init_f32_ibilinear_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       f32_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_f32_ibilinear_ukernel__neon_c8;
++//       f32_ibilinear_config.pixel_tile = 1;
++//       f32_ibilinear_config.channel_tile = 8;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_f32_ibilinear_ukernel__scalar_c2;
++//       f32_ibilinear_config.pixel_tile = 1;
++//       f32_ibilinear_config.channel_tile = 2;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_f32_ibilinear_ukernel__neonfma_c8;
++//     f32_ibilinear_config.pixel_tile = 1;
++//     f32_ibilinear_config.channel_tile = 8;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     f32_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_f32_ibilinear_ukernel__sse_c8;
++//     f32_ibilinear_config.pixel_tile = 1;
++//     f32_ibilinear_config.channel_tile = 8;
++//   #elif XNN_ARCH_WASMRELAXEDSIMD
++//     f32_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_f32_ibilinear_ukernel__wasmrelaxedsimd_c8;
++//     f32_ibilinear_config.pixel_tile = 1;
++//     f32_ibilinear_config.channel_tile = 8;
++//   #elif XNN_ARCH_WASMSIMD
++//     f32_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_f32_ibilinear_ukernel__wasmsimd_c8;
++//     f32_ibilinear_config.pixel_tile = 1;
++//     f32_ibilinear_config.channel_tile = 8;
++//   #elif XNN_ARCH_WASM
++//     f32_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_f32_ibilinear_ukernel__scalar_c2;
++//     f32_ibilinear_config.pixel_tile = 1;
++//     f32_ibilinear_config.channel_tile = 2;
++//   #elif XNN_ARCH_RISCV
++//     f32_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_f32_ibilinear_ukernel__scalar_c2;
++//     f32_ibilinear_config.pixel_tile = 1;
++//     f32_ibilinear_config.channel_tile = 2;
++//   #endif
++// }
+ 
+-static void init_s8_ibilinear_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      s8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_s8_ibilinear_ukernel__neon_c8;
+-      s8_ibilinear_config.pixel_tile = 1;
+-      s8_ibilinear_config.channel_tile = 8;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      s8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_s8_ibilinear_ukernel__scalar_c1;
+-      s8_ibilinear_config.pixel_tile = 1;
+-      s8_ibilinear_config.channel_tile = 1;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    s8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_s8_ibilinear_ukernel__neon_c16;
+-    s8_ibilinear_config.pixel_tile = 1;
+-    s8_ibilinear_config.channel_tile = 16;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_sse4_1) {
+-      s8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_s8_ibilinear_ukernel__sse41_c16;
+-      s8_ibilinear_config.pixel_tile = 1;
+-      s8_ibilinear_config.channel_tile = 16;
+-    } else {
+-      s8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_s8_ibilinear_ukernel__sse2_c8;
+-      s8_ibilinear_config.pixel_tile = 1;
+-      s8_ibilinear_config.channel_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    s8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_s8_ibilinear_ukernel__wasmsimd_dot16x2_c8;
+-    s8_ibilinear_config.pixel_tile = 1;
+-    s8_ibilinear_config.channel_tile = 8;
+-  #elif XNN_ARCH_WASM
+-    s8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_s8_ibilinear_ukernel__scalar_c1;
+-    s8_ibilinear_config.pixel_tile = 1;
+-    s8_ibilinear_config.channel_tile = 1;
+-  #elif XNN_ARCH_RISCV
+-    s8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_s8_ibilinear_ukernel__scalar_c1;
+-    s8_ibilinear_config.pixel_tile = 1;
+-    s8_ibilinear_config.channel_tile = 1;
+-  #endif
+-}
++// static void init_s8_ibilinear_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       s8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_s8_ibilinear_ukernel__neon_c8;
++//       s8_ibilinear_config.pixel_tile = 1;
++//       s8_ibilinear_config.channel_tile = 8;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       s8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_s8_ibilinear_ukernel__scalar_c1;
++//       s8_ibilinear_config.pixel_tile = 1;
++//       s8_ibilinear_config.channel_tile = 1;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     s8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_s8_ibilinear_ukernel__neon_c16;
++//     s8_ibilinear_config.pixel_tile = 1;
++//     s8_ibilinear_config.channel_tile = 16;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_sse4_1) {
++//       s8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_s8_ibilinear_ukernel__sse41_c16;
++//       s8_ibilinear_config.pixel_tile = 1;
++//       s8_ibilinear_config.channel_tile = 16;
++//     } else {
++//       s8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_s8_ibilinear_ukernel__sse2_c8;
++//       s8_ibilinear_config.pixel_tile = 1;
++//       s8_ibilinear_config.channel_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     s8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_s8_ibilinear_ukernel__wasmsimd_dot16x2_c8;
++//     s8_ibilinear_config.pixel_tile = 1;
++//     s8_ibilinear_config.channel_tile = 8;
++//   #elif XNN_ARCH_WASM
++//     s8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_s8_ibilinear_ukernel__scalar_c1;
++//     s8_ibilinear_config.pixel_tile = 1;
++//     s8_ibilinear_config.channel_tile = 1;
++//   #elif XNN_ARCH_RISCV
++//     s8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_s8_ibilinear_ukernel__scalar_c1;
++//     s8_ibilinear_config.pixel_tile = 1;
++//     s8_ibilinear_config.channel_tile = 1;
++//   #endif
++// }
+ 
+-static void init_u8_ibilinear_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      u8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_u8_ibilinear_ukernel__neon_c8;
+-      u8_ibilinear_config.pixel_tile = 1;
+-      u8_ibilinear_config.channel_tile = 8;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      u8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_u8_ibilinear_ukernel__scalar_c1;
+-      u8_ibilinear_config.pixel_tile = 1;
+-      u8_ibilinear_config.channel_tile = 1;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    u8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_u8_ibilinear_ukernel__neon_c16;
+-    u8_ibilinear_config.pixel_tile = 1;
+-    u8_ibilinear_config.channel_tile = 16;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_sse4_1) {
+-      u8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_u8_ibilinear_ukernel__sse41_c16;
+-      u8_ibilinear_config.pixel_tile = 1;
+-      u8_ibilinear_config.channel_tile = 16;
+-    } else {
+-      u8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_u8_ibilinear_ukernel__sse2_c8;
+-      u8_ibilinear_config.pixel_tile = 1;
+-      u8_ibilinear_config.channel_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    u8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_u8_ibilinear_ukernel__wasmsimd_dot16x2_c8;
+-    u8_ibilinear_config.pixel_tile = 1;
+-    u8_ibilinear_config.channel_tile = 8;
+-  #elif XNN_ARCH_WASM
+-    u8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_u8_ibilinear_ukernel__scalar_c1;
+-    u8_ibilinear_config.pixel_tile = 1;
+-    u8_ibilinear_config.channel_tile = 1;
+-  #elif XNN_ARCH_RISCV
+-    u8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_u8_ibilinear_ukernel__scalar_c1;
+-    u8_ibilinear_config.pixel_tile = 1;
+-    u8_ibilinear_config.channel_tile = 1;
+-  #endif
+-}
++// static void init_u8_ibilinear_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       u8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_u8_ibilinear_ukernel__neon_c8;
++//       u8_ibilinear_config.pixel_tile = 1;
++//       u8_ibilinear_config.channel_tile = 8;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       u8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_u8_ibilinear_ukernel__scalar_c1;
++//       u8_ibilinear_config.pixel_tile = 1;
++//       u8_ibilinear_config.channel_tile = 1;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     u8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_u8_ibilinear_ukernel__neon_c16;
++//     u8_ibilinear_config.pixel_tile = 1;
++//     u8_ibilinear_config.channel_tile = 16;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_sse4_1) {
++//       u8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_u8_ibilinear_ukernel__sse41_c16;
++//       u8_ibilinear_config.pixel_tile = 1;
++//       u8_ibilinear_config.channel_tile = 16;
++//     } else {
++//       u8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_u8_ibilinear_ukernel__sse2_c8;
++//       u8_ibilinear_config.pixel_tile = 1;
++//       u8_ibilinear_config.channel_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     u8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_u8_ibilinear_ukernel__wasmsimd_dot16x2_c8;
++//     u8_ibilinear_config.pixel_tile = 1;
++//     u8_ibilinear_config.channel_tile = 8;
++//   #elif XNN_ARCH_WASM
++//     u8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_u8_ibilinear_ukernel__scalar_c1;
++//     u8_ibilinear_config.pixel_tile = 1;
++//     u8_ibilinear_config.channel_tile = 1;
++//   #elif XNN_ARCH_RISCV
++//     u8_ibilinear_config.ukernel = (xnn_ibilinear_ukernel_fn) xnn_u8_ibilinear_ukernel__scalar_c1;
++//     u8_ibilinear_config.pixel_tile = 1;
++//     u8_ibilinear_config.channel_tile = 1;
++//   #endif
++// }
+ 
+ #if XNN_PLATFORM_WINDOWS
+   static BOOL CALLBACK init_f16_ibilinear_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_ibilinear_config();
++    //init_f16_ibilinear_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_ibilinear_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_ibilinear_config();
++    //init_f32_ibilinear_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_s8_ibilinear_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_s8_ibilinear_config();
++    //init_s8_ibilinear_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_u8_ibilinear_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_u8_ibilinear_config();
++    //init_u8_ibilinear_config();
+     return TRUE;
+   }
+ #endif
+diff --git a/src/maxpool-config.c b/src/maxpool-config.c
+index 43dc06250..939451485 100644
+--- a/src/maxpool-config.c
++++ b/src/maxpool-config.c
+@@ -35,202 +35,202 @@ static struct xnn_maxpool_config u8_maxpool_config = {0};
+   static pthread_once_t init_guard_u8_maxpool = PTHREAD_ONCE_INIT;
+ #endif
+ 
+-static void init_f16_maxpool_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_f16_maxpool_minmax_ukernel_9p8x__neonfp16arith_c8;
+-      f16_maxpool_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
+-      f16_maxpool_config.first_pass_tile_size = 9;
+-      f16_maxpool_config.remainder_pass_tile_size = 8;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_f16_maxpool_minmax_ukernel_9p8x__neonfp16arith_c8;
+-      f16_maxpool_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
+-      f16_maxpool_config.first_pass_tile_size = 9;
+-      f16_maxpool_config.remainder_pass_tile_size = 8;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx2) {
+-      f16_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_f16_maxpool_minmax_ukernel_9p8x__f16c_c8;
+-      f16_maxpool_config.init.f16 = xnn_init_f16_minmax_avx_params;
+-      f16_maxpool_config.first_pass_tile_size = 9;
+-      f16_maxpool_config.remainder_pass_tile_size = 8;
+-    }
+-  #endif
+-}
++// static void init_f16_maxpool_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_f16_maxpool_minmax_ukernel_9p8x__neonfp16arith_c8;
++//       f16_maxpool_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
++//       f16_maxpool_config.first_pass_tile_size = 9;
++//       f16_maxpool_config.remainder_pass_tile_size = 8;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_f16_maxpool_minmax_ukernel_9p8x__neonfp16arith_c8;
++//       f16_maxpool_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
++//       f16_maxpool_config.first_pass_tile_size = 9;
++//       f16_maxpool_config.remainder_pass_tile_size = 8;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx2) {
++//       f16_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_f16_maxpool_minmax_ukernel_9p8x__f16c_c8;
++//       f16_maxpool_config.init.f16 = xnn_init_f16_minmax_avx_params;
++//       f16_maxpool_config.first_pass_tile_size = 9;
++//       f16_maxpool_config.remainder_pass_tile_size = 8;
++//     }
++//   #endif
++// }
+ 
+-static void init_f32_maxpool_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      f32_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_f32_maxpool_minmax_ukernel_9p8x__neon_c4;
+-      f32_maxpool_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_maxpool_config.first_pass_tile_size = 9;
+-      f32_maxpool_config.remainder_pass_tile_size = 8;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_f32_maxpool_minmax_ukernel_9p8x__scalar_c1;
+-      f32_maxpool_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_maxpool_config.first_pass_tile_size = 9;
+-      f32_maxpool_config.remainder_pass_tile_size = 8;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_f32_maxpool_minmax_ukernel_9p8x__neon_c4;
+-    f32_maxpool_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_maxpool_config.first_pass_tile_size = 9;
+-    f32_maxpool_config.remainder_pass_tile_size = 8;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    f32_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_f32_maxpool_minmax_ukernel_9p8x__sse_c4;
+-    f32_maxpool_config.init.f32 = xnn_init_f32_minmax_sse_params;
+-    f32_maxpool_config.first_pass_tile_size = 9;
+-    f32_maxpool_config.remainder_pass_tile_size = 8;
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      f32_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_f32_maxpool_minmax_ukernel_9p8x__wasmsimd_x86_c4;
+-      f32_maxpool_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-      f32_maxpool_config.first_pass_tile_size = 9;
+-      f32_maxpool_config.remainder_pass_tile_size = 8;
+-    } else {
+-      f32_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_f32_maxpool_minmax_ukernel_9p8x__wasmsimd_arm_c4;
+-      f32_maxpool_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-      f32_maxpool_config.first_pass_tile_size = 9;
+-      f32_maxpool_config.remainder_pass_tile_size = 8;
+-    }
+-  #elif XNN_ARCH_WASM
+-    f32_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_f32_maxpool_minmax_ukernel_9p8x__wasm_c1;
+-    f32_maxpool_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_maxpool_config.first_pass_tile_size = 9;
+-    f32_maxpool_config.remainder_pass_tile_size = 8;
+-  #elif XNN_ARCH_RISCV
+-    f32_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_f32_maxpool_minmax_ukernel_9p8x__scalar_c1;
+-    f32_maxpool_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_maxpool_config.first_pass_tile_size = 9;
+-    f32_maxpool_config.remainder_pass_tile_size = 8;
+-  #endif
+-}
++// static void init_f32_maxpool_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       f32_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_f32_maxpool_minmax_ukernel_9p8x__neon_c4;
++//       f32_maxpool_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_maxpool_config.first_pass_tile_size = 9;
++//       f32_maxpool_config.remainder_pass_tile_size = 8;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_f32_maxpool_minmax_ukernel_9p8x__scalar_c1;
++//       f32_maxpool_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_maxpool_config.first_pass_tile_size = 9;
++//       f32_maxpool_config.remainder_pass_tile_size = 8;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_f32_maxpool_minmax_ukernel_9p8x__neon_c4;
++//     f32_maxpool_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_maxpool_config.first_pass_tile_size = 9;
++//     f32_maxpool_config.remainder_pass_tile_size = 8;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     f32_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_f32_maxpool_minmax_ukernel_9p8x__sse_c4;
++//     f32_maxpool_config.init.f32 = xnn_init_f32_minmax_sse_params;
++//     f32_maxpool_config.first_pass_tile_size = 9;
++//     f32_maxpool_config.remainder_pass_tile_size = 8;
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       f32_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_f32_maxpool_minmax_ukernel_9p8x__wasmsimd_x86_c4;
++//       f32_maxpool_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//       f32_maxpool_config.first_pass_tile_size = 9;
++//       f32_maxpool_config.remainder_pass_tile_size = 8;
++//     } else {
++//       f32_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_f32_maxpool_minmax_ukernel_9p8x__wasmsimd_arm_c4;
++//       f32_maxpool_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//       f32_maxpool_config.first_pass_tile_size = 9;
++//       f32_maxpool_config.remainder_pass_tile_size = 8;
++//     }
++//   #elif XNN_ARCH_WASM
++//     f32_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_f32_maxpool_minmax_ukernel_9p8x__wasm_c1;
++//     f32_maxpool_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_maxpool_config.first_pass_tile_size = 9;
++//     f32_maxpool_config.remainder_pass_tile_size = 8;
++//   #elif XNN_ARCH_RISCV
++//     f32_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_f32_maxpool_minmax_ukernel_9p8x__scalar_c1;
++//     f32_maxpool_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_maxpool_config.first_pass_tile_size = 9;
++//     f32_maxpool_config.remainder_pass_tile_size = 8;
++//   #endif
++// }
+ 
+-static void init_s8_maxpool_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      s8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_s8_maxpool_minmax_ukernel_9p8x__neon_c16;
+-      s8_maxpool_config.init.s8 = xnn_init_s8_minmax_neon_params;
+-      s8_maxpool_config.first_pass_tile_size = 9;
+-      s8_maxpool_config.remainder_pass_tile_size = 8;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      s8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_s8_maxpool_minmax_ukernel_9p8x__scalar_c1;
+-      s8_maxpool_config.init.s8 = xnn_init_s8_minmax_scalar_params;
+-      s8_maxpool_config.first_pass_tile_size = 9;
+-      s8_maxpool_config.remainder_pass_tile_size = 8;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    s8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_s8_maxpool_minmax_ukernel_9p8x__neon_c16;
+-    s8_maxpool_config.init.s8 = xnn_init_s8_minmax_neon_params;
+-    s8_maxpool_config.first_pass_tile_size = 9;
+-    s8_maxpool_config.remainder_pass_tile_size = 8;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_sse4_1) {
+-      s8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_s8_maxpool_minmax_ukernel_9p8x__sse41_c16;
+-      s8_maxpool_config.init.s8 = xnn_init_s8_minmax_sse4_params;
+-      s8_maxpool_config.first_pass_tile_size = 9;
+-      s8_maxpool_config.remainder_pass_tile_size = 8;
+-    } else {
+-      s8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_s8_maxpool_minmax_ukernel_9p8x__sse2_c16;
+-      s8_maxpool_config.init.s8 = xnn_init_s8_minmax_sse2_params;
+-      s8_maxpool_config.first_pass_tile_size = 9;
+-      s8_maxpool_config.remainder_pass_tile_size = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    s8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_s8_maxpool_minmax_ukernel_9p8x__wasmsimd_c16;
+-    s8_maxpool_config.init.s8 = xnn_init_s8_minmax_wasmsimd_params;
+-    s8_maxpool_config.first_pass_tile_size = 9;
+-    s8_maxpool_config.remainder_pass_tile_size = 8;
+-  #elif XNN_ARCH_WASM
+-    s8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_s8_maxpool_minmax_ukernel_9p8x__scalar_c1;
+-    s8_maxpool_config.init.s8 = xnn_init_s8_minmax_scalar_params;
+-    s8_maxpool_config.first_pass_tile_size = 9;
+-    s8_maxpool_config.remainder_pass_tile_size = 8;
+-  #elif XNN_ARCH_RISCV
+-    s8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_s8_maxpool_minmax_ukernel_9p8x__scalar_c1;
+-    s8_maxpool_config.init.s8 = xnn_init_s8_minmax_scalar_params;
+-    s8_maxpool_config.first_pass_tile_size = 9;
+-    s8_maxpool_config.remainder_pass_tile_size = 8;
+-  #endif
+-}
++// static void init_s8_maxpool_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       s8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_s8_maxpool_minmax_ukernel_9p8x__neon_c16;
++//       s8_maxpool_config.init.s8 = xnn_init_s8_minmax_neon_params;
++//       s8_maxpool_config.first_pass_tile_size = 9;
++//       s8_maxpool_config.remainder_pass_tile_size = 8;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       s8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_s8_maxpool_minmax_ukernel_9p8x__scalar_c1;
++//       s8_maxpool_config.init.s8 = xnn_init_s8_minmax_scalar_params;
++//       s8_maxpool_config.first_pass_tile_size = 9;
++//       s8_maxpool_config.remainder_pass_tile_size = 8;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     s8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_s8_maxpool_minmax_ukernel_9p8x__neon_c16;
++//     s8_maxpool_config.init.s8 = xnn_init_s8_minmax_neon_params;
++//     s8_maxpool_config.first_pass_tile_size = 9;
++//     s8_maxpool_config.remainder_pass_tile_size = 8;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_sse4_1) {
++//       s8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_s8_maxpool_minmax_ukernel_9p8x__sse41_c16;
++//       s8_maxpool_config.init.s8 = xnn_init_s8_minmax_sse4_params;
++//       s8_maxpool_config.first_pass_tile_size = 9;
++//       s8_maxpool_config.remainder_pass_tile_size = 8;
++//     } else {
++//       s8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_s8_maxpool_minmax_ukernel_9p8x__sse2_c16;
++//       s8_maxpool_config.init.s8 = xnn_init_s8_minmax_sse2_params;
++//       s8_maxpool_config.first_pass_tile_size = 9;
++//       s8_maxpool_config.remainder_pass_tile_size = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     s8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_s8_maxpool_minmax_ukernel_9p8x__wasmsimd_c16;
++//     s8_maxpool_config.init.s8 = xnn_init_s8_minmax_wasmsimd_params;
++//     s8_maxpool_config.first_pass_tile_size = 9;
++//     s8_maxpool_config.remainder_pass_tile_size = 8;
++//   #elif XNN_ARCH_WASM
++//     s8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_s8_maxpool_minmax_ukernel_9p8x__scalar_c1;
++//     s8_maxpool_config.init.s8 = xnn_init_s8_minmax_scalar_params;
++//     s8_maxpool_config.first_pass_tile_size = 9;
++//     s8_maxpool_config.remainder_pass_tile_size = 8;
++//   #elif XNN_ARCH_RISCV
++//     s8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_s8_maxpool_minmax_ukernel_9p8x__scalar_c1;
++//     s8_maxpool_config.init.s8 = xnn_init_s8_minmax_scalar_params;
++//     s8_maxpool_config.first_pass_tile_size = 9;
++//     s8_maxpool_config.remainder_pass_tile_size = 8;
++//   #endif
++// }
+ 
+-static void init_u8_maxpool_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      u8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_u8_maxpool_minmax_ukernel_9p8x__neon_c16;
+-      u8_maxpool_config.init.u8 = xnn_init_u8_minmax_neon_params;
+-      u8_maxpool_config.first_pass_tile_size = 9;
+-      u8_maxpool_config.remainder_pass_tile_size = 8;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      u8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_u8_maxpool_minmax_ukernel_9p8x__scalar_c1;
+-      u8_maxpool_config.init.u8 = xnn_init_u8_minmax_scalar_params;
+-      u8_maxpool_config.first_pass_tile_size = 9;
+-      u8_maxpool_config.remainder_pass_tile_size = 8;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    u8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_u8_maxpool_minmax_ukernel_9p8x__neon_c16;
+-    u8_maxpool_config.init.u8 = xnn_init_u8_minmax_neon_params;
+-    u8_maxpool_config.first_pass_tile_size = 9;
+-    u8_maxpool_config.remainder_pass_tile_size = 8;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    u8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_u8_maxpool_minmax_ukernel_9p8x__sse2_c16;
+-    u8_maxpool_config.init.u8 = xnn_init_u8_minmax_sse2_params;
+-    u8_maxpool_config.first_pass_tile_size = 9;
+-    u8_maxpool_config.remainder_pass_tile_size = 8;
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    u8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_u8_maxpool_minmax_ukernel_9p8x__wasmsimd_c16;
+-    u8_maxpool_config.init.u8 = xnn_init_u8_minmax_wasmsimd_params;
+-    u8_maxpool_config.first_pass_tile_size = 9;
+-    u8_maxpool_config.remainder_pass_tile_size = 8;
+-  #elif XNN_ARCH_WASM
+-    u8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_u8_maxpool_minmax_ukernel_9p8x__scalar_c1;
+-    u8_maxpool_config.init.u8 = xnn_init_u8_minmax_scalar_params;
+-    u8_maxpool_config.first_pass_tile_size = 9;
+-    u8_maxpool_config.remainder_pass_tile_size = 8;
+-  #elif XNN_ARCH_RISCV
+-    u8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_u8_maxpool_minmax_ukernel_9p8x__scalar_c1;
+-    u8_maxpool_config.init.u8 = xnn_init_u8_minmax_scalar_params;
+-    u8_maxpool_config.first_pass_tile_size = 9;
+-    u8_maxpool_config.remainder_pass_tile_size = 8;
+-  #endif
+-}
++// static void init_u8_maxpool_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       u8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_u8_maxpool_minmax_ukernel_9p8x__neon_c16;
++//       u8_maxpool_config.init.u8 = xnn_init_u8_minmax_neon_params;
++//       u8_maxpool_config.first_pass_tile_size = 9;
++//       u8_maxpool_config.remainder_pass_tile_size = 8;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       u8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_u8_maxpool_minmax_ukernel_9p8x__scalar_c1;
++//       u8_maxpool_config.init.u8 = xnn_init_u8_minmax_scalar_params;
++//       u8_maxpool_config.first_pass_tile_size = 9;
++//       u8_maxpool_config.remainder_pass_tile_size = 8;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     u8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_u8_maxpool_minmax_ukernel_9p8x__neon_c16;
++//     u8_maxpool_config.init.u8 = xnn_init_u8_minmax_neon_params;
++//     u8_maxpool_config.first_pass_tile_size = 9;
++//     u8_maxpool_config.remainder_pass_tile_size = 8;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     u8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_u8_maxpool_minmax_ukernel_9p8x__sse2_c16;
++//     u8_maxpool_config.init.u8 = xnn_init_u8_minmax_sse2_params;
++//     u8_maxpool_config.first_pass_tile_size = 9;
++//     u8_maxpool_config.remainder_pass_tile_size = 8;
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     u8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_u8_maxpool_minmax_ukernel_9p8x__wasmsimd_c16;
++//     u8_maxpool_config.init.u8 = xnn_init_u8_minmax_wasmsimd_params;
++//     u8_maxpool_config.first_pass_tile_size = 9;
++//     u8_maxpool_config.remainder_pass_tile_size = 8;
++//   #elif XNN_ARCH_WASM
++//     u8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_u8_maxpool_minmax_ukernel_9p8x__scalar_c1;
++//     u8_maxpool_config.init.u8 = xnn_init_u8_minmax_scalar_params;
++//     u8_maxpool_config.first_pass_tile_size = 9;
++//     u8_maxpool_config.remainder_pass_tile_size = 8;
++//   #elif XNN_ARCH_RISCV
++//     u8_maxpool_config.ukernel = (xnn_maxpool_ukernel_fn) xnn_u8_maxpool_minmax_ukernel_9p8x__scalar_c1;
++//     u8_maxpool_config.init.u8 = xnn_init_u8_minmax_scalar_params;
++//     u8_maxpool_config.first_pass_tile_size = 9;
++//     u8_maxpool_config.remainder_pass_tile_size = 8;
++//   #endif
++// }
+ 
+ #if XNN_PLATFORM_WINDOWS
+   static BOOL CALLBACK init_f16_maxpool_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_maxpool_config();
++    //init_f16_maxpool_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_maxpool_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_maxpool_config();
++    //init_f32_maxpool_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_s8_maxpool_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_s8_maxpool_config();
++    //init_s8_maxpool_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_u8_maxpool_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_u8_maxpool_config();
++    //init_u8_maxpool_config();
+     return TRUE;
+   }
+ #endif
+diff --git a/src/pavgpool-config.c b/src/pavgpool-config.c
+index d74a31bee..a4bf07662 100644
+--- a/src/pavgpool-config.c
++++ b/src/pavgpool-config.c
+@@ -29,119 +29,119 @@ static struct xnn_pavgpool_config f32_pavgpool_config = {0};
+   static pthread_once_t init_guard_f32_pavgpool = PTHREAD_ONCE_INIT;
+ #endif
+ 
+-static void init_f16_pavgpool_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_pavgpool_config.unipass = (xnn_pavgpool_unipass_ukernel_fn) xnn_f16_pavgpool_minmax_ukernel_9x__neonfp16arith_c8;
+-      f16_pavgpool_config.multipass = (xnn_pavgpool_multipass_ukernel_fn) xnn_f16_pavgpool_minmax_ukernel_9p8x__neonfp16arith_c8;
+-      f16_pavgpool_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
+-      f16_pavgpool_config.primary_tile = 9;
+-      f16_pavgpool_config.incremental_tile = 8;
+-      f16_pavgpool_config.channel_tile = 8;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_pavgpool_config.unipass = (xnn_pavgpool_unipass_ukernel_fn) xnn_f16_pavgpool_minmax_ukernel_9x__neonfp16arith_c8;
+-      f16_pavgpool_config.multipass = (xnn_pavgpool_multipass_ukernel_fn) xnn_f16_pavgpool_minmax_ukernel_9p8x__neonfp16arith_c8;
+-      f16_pavgpool_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
+-      f16_pavgpool_config.primary_tile = 9;
+-      f16_pavgpool_config.incremental_tile = 8;
+-      f16_pavgpool_config.channel_tile = 8;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx2) {
+-      f16_pavgpool_config.unipass = (xnn_pavgpool_unipass_ukernel_fn) xnn_f16_pavgpool_minmax_ukernel_9x__avx2_c8;
+-      f16_pavgpool_config.multipass = (xnn_pavgpool_multipass_ukernel_fn) xnn_f16_pavgpool_minmax_ukernel_9p8x__avx2_c8;
+-      f16_pavgpool_config.init.f16 = xnn_init_f16_minmax_avx_params;
+-      f16_pavgpool_config.primary_tile = 9;
+-      f16_pavgpool_config.incremental_tile = 8;
+-      f16_pavgpool_config.channel_tile = 8;
+-    }
+-  #endif
+-}
++// static void init_f16_pavgpool_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_pavgpool_config.unipass = (xnn_pavgpool_unipass_ukernel_fn) xnn_f16_pavgpool_minmax_ukernel_9x__neonfp16arith_c8;
++//       f16_pavgpool_config.multipass = (xnn_pavgpool_multipass_ukernel_fn) xnn_f16_pavgpool_minmax_ukernel_9p8x__neonfp16arith_c8;
++//       f16_pavgpool_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
++//       f16_pavgpool_config.primary_tile = 9;
++//       f16_pavgpool_config.incremental_tile = 8;
++//       f16_pavgpool_config.channel_tile = 8;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_pavgpool_config.unipass = (xnn_pavgpool_unipass_ukernel_fn) xnn_f16_pavgpool_minmax_ukernel_9x__neonfp16arith_c8;
++//       f16_pavgpool_config.multipass = (xnn_pavgpool_multipass_ukernel_fn) xnn_f16_pavgpool_minmax_ukernel_9p8x__neonfp16arith_c8;
++//       f16_pavgpool_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
++//       f16_pavgpool_config.primary_tile = 9;
++//       f16_pavgpool_config.incremental_tile = 8;
++//       f16_pavgpool_config.channel_tile = 8;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx2) {
++//       f16_pavgpool_config.unipass = (xnn_pavgpool_unipass_ukernel_fn) xnn_f16_pavgpool_minmax_ukernel_9x__avx2_c8;
++//       f16_pavgpool_config.multipass = (xnn_pavgpool_multipass_ukernel_fn) xnn_f16_pavgpool_minmax_ukernel_9p8x__avx2_c8;
++//       f16_pavgpool_config.init.f16 = xnn_init_f16_minmax_avx_params;
++//       f16_pavgpool_config.primary_tile = 9;
++//       f16_pavgpool_config.incremental_tile = 8;
++//       f16_pavgpool_config.channel_tile = 8;
++//     }
++//   #endif
++// }
+ 
+-static void init_f32_pavgpool_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      f32_pavgpool_config.unipass = (xnn_pavgpool_unipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9x__neon_c4;
+-      f32_pavgpool_config.multipass = (xnn_pavgpool_multipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9p8x__neon_c4;
+-      f32_pavgpool_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_pavgpool_config.primary_tile = 9;
+-      f32_pavgpool_config.incremental_tile = 8;
+-      f32_pavgpool_config.channel_tile = 4;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_pavgpool_config.unipass = (xnn_pavgpool_unipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9x__scalar_c1;
+-      f32_pavgpool_config.multipass = (xnn_pavgpool_multipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9p8x__scalar_c1;
+-      f32_pavgpool_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_pavgpool_config.primary_tile = 9;
+-      f32_pavgpool_config.incremental_tile = 8;
+-      f32_pavgpool_config.channel_tile = 1;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_pavgpool_config.unipass = (xnn_pavgpool_unipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9x__neon_c4;
+-    f32_pavgpool_config.multipass = (xnn_pavgpool_multipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9p8x__neon_c4;
+-    f32_pavgpool_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_pavgpool_config.primary_tile = 9;
+-    f32_pavgpool_config.incremental_tile = 8;
+-    f32_pavgpool_config.channel_tile = 4;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    f32_pavgpool_config.unipass = (xnn_pavgpool_unipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9x__sse_c4;
+-    f32_pavgpool_config.multipass = (xnn_pavgpool_multipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9p8x__sse_c4;
+-    f32_pavgpool_config.init.f32 = xnn_init_f32_minmax_sse_params;
+-    f32_pavgpool_config.primary_tile = 9;
+-    f32_pavgpool_config.incremental_tile = 8;
+-    f32_pavgpool_config.channel_tile = 4;
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      f32_pavgpool_config.unipass = (xnn_pavgpool_unipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9x__wasmsimd_x86_c4;
+-      f32_pavgpool_config.multipass = (xnn_pavgpool_multipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9p8x__wasmsimd_x86_c4;
+-      f32_pavgpool_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-      f32_pavgpool_config.primary_tile = 9;
+-      f32_pavgpool_config.incremental_tile = 8;
+-      f32_pavgpool_config.channel_tile = 4;
+-    } else {
+-      f32_pavgpool_config.unipass = (xnn_pavgpool_unipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9x__wasmsimd_arm_c4;
+-      f32_pavgpool_config.multipass = (xnn_pavgpool_multipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9p8x__wasmsimd_arm_c4;
+-      f32_pavgpool_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-      f32_pavgpool_config.primary_tile = 9;
+-      f32_pavgpool_config.incremental_tile = 8;
+-      f32_pavgpool_config.channel_tile = 4;
+-    }
+-  #elif XNN_ARCH_WASM
+-    f32_pavgpool_config.unipass = (xnn_pavgpool_unipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9x__wasm_c1;
+-    f32_pavgpool_config.multipass = (xnn_pavgpool_multipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9p8x__wasm_c1;
+-    f32_pavgpool_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_pavgpool_config.primary_tile = 9;
+-    f32_pavgpool_config.incremental_tile = 8;
+-    f32_pavgpool_config.channel_tile = 1;
+-  #elif XNN_ARCH_RISCV
+-    f32_pavgpool_config.unipass = (xnn_pavgpool_unipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9x__scalar_c1;
+-    f32_pavgpool_config.multipass = (xnn_pavgpool_multipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9p8x__scalar_c1;
+-    f32_pavgpool_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_pavgpool_config.primary_tile = 9;
+-    f32_pavgpool_config.incremental_tile = 8;
+-    f32_pavgpool_config.channel_tile = 1;
+-  #endif
+-}
++// static void init_f32_pavgpool_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       f32_pavgpool_config.unipass = (xnn_pavgpool_unipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9x__neon_c4;
++//       f32_pavgpool_config.multipass = (xnn_pavgpool_multipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9p8x__neon_c4;
++//       f32_pavgpool_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_pavgpool_config.primary_tile = 9;
++//       f32_pavgpool_config.incremental_tile = 8;
++//       f32_pavgpool_config.channel_tile = 4;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_pavgpool_config.unipass = (xnn_pavgpool_unipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9x__scalar_c1;
++//       f32_pavgpool_config.multipass = (xnn_pavgpool_multipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9p8x__scalar_c1;
++//       f32_pavgpool_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_pavgpool_config.primary_tile = 9;
++//       f32_pavgpool_config.incremental_tile = 8;
++//       f32_pavgpool_config.channel_tile = 1;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_pavgpool_config.unipass = (xnn_pavgpool_unipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9x__neon_c4;
++//     f32_pavgpool_config.multipass = (xnn_pavgpool_multipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9p8x__neon_c4;
++//     f32_pavgpool_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_pavgpool_config.primary_tile = 9;
++//     f32_pavgpool_config.incremental_tile = 8;
++//     f32_pavgpool_config.channel_tile = 4;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     f32_pavgpool_config.unipass = (xnn_pavgpool_unipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9x__sse_c4;
++//     f32_pavgpool_config.multipass = (xnn_pavgpool_multipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9p8x__sse_c4;
++//     f32_pavgpool_config.init.f32 = xnn_init_f32_minmax_sse_params;
++//     f32_pavgpool_config.primary_tile = 9;
++//     f32_pavgpool_config.incremental_tile = 8;
++//     f32_pavgpool_config.channel_tile = 4;
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       f32_pavgpool_config.unipass = (xnn_pavgpool_unipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9x__wasmsimd_x86_c4;
++//       f32_pavgpool_config.multipass = (xnn_pavgpool_multipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9p8x__wasmsimd_x86_c4;
++//       f32_pavgpool_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//       f32_pavgpool_config.primary_tile = 9;
++//       f32_pavgpool_config.incremental_tile = 8;
++//       f32_pavgpool_config.channel_tile = 4;
++//     } else {
++//       f32_pavgpool_config.unipass = (xnn_pavgpool_unipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9x__wasmsimd_arm_c4;
++//       f32_pavgpool_config.multipass = (xnn_pavgpool_multipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9p8x__wasmsimd_arm_c4;
++//       f32_pavgpool_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//       f32_pavgpool_config.primary_tile = 9;
++//       f32_pavgpool_config.incremental_tile = 8;
++//       f32_pavgpool_config.channel_tile = 4;
++//     }
++//   #elif XNN_ARCH_WASM
++//     f32_pavgpool_config.unipass = (xnn_pavgpool_unipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9x__wasm_c1;
++//     f32_pavgpool_config.multipass = (xnn_pavgpool_multipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9p8x__wasm_c1;
++//     f32_pavgpool_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_pavgpool_config.primary_tile = 9;
++//     f32_pavgpool_config.incremental_tile = 8;
++//     f32_pavgpool_config.channel_tile = 1;
++//   #elif XNN_ARCH_RISCV
++//     f32_pavgpool_config.unipass = (xnn_pavgpool_unipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9x__scalar_c1;
++//     f32_pavgpool_config.multipass = (xnn_pavgpool_multipass_ukernel_fn) xnn_f32_pavgpool_minmax_ukernel_9p8x__scalar_c1;
++//     f32_pavgpool_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_pavgpool_config.primary_tile = 9;
++//     f32_pavgpool_config.incremental_tile = 8;
++//     f32_pavgpool_config.channel_tile = 1;
++//   #endif
++// }
+ 
+ #if XNN_PLATFORM_WINDOWS
+   static BOOL CALLBACK init_f16_pavgpool_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_pavgpool_config();
++    //init_f16_pavgpool_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_pavgpool_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_pavgpool_config();
++    //init_f32_pavgpool_config();
+     return TRUE;
+   }
+ #endif
+diff --git a/src/prelu-config.c b/src/prelu-config.c
+index 9db673d0a..4ad451745 100644
+--- a/src/prelu-config.c
++++ b/src/prelu-config.c
+@@ -29,122 +29,122 @@ static struct xnn_prelu_config f32_prelu_config = {0};
+   static pthread_once_t init_guard_f32_prelu = PTHREAD_ONCE_INIT;
+ #endif
+ 
+-static void init_f16_prelu_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f16_prelu_ukernel__neonfp16arith_2x16;
+-      f16_prelu_config.row_tile = 2;
+-      f16_prelu_config.channel_tile = 16;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f16_prelu_ukernel__neonfp16arith_2x16;
+-      f16_prelu_config.row_tile = 2;
+-      f16_prelu_config.channel_tile = 16;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx2) {
+-      f16_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f16_prelu_ukernel__f16c_2x16;
+-      f16_prelu_config.row_tile = 2;
+-      f16_prelu_config.channel_tile = 16;
+-    }
+-  #endif
+-}
++// static void init_f16_prelu_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f16_prelu_ukernel__neonfp16arith_2x16;
++//       f16_prelu_config.row_tile = 2;
++//       f16_prelu_config.channel_tile = 16;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f16_prelu_ukernel__neonfp16arith_2x16;
++//       f16_prelu_config.row_tile = 2;
++//       f16_prelu_config.channel_tile = 16;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx2) {
++//       f16_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f16_prelu_ukernel__f16c_2x16;
++//       f16_prelu_config.row_tile = 2;
++//       f16_prelu_config.channel_tile = 16;
++//     }
++//   #endif
++// }
+ 
+-static void init_f32_prelu_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__neon_2x8;
+-      f32_prelu_config.row_tile = 2;
+-      f32_prelu_config.channel_tile = 8;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__scalar_2x4;
+-      f32_prelu_config.row_tile = 4;
+-      f32_prelu_config.channel_tile = 4;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__neon_2x8;
+-    f32_prelu_config.row_tile = 2;
+-    f32_prelu_config.channel_tile = 8;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
+-      f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__avx512f_2x16;
+-      f32_prelu_config.row_tile = 2;
+-      f32_prelu_config.channel_tile = 16;
+-    } else if (hardware_config->use_x86_avx) {
+-      f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__avx_2x16;
+-      f32_prelu_config.row_tile = 2;
+-      f32_prelu_config.channel_tile = 16;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__sse41_2x8;
+-      f32_prelu_config.row_tile = 2;
+-      f32_prelu_config.channel_tile = 8;
+-    } else {
+-      f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__sse2_2x8;
+-      f32_prelu_config.row_tile = 2;
+-      f32_prelu_config.channel_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASMRELAXEDSIMD
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__wasmrelaxedsimd_iminmax_2x4;
+-      f32_prelu_config.row_tile = 2;
+-      f32_prelu_config.channel_tile = 4;
+-    } else {
+-      f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__wasmrelaxedsimd_laneselect_2x4;
+-      f32_prelu_config.row_tile = 2;
+-      f32_prelu_config.channel_tile = 4;
+-    }
+-  #elif XNN_ARCH_WASMSIMD
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__wasmsimd_iminmax_2x8;
+-      f32_prelu_config.row_tile = 2;
+-      f32_prelu_config.channel_tile = 8;
+-    } else {
+-      f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__wasmsimd_laneselect_2x8;
+-      f32_prelu_config.row_tile = 2;
+-      f32_prelu_config.channel_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__scalar_2x4;
+-      f32_prelu_config.row_tile = 2;
+-      f32_prelu_config.channel_tile = 4;
+-    } else {
+-      f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__wasm_2x4;
+-      f32_prelu_config.row_tile = 2;
+-      f32_prelu_config.channel_tile = 4;
+-    }
+-  #elif XNN_ARCH_RISCV
+-    f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__scalar_2x4;
+-    f32_prelu_config.row_tile = 4;
+-    f32_prelu_config.channel_tile = 4;
+-  #endif
+-}
++// static void init_f32_prelu_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__neon_2x8;
++//       f32_prelu_config.row_tile = 2;
++//       f32_prelu_config.channel_tile = 8;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__scalar_2x4;
++//       f32_prelu_config.row_tile = 4;
++//       f32_prelu_config.channel_tile = 4;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__neon_2x8;
++//     f32_prelu_config.row_tile = 2;
++//     f32_prelu_config.channel_tile = 8;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
++//       f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__avx512f_2x16;
++//       f32_prelu_config.row_tile = 2;
++//       f32_prelu_config.channel_tile = 16;
++//     } else if (hardware_config->use_x86_avx) {
++//       f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__avx_2x16;
++//       f32_prelu_config.row_tile = 2;
++//       f32_prelu_config.channel_tile = 16;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__sse41_2x8;
++//       f32_prelu_config.row_tile = 2;
++//       f32_prelu_config.channel_tile = 8;
++//     } else {
++//       f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__sse2_2x8;
++//       f32_prelu_config.row_tile = 2;
++//       f32_prelu_config.channel_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASMRELAXEDSIMD
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__wasmrelaxedsimd_iminmax_2x4;
++//       f32_prelu_config.row_tile = 2;
++//       f32_prelu_config.channel_tile = 4;
++//     } else {
++//       f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__wasmrelaxedsimd_laneselect_2x4;
++//       f32_prelu_config.row_tile = 2;
++//       f32_prelu_config.channel_tile = 4;
++//     }
++//   #elif XNN_ARCH_WASMSIMD
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__wasmsimd_iminmax_2x8;
++//       f32_prelu_config.row_tile = 2;
++//       f32_prelu_config.channel_tile = 8;
++//     } else {
++//       f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__wasmsimd_laneselect_2x8;
++//       f32_prelu_config.row_tile = 2;
++//       f32_prelu_config.channel_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__scalar_2x4;
++//       f32_prelu_config.row_tile = 2;
++//       f32_prelu_config.channel_tile = 4;
++//     } else {
++//       f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__wasm_2x4;
++//       f32_prelu_config.row_tile = 2;
++//       f32_prelu_config.channel_tile = 4;
++//     }
++//   #elif XNN_ARCH_RISCV
++//     f32_prelu_config.ukernel = (xnn_prelu_ukernel_fn) xnn_f32_prelu_ukernel__scalar_2x4;
++//     f32_prelu_config.row_tile = 4;
++//     f32_prelu_config.channel_tile = 4;
++//   #endif
++// }
+ 
+ #if XNN_PLATFORM_WINDOWS
+   static BOOL CALLBACK init_f16_prelu_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_prelu_config();
++    //init_f16_prelu_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_prelu_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_prelu_config();
++    //init_f32_prelu_config();
+     return TRUE;
+   }
+ #endif
+diff --git a/src/raddstoreexpminusmax-config.c b/src/raddstoreexpminusmax-config.c
+index 1148a051d..19a8755f4 100644
+--- a/src/raddstoreexpminusmax-config.c
++++ b/src/raddstoreexpminusmax-config.c
+@@ -29,95 +29,95 @@ static struct xnn_raddstoreexpminusmax_config f32_raddstoreexpminusmax_config =
+   static pthread_once_t init_guard_f32_raddstoreexpminusmax = PTHREAD_ONCE_INIT;
+ #endif
+ 
+-static void init_f16_raddstoreexpminusmax_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_raddstoreexpminusmax_config.ukernel =
+-        (xnn_raddstoreexpminusmax_ukernel_fn) xnn_f16_raddstoreexpminusmax_ukernel__neonfp16arith_rr2_p2_x32;
+-      f16_raddstoreexpminusmax_config.init.f16 = xnn_init_f16_expminus_fp16arith_rr2_p2_params;
+-      f16_raddstoreexpminusmax_config.element_tile = 32;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_raddstoreexpminusmax_config.ukernel =
+-        (xnn_raddstoreexpminusmax_ukernel_fn) xnn_f16_raddstoreexpminusmax_ukernel__neonfp16arith_rr2_p2_x40;
+-      f16_raddstoreexpminusmax_config.init.f16 = xnn_init_f16_expminus_fp16arith_rr2_p2_params;
+-      f16_raddstoreexpminusmax_config.element_tile = 40;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx2) {
+-      f16_raddstoreexpminusmax_config.ukernel =
+-        (xnn_raddstoreexpminusmax_ukernel_fn) xnn_f16_raddstoreexpminusmax_ukernel__avx2_rr1_p2_x40;
+-      f16_raddstoreexpminusmax_config.init.f16 = xnn_init_f16_expminus_avx2_rr1_p2_params;
+-      f16_raddstoreexpminusmax_config.element_tile = 40;
+-    }
+-  #endif
+-}
++// static void init_f16_raddstoreexpminusmax_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_raddstoreexpminusmax_config.ukernel =
++//         (xnn_raddstoreexpminusmax_ukernel_fn) xnn_f16_raddstoreexpminusmax_ukernel__neonfp16arith_rr2_p2_x32;
++//       f16_raddstoreexpminusmax_config.init.f16 = xnn_init_f16_expminus_fp16arith_rr2_p2_params;
++//       f16_raddstoreexpminusmax_config.element_tile = 32;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_raddstoreexpminusmax_config.ukernel =
++//         (xnn_raddstoreexpminusmax_ukernel_fn) xnn_f16_raddstoreexpminusmax_ukernel__neonfp16arith_rr2_p2_x40;
++//       f16_raddstoreexpminusmax_config.init.f16 = xnn_init_f16_expminus_fp16arith_rr2_p2_params;
++//       f16_raddstoreexpminusmax_config.element_tile = 40;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx2) {
++//       f16_raddstoreexpminusmax_config.ukernel =
++//         (xnn_raddstoreexpminusmax_ukernel_fn) xnn_f16_raddstoreexpminusmax_ukernel__avx2_rr1_p2_x40;
++//       f16_raddstoreexpminusmax_config.init.f16 = xnn_init_f16_expminus_avx2_rr1_p2_params;
++//       f16_raddstoreexpminusmax_config.element_tile = 40;
++//     }
++//   #endif
++// }
+ 
+-static void init_f32_raddstoreexpminusmax_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      f32_raddstoreexpminusmax_config.ukernel =
+-        (xnn_raddstoreexpminusmax_ukernel_fn) xnn_f32_raddstoreexpminusmax_ukernel__neon_rr2_lut64_p2_x8;
+-      f32_raddstoreexpminusmax_config.init.f32 = xnn_init_f32_expminus_neon_rr2_lut64_p2_params;
+-      f32_raddstoreexpminusmax_config.element_tile = 8;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_raddstoreexpminusmax_config.ukernel =
+-        (xnn_raddstoreexpminusmax_ukernel_fn) xnn_f32_raddstoreexpminusmax_ukernel__scalar_rr2_p5_x4_acc2;
+-      f32_raddstoreexpminusmax_config.init.f32 = xnn_init_f32_expminus_scalar_rr2_p5_params;
+-      f32_raddstoreexpminusmax_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_raddstoreexpminusmax_config.ukernel =
+-      (xnn_raddstoreexpminusmax_ukernel_fn) xnn_f32_raddstoreexpminusmax_ukernel__neonfma_rr1_lut64_p2_x16;
+-    f32_raddstoreexpminusmax_config.init.f32 = xnn_init_f32_expminus_neonfma_rr1_lut64_p2_params;
+-    f32_raddstoreexpminusmax_config.element_tile = 16;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    f32_raddstoreexpminusmax_config.ukernel =
+-      (xnn_raddstoreexpminusmax_ukernel_fn) xnn_f32_raddstoreexpminusmax_ukernel__sse2_rr2_p5_x20_acc2;
+-    f32_raddstoreexpminusmax_config.init.f32 = xnn_init_f32_expminus_sse2_rr2_p5_params;
+-    f32_raddstoreexpminusmax_config.element_tile = 20;
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    #if XNN_ARCH_WASMRELAXEDSIMD
+-      f32_raddstoreexpminusmax_config.ukernel =
+-        (xnn_raddstoreexpminusmax_ukernel_fn) xnn_f32_raddstoreexpminusmax_ukernel__wasmrelaxedsimd_rr2_p5_x16_acc2;
+-      f32_raddstoreexpminusmax_config.init.f32 = xnn_init_f32_expminus_wasmsimd_rr2_p5_params;
+-      f32_raddstoreexpminusmax_config.element_tile = 16;
+-    #else
+-      f32_raddstoreexpminusmax_config.ukernel =
+-        (xnn_raddstoreexpminusmax_ukernel_fn) xnn_f32_raddstoreexpminusmax_ukernel__wasmsimd_rr2_p5_x16_acc2;
+-      f32_raddstoreexpminusmax_config.init.f32 = xnn_init_f32_expminus_wasmsimd_rr2_p5_params;
+-      f32_raddstoreexpminusmax_config.element_tile = 16;
+-    #endif
+-  #elif XNN_ARCH_WASM
+-    f32_raddstoreexpminusmax_config.ukernel =
+-      (xnn_raddstoreexpminusmax_ukernel_fn) xnn_f32_raddstoreexpminusmax_ukernel__scalar_rr2_p5_x4_acc2;
+-    f32_raddstoreexpminusmax_config.init.f32 = xnn_init_f32_expminus_scalar_rr2_p5_params;
+-    f32_raddstoreexpminusmax_config.element_tile = 4;
+-  #elif XNN_ARCH_RISCV
+-    f32_raddstoreexpminusmax_config.ukernel =
+-      (xnn_raddstoreexpminusmax_ukernel_fn) xnn_f32_raddstoreexpminusmax_ukernel__scalar_rr2_p5_x4_acc2;
+-    f32_raddstoreexpminusmax_config.init.f32 = xnn_init_f32_expminus_scalar_rr2_p5_params;
+-    f32_raddstoreexpminusmax_config.element_tile = 4;
+-  #endif
+-}
++// static void init_f32_raddstoreexpminusmax_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       f32_raddstoreexpminusmax_config.ukernel =
++//         (xnn_raddstoreexpminusmax_ukernel_fn) xnn_f32_raddstoreexpminusmax_ukernel__neon_rr2_lut64_p2_x8;
++//       f32_raddstoreexpminusmax_config.init.f32 = xnn_init_f32_expminus_neon_rr2_lut64_p2_params;
++//       f32_raddstoreexpminusmax_config.element_tile = 8;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_raddstoreexpminusmax_config.ukernel =
++//         (xnn_raddstoreexpminusmax_ukernel_fn) xnn_f32_raddstoreexpminusmax_ukernel__scalar_rr2_p5_x4_acc2;
++//       f32_raddstoreexpminusmax_config.init.f32 = xnn_init_f32_expminus_scalar_rr2_p5_params;
++//       f32_raddstoreexpminusmax_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_raddstoreexpminusmax_config.ukernel =
++//       (xnn_raddstoreexpminusmax_ukernel_fn) xnn_f32_raddstoreexpminusmax_ukernel__neonfma_rr1_lut64_p2_x16;
++//     f32_raddstoreexpminusmax_config.init.f32 = xnn_init_f32_expminus_neonfma_rr1_lut64_p2_params;
++//     f32_raddstoreexpminusmax_config.element_tile = 16;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     f32_raddstoreexpminusmax_config.ukernel =
++//       (xnn_raddstoreexpminusmax_ukernel_fn) xnn_f32_raddstoreexpminusmax_ukernel__sse2_rr2_p5_x20_acc2;
++//     f32_raddstoreexpminusmax_config.init.f32 = xnn_init_f32_expminus_sse2_rr2_p5_params;
++//     f32_raddstoreexpminusmax_config.element_tile = 20;
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     #if XNN_ARCH_WASMRELAXEDSIMD
++//       f32_raddstoreexpminusmax_config.ukernel =
++//         (xnn_raddstoreexpminusmax_ukernel_fn) xnn_f32_raddstoreexpminusmax_ukernel__wasmrelaxedsimd_rr2_p5_x16_acc2;
++//       f32_raddstoreexpminusmax_config.init.f32 = xnn_init_f32_expminus_wasmsimd_rr2_p5_params;
++//       f32_raddstoreexpminusmax_config.element_tile = 16;
++//     #else
++//       f32_raddstoreexpminusmax_config.ukernel =
++//         (xnn_raddstoreexpminusmax_ukernel_fn) xnn_f32_raddstoreexpminusmax_ukernel__wasmsimd_rr2_p5_x16_acc2;
++//       f32_raddstoreexpminusmax_config.init.f32 = xnn_init_f32_expminus_wasmsimd_rr2_p5_params;
++//       f32_raddstoreexpminusmax_config.element_tile = 16;
++//     #endif
++//   #elif XNN_ARCH_WASM
++//     f32_raddstoreexpminusmax_config.ukernel =
++//       (xnn_raddstoreexpminusmax_ukernel_fn) xnn_f32_raddstoreexpminusmax_ukernel__scalar_rr2_p5_x4_acc2;
++//     f32_raddstoreexpminusmax_config.init.f32 = xnn_init_f32_expminus_scalar_rr2_p5_params;
++//     f32_raddstoreexpminusmax_config.element_tile = 4;
++//   #elif XNN_ARCH_RISCV
++//     f32_raddstoreexpminusmax_config.ukernel =
++//       (xnn_raddstoreexpminusmax_ukernel_fn) xnn_f32_raddstoreexpminusmax_ukernel__scalar_rr2_p5_x4_acc2;
++//     f32_raddstoreexpminusmax_config.init.f32 = xnn_init_f32_expminus_scalar_rr2_p5_params;
++//     f32_raddstoreexpminusmax_config.element_tile = 4;
++//   #endif
++// }
+ 
+ #if XNN_PLATFORM_WINDOWS
+   static BOOL CALLBACK init_f16_raddstoreexpminusmax_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_raddstoreexpminusmax_config();
++    //init_f16_raddstoreexpminusmax_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_raddstoreexpminusmax_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_raddstoreexpminusmax_config();
++    //init_f32_raddstoreexpminusmax_config();
+     return TRUE;
+   }
+ #endif
+diff --git a/src/rmax-config.c b/src/rmax-config.c
+index 225495247..bcff69d89 100644
+--- a/src/rmax-config.c
++++ b/src/rmax-config.c
+@@ -32,91 +32,91 @@ static struct xnn_rmax_config u8_rmax_config = {0};
+   static pthread_once_t init_guard_u8_rmax = PTHREAD_ONCE_INIT;
+ #endif
+ 
+-static void init_f16_rmax_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_rmax_config.rmax.f16 = (xnn_rmax_ukernel_fn) xnn_f16_rmax_ukernel__neonfp16arith;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_rmax_config.rmax.f16 = (xnn_rmax_ukernel_fn) xnn_f16_rmax_ukernel__neonfp16arith;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx2) {
+-      f16_rmax_config.rmax.f16 = (xnn_rmax_ukernel_fn) xnn_f16_rmax_ukernel__f16c;
+-    }
+-  #endif
+-}
++// static void init_f16_rmax_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_rmax_config.rmax.f16 = (xnn_rmax_ukernel_fn) xnn_f16_rmax_ukernel__neonfp16arith;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_rmax_config.rmax.f16 = (xnn_rmax_ukernel_fn) xnn_f16_rmax_ukernel__neonfp16arith;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx2) {
++//       f16_rmax_config.rmax.f16 = (xnn_rmax_ukernel_fn) xnn_f16_rmax_ukernel__f16c;
++//     }
++//   #endif
++// }
+ 
+-static void init_f32_rmax_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      f32_rmax_config.rmax.f32 = (xnn_rmax_ukernel_fn) xnn_f32_rmax_ukernel__neon;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_rmax_config.rmax.f32 = (xnn_rmax_ukernel_fn) xnn_f32_rmax_ukernel__scalar;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_rmax_config.rmax.f32 = (xnn_rmax_ukernel_fn) xnn_f32_rmax_ukernel__neon;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    f32_rmax_config.rmax.f32 = (xnn_rmax_ukernel_fn) xnn_f32_rmax_ukernel__sse;
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      f32_rmax_config.rmax.f32 = (xnn_rmax_ukernel_fn) xnn_f32_rmax_ukernel__wasmsimd_x86;
+-    } else {
+-      f32_rmax_config.rmax.f32 = (xnn_rmax_ukernel_fn) xnn_f32_rmax_ukernel__wasmsimd_arm;
+-    }
+-  #elif XNN_ARCH_WASM
+-    f32_rmax_config.rmax.f32 = (xnn_rmax_ukernel_fn) xnn_f32_rmax_ukernel__scalar;
+-  #elif XNN_ARCH_RISCV
+-    f32_rmax_config.rmax.f32 = (xnn_rmax_ukernel_fn) xnn_f32_rmax_ukernel__scalar;
+-  #endif
+-}
++// static void init_f32_rmax_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       f32_rmax_config.rmax.f32 = (xnn_rmax_ukernel_fn) xnn_f32_rmax_ukernel__neon;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_rmax_config.rmax.f32 = (xnn_rmax_ukernel_fn) xnn_f32_rmax_ukernel__scalar;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_rmax_config.rmax.f32 = (xnn_rmax_ukernel_fn) xnn_f32_rmax_ukernel__neon;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     f32_rmax_config.rmax.f32 = (xnn_rmax_ukernel_fn) xnn_f32_rmax_ukernel__sse;
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       f32_rmax_config.rmax.f32 = (xnn_rmax_ukernel_fn) xnn_f32_rmax_ukernel__wasmsimd_x86;
++//     } else {
++//       f32_rmax_config.rmax.f32 = (xnn_rmax_ukernel_fn) xnn_f32_rmax_ukernel__wasmsimd_arm;
++//     }
++//   #elif XNN_ARCH_WASM
++//     f32_rmax_config.rmax.f32 = (xnn_rmax_ukernel_fn) xnn_f32_rmax_ukernel__scalar;
++//   #elif XNN_ARCH_RISCV
++//     f32_rmax_config.rmax.f32 = (xnn_rmax_ukernel_fn) xnn_f32_rmax_ukernel__scalar;
++//   #endif
++// }
+ 
+-static void init_u8_rmax_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      u8_rmax_config.rmax.u8 = xnn_u8_rmax_ukernel__neon;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      u8_rmax_config.rmax.u8 = xnn_u8_rmax_ukernel__scalar;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    u8_rmax_config.rmax.u8 = xnn_u8_rmax_ukernel__neon;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    u8_rmax_config.rmax.u8 = xnn_u8_rmax_ukernel__sse2;
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    u8_rmax_config.rmax.u8 = xnn_u8_rmax_ukernel__scalar;
+-  #elif XNN_ARCH_WASM
+-    u8_rmax_config.rmax.u8 = xnn_u8_rmax_ukernel__scalar;
+-  #elif XNN_ARCH_RISCV
+-    u8_rmax_config.rmax.u8 = xnn_u8_rmax_ukernel__scalar;
+-  #endif
+-}
++// static void init_u8_rmax_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       u8_rmax_config.rmax.u8 = xnn_u8_rmax_ukernel__neon;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       u8_rmax_config.rmax.u8 = xnn_u8_rmax_ukernel__scalar;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     u8_rmax_config.rmax.u8 = xnn_u8_rmax_ukernel__neon;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     u8_rmax_config.rmax.u8 = xnn_u8_rmax_ukernel__sse2;
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     u8_rmax_config.rmax.u8 = xnn_u8_rmax_ukernel__scalar;
++//   #elif XNN_ARCH_WASM
++//     u8_rmax_config.rmax.u8 = xnn_u8_rmax_ukernel__scalar;
++//   #elif XNN_ARCH_RISCV
++//     u8_rmax_config.rmax.u8 = xnn_u8_rmax_ukernel__scalar;
++//   #endif
++// }
+ 
+ #if XNN_PLATFORM_WINDOWS
+   static BOOL CALLBACK init_f16_rmax_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_rmax_config();
++    //init_f16_rmax_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_rmax_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_rmax_config();
++    //init_f32_rmax_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_u8_rmax_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_u8_rmax_config();
++    //init_u8_rmax_config();
+     return TRUE;
+   }
+ #endif
+diff --git a/src/spmm-config.c b/src/spmm-config.c
+index 0d234abbe..aa97da079 100644
+--- a/src/spmm-config.c
++++ b/src/spmm-config.c
+@@ -35,152 +35,152 @@ static struct xnn_spmm_config f32_spmm4_config = {0};
+   static pthread_once_t init_guard_f32_spmm4 = PTHREAD_ONCE_INIT;
+ #endif
+ 
+-static void init_f16_spmm_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_spmm_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f16_spmm_minmax_ukernel_32x1__neonfp16arith_pipelined;
+-      f16_spmm_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
+-      f16_spmm_config.mr = 32;
+-      f16_spmm_config.nr = 1;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_spmm_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f16_spmm_minmax_ukernel_32x1__neonfp16arith_pipelined;
+-      f16_spmm_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
+-      f16_spmm_config.mr = 32;
+-      f16_spmm_config.nr = 1;
+-    }
+-  #endif
+-}
+-
+-static void init_f32_spmm_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      f32_spmm_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_32x1__neon;
+-      f32_spmm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_spmm_config.mr = 32;
+-      f32_spmm_config.nr = 1;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_spmm_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_8x1__scalar;
+-      f32_spmm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_spmm_config.mr = 8;
+-      f32_spmm_config.nr = 1;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_spmm_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_32x1__neonfma_pipelined;
+-    f32_spmm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_spmm_config.mr = 32;
+-    f32_spmm_config.nr = 1;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    f32_spmm_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_32x1__sse;
+-    f32_spmm_config.init.f32 = xnn_init_f32_minmax_sse_params;
+-    f32_spmm_config.mr = 32;
+-    f32_spmm_config.nr = 1;
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      f32_spmm_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_32x1__wasmsimd_x86;
+-      f32_spmm_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-      f32_spmm_config.mr = 32;
+-      f32_spmm_config.nr = 1;
+-    } else {
+-      f32_spmm_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_32x1__wasmsimd_arm;
+-      f32_spmm_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-      f32_spmm_config.mr = 32;
+-      f32_spmm_config.nr = 1;
+-    }
+-  #elif XNN_ARCH_WASM
+-    f32_spmm_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_8x1__scalar;
+-    f32_spmm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_spmm_config.mr = 8;
+-    f32_spmm_config.nr = 1;
+-  #elif XNN_ARCH_RISCV
+-    f32_spmm_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_8x1__scalar;
+-    f32_spmm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_spmm_config.mr = 8;
+-    f32_spmm_config.nr = 1;
+-  #endif
+-}
+-
+-static void init_f32_spmm2_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      f32_spmm2_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_8x2__scalar;
+-      f32_spmm2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_spmm2_config.mr = 8;
+-      f32_spmm2_config.nr = 2;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_spmm2_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_32x2__aarch64_neonfma;
+-    f32_spmm2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_spmm2_config.mr = 32;
+-    f32_spmm2_config.nr = 2;
+-  #elif XNN_ARCH_WASM
+-    f32_spmm2_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_8x2__scalar;
+-    f32_spmm2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_spmm2_config.mr = 8;
+-    f32_spmm2_config.nr = 2;
+-  #elif XNN_ARCH_RISCV
+-    f32_spmm2_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_8x2__scalar;
+-    f32_spmm2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_spmm2_config.mr = 8;
+-    f32_spmm2_config.nr = 2;
+-  #endif
+-}
+-
+-static void init_f32_spmm4_config(void) {
+-  #if XNN_ARCH_ARM
+-    if (!XNN_PLATFORM_MOBILE) {
+-      f32_spmm4_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_8x4__scalar;
+-      f32_spmm4_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_spmm4_config.mr = 8;
+-      f32_spmm4_config.nr = 4;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_spmm4_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_32x4__aarch64_neonfma;
+-    f32_spmm4_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_spmm4_config.mr = 32;
+-    f32_spmm4_config.nr = 4;
+-  #elif XNN_ARCH_WASM
+-    f32_spmm4_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_8x4__scalar;
+-    f32_spmm4_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_spmm4_config.mr = 8;
+-    f32_spmm4_config.nr = 4;
+-  #elif XNN_ARCH_RISCV
+-    f32_spmm4_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_8x4__scalar;
+-    f32_spmm4_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_spmm4_config.mr = 8;
+-    f32_spmm4_config.nr = 4;
+-  #endif
+-}
++// static void init_f16_spmm_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_spmm_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f16_spmm_minmax_ukernel_32x1__neonfp16arith_pipelined;
++//       f16_spmm_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
++//       f16_spmm_config.mr = 32;
++//       f16_spmm_config.nr = 1;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_spmm_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f16_spmm_minmax_ukernel_32x1__neonfp16arith_pipelined;
++//       f16_spmm_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
++//       f16_spmm_config.mr = 32;
++//       f16_spmm_config.nr = 1;
++//     }
++//   #endif
++// }
++
++// static void init_f32_spmm_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       f32_spmm_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_32x1__neon;
++//       f32_spmm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_spmm_config.mr = 32;
++//       f32_spmm_config.nr = 1;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_spmm_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_8x1__scalar;
++//       f32_spmm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_spmm_config.mr = 8;
++//       f32_spmm_config.nr = 1;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_spmm_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_32x1__neonfma_pipelined;
++//     f32_spmm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_spmm_config.mr = 32;
++//     f32_spmm_config.nr = 1;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     f32_spmm_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_32x1__sse;
++//     f32_spmm_config.init.f32 = xnn_init_f32_minmax_sse_params;
++//     f32_spmm_config.mr = 32;
++//     f32_spmm_config.nr = 1;
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       f32_spmm_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_32x1__wasmsimd_x86;
++//       f32_spmm_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//       f32_spmm_config.mr = 32;
++//       f32_spmm_config.nr = 1;
++//     } else {
++//       f32_spmm_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_32x1__wasmsimd_arm;
++//       f32_spmm_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//       f32_spmm_config.mr = 32;
++//       f32_spmm_config.nr = 1;
++//     }
++//   #elif XNN_ARCH_WASM
++//     f32_spmm_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_8x1__scalar;
++//     f32_spmm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_spmm_config.mr = 8;
++//     f32_spmm_config.nr = 1;
++//   #elif XNN_ARCH_RISCV
++//     f32_spmm_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_8x1__scalar;
++//     f32_spmm_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_spmm_config.mr = 8;
++//     f32_spmm_config.nr = 1;
++//   #endif
++// }
++
++// static void init_f32_spmm2_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       f32_spmm2_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_8x2__scalar;
++//       f32_spmm2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_spmm2_config.mr = 8;
++//       f32_spmm2_config.nr = 2;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_spmm2_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_32x2__aarch64_neonfma;
++//     f32_spmm2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_spmm2_config.mr = 32;
++//     f32_spmm2_config.nr = 2;
++//   #elif XNN_ARCH_WASM
++//     f32_spmm2_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_8x2__scalar;
++//     f32_spmm2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_spmm2_config.mr = 8;
++//     f32_spmm2_config.nr = 2;
++//   #elif XNN_ARCH_RISCV
++//     f32_spmm2_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_8x2__scalar;
++//     f32_spmm2_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_spmm2_config.mr = 8;
++//     f32_spmm2_config.nr = 2;
++//   #endif
++// }
++
++// static void init_f32_spmm4_config(void) {
++//   #if XNN_ARCH_ARM
++//     if (!XNN_PLATFORM_MOBILE) {
++//       f32_spmm4_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_8x4__scalar;
++//       f32_spmm4_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_spmm4_config.mr = 8;
++//       f32_spmm4_config.nr = 4;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_spmm4_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_32x4__aarch64_neonfma;
++//     f32_spmm4_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_spmm4_config.mr = 32;
++//     f32_spmm4_config.nr = 4;
++//   #elif XNN_ARCH_WASM
++//     f32_spmm4_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_8x4__scalar;
++//     f32_spmm4_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_spmm4_config.mr = 8;
++//     f32_spmm4_config.nr = 4;
++//   #elif XNN_ARCH_RISCV
++//     f32_spmm4_config.ukernel = (xnn_spmm_ukernel_fn) xnn_f32_spmm_minmax_ukernel_8x4__scalar;
++//     f32_spmm4_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_spmm4_config.mr = 8;
++//     f32_spmm4_config.nr = 4;
++//   #endif
++// }
+ 
+ #if XNN_PLATFORM_WINDOWS
+   static BOOL CALLBACK init_f16_spmm_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_spmm_config();
++    //init_f16_spmm_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_spmm_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_spmm_config();
++    //init_f32_spmm_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_spmm2_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_spmm2_config();
++    //init_f32_spmm2_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_spmm4_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_spmm4_config();
++    //init_f32_spmm4_config();
+     return TRUE;
+   }
+ #endif
+diff --git a/src/transpose-config.c b/src/transpose-config.c
+index a63176c8b..d60529de8 100644
+--- a/src/transpose-config.c
++++ b/src/transpose-config.c
+@@ -27,206 +27,206 @@ static struct xnn_transpose_config transpose_config = {0};
+   static pthread_once_t init_guard = PTHREAD_ONCE_INIT;
+ #endif
+ 
+-static void init_transpose_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
++// static void init_transpose_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
+ 
+-    if (hardware_config->use_arm_neon) {
+-      transpose_config.copy = (xnn_vunary_ukernel_fn) xnn_xx_copy_ukernel__scalar_memcpy;
+-      transpose_config.x8 = (struct xnn_transpose_subconfig) {
+-        .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x8_transposec_ukernel__16x16_reuse_dec_zip_neon,
+-        .tile_size = 32,
+-      };
+-      transpose_config.x16 = (struct xnn_transpose_subconfig) {
+-        .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x16_transposec_ukernel__8x8_reuse_dec_zip_neon,
+-        .tile_size = 32,
+-      };
+-      transpose_config.x24 = (struct xnn_transpose_subconfig) {
+-        .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x24_transposec_ukernel__2x2_neon_tbl64,
+-        .init.x24 = (xnn_init_x24_transpose_params_fn) xnn_init_x24_transpose_neon_tbl64_params,
+-        .tile_size = 32,
+-      };
+-      transpose_config.x32 = (struct xnn_transpose_subconfig) {
+-        .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x32_transposec_ukernel__4x4_reuse_dec_zip_neon,
+-        .tile_size = 32,
+-      };
+-      transpose_config.xx = (struct xnn_transpose_subconfig) {
+-        .variable_size_ukernel = xnn_xx_transposev_ukernel__1x1_scalar_memcpy,
+-        .tile_size = 32,
+-      };
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      transpose_config.copy = (xnn_vunary_ukernel_fn) xnn_xx_copy_ukernel__scalar_memcpy;
+-      transpose_config.x8 = (struct xnn_transpose_subconfig) {
+-        .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x8_transposec_ukernel__2x4_scalar_int,
+-        .tile_size = 32,
+-      };
+-      transpose_config.x16 = (struct xnn_transpose_subconfig) {
+-        .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x16_transposec_ukernel__2x4_scalar_int,
+-        .tile_size = 32,
+-      };
+-      transpose_config.x24 = (struct xnn_transpose_subconfig) {
+-        .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x24_transposec_ukernel__1x2_scalar,
+-        .tile_size = 32,
+-      };
+-      transpose_config.x32 = (struct xnn_transpose_subconfig) {
+-        .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x32_transposec_ukernel__2x4_scalar_int,
+-        .tile_size = 32,
+-      };
+-      transpose_config.xx = (struct xnn_transpose_subconfig) {
+-        .variable_size_ukernel = xnn_xx_transposev_ukernel__1x1_scalar_memcpy,
+-        .tile_size = 32,
+-      };
+-    }
+-  #elif XNN_ARCH_ARM64
+-    transpose_config.copy = (xnn_vunary_ukernel_fn) xnn_xx_copy_ukernel__scalar_memcpy;
+-    transpose_config.x8 = (struct xnn_transpose_subconfig) {
+-      .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x8_transposec_ukernel__16x16_reuse_dec_zip_neon,
+-      .tile_size = 32,
+-    };
+-    transpose_config.x16 = (struct xnn_transpose_subconfig) {
+-      .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x16_transposec_ukernel__8x8_reuse_dec_zip_neon,
+-      .tile_size = 32,
+-    };
+-    transpose_config.x24 = (struct xnn_transpose_subconfig) {
+-      .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x24_transposec_ukernel__4x4_aarch64_neon_tbl128,
+-      .init.x24 = (xnn_init_x24_transpose_params_fn) xnn_init_x24_transpose_neon_tbl128_params,
+-      .tile_size = 32,
+-    };
+-    transpose_config.x32 = (struct xnn_transpose_subconfig) {
+-      .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x32_transposec_ukernel__4x4_aarch64_neon_tbl128,
+-      .tile_size = 32,
+-      .init.x32 = (xnn_init_x32_transpose_params_fn) xnn_init_x32_transpose_neon_tbl128_params,
+-    };
+-    transpose_config.xx = (struct xnn_transpose_subconfig) {
+-      .variable_size_ukernel = xnn_xx_transposev_ukernel__1x1_scalar_memcpy,
+-      .tile_size = 32,
+-    };
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       transpose_config.copy = (xnn_vunary_ukernel_fn) xnn_xx_copy_ukernel__scalar_memcpy;
++//       transpose_config.x8 = (struct xnn_transpose_subconfig) {
++//         .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x8_transposec_ukernel__16x16_reuse_dec_zip_neon,
++//         .tile_size = 32,
++//       };
++//       transpose_config.x16 = (struct xnn_transpose_subconfig) {
++//         .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x16_transposec_ukernel__8x8_reuse_dec_zip_neon,
++//         .tile_size = 32,
++//       };
++//       transpose_config.x24 = (struct xnn_transpose_subconfig) {
++//         .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x24_transposec_ukernel__2x2_neon_tbl64,
++//         .init.x24 = (xnn_init_x24_transpose_params_fn) xnn_init_x24_transpose_neon_tbl64_params,
++//         .tile_size = 32,
++//       };
++//       transpose_config.x32 = (struct xnn_transpose_subconfig) {
++//         .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x32_transposec_ukernel__4x4_reuse_dec_zip_neon,
++//         .tile_size = 32,
++//       };
++//       transpose_config.xx = (struct xnn_transpose_subconfig) {
++//         .variable_size_ukernel = xnn_xx_transposev_ukernel__1x1_scalar_memcpy,
++//         .tile_size = 32,
++//       };
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       transpose_config.copy = (xnn_vunary_ukernel_fn) xnn_xx_copy_ukernel__scalar_memcpy;
++//       transpose_config.x8 = (struct xnn_transpose_subconfig) {
++//         .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x8_transposec_ukernel__2x4_scalar_int,
++//         .tile_size = 32,
++//       };
++//       transpose_config.x16 = (struct xnn_transpose_subconfig) {
++//         .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x16_transposec_ukernel__2x4_scalar_int,
++//         .tile_size = 32,
++//       };
++//       transpose_config.x24 = (struct xnn_transpose_subconfig) {
++//         .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x24_transposec_ukernel__1x2_scalar,
++//         .tile_size = 32,
++//       };
++//       transpose_config.x32 = (struct xnn_transpose_subconfig) {
++//         .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x32_transposec_ukernel__2x4_scalar_int,
++//         .tile_size = 32,
++//       };
++//       transpose_config.xx = (struct xnn_transpose_subconfig) {
++//         .variable_size_ukernel = xnn_xx_transposev_ukernel__1x1_scalar_memcpy,
++//         .tile_size = 32,
++//       };
++//     }
++//   #elif XNN_ARCH_ARM64
++//     transpose_config.copy = (xnn_vunary_ukernel_fn) xnn_xx_copy_ukernel__scalar_memcpy;
++//     transpose_config.x8 = (struct xnn_transpose_subconfig) {
++//       .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x8_transposec_ukernel__16x16_reuse_dec_zip_neon,
++//       .tile_size = 32,
++//     };
++//     transpose_config.x16 = (struct xnn_transpose_subconfig) {
++//       .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x16_transposec_ukernel__8x8_reuse_dec_zip_neon,
++//       .tile_size = 32,
++//     };
++//     transpose_config.x24 = (struct xnn_transpose_subconfig) {
++//       .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x24_transposec_ukernel__4x4_aarch64_neon_tbl128,
++//       .init.x24 = (xnn_init_x24_transpose_params_fn) xnn_init_x24_transpose_neon_tbl128_params,
++//       .tile_size = 32,
++//     };
++//     transpose_config.x32 = (struct xnn_transpose_subconfig) {
++//       .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x32_transposec_ukernel__4x4_aarch64_neon_tbl128,
++//       .tile_size = 32,
++//       .init.x32 = (xnn_init_x32_transpose_params_fn) xnn_init_x32_transpose_neon_tbl128_params,
++//     };
++//     transpose_config.xx = (struct xnn_transpose_subconfig) {
++//       .variable_size_ukernel = xnn_xx_transposev_ukernel__1x1_scalar_memcpy,
++//       .tile_size = 32,
++//     };
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
+ 
+-    transpose_config.copy = (xnn_vunary_ukernel_fn) xnn_xx_copy_ukernel__scalar_memcpy;
+-    transpose_config.xx = (struct xnn_transpose_subconfig) {
+-      .variable_size_ukernel = xnn_xx_transposev_ukernel__1x1_scalar_memcpy,
+-      .tile_size = 32,
+-    };
+-    transpose_config.x8 = (struct xnn_transpose_subconfig) {
+-      .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x8_transposec_ukernel__16x16_reuse_mov_sse2,
+-      .tile_size = 32,
+-    };
+-    transpose_config.x16 = (struct xnn_transpose_subconfig) {
+-      .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x16_transposec_ukernel__8x8_reuse_multi_sse2,
+-      .tile_size = 32,
+-    };
+-    transpose_config.x24 = (struct xnn_transpose_subconfig) {
+-      .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x24_transposec_ukernel__1x2_scalar,
+-      .tile_size = 32,
+-    };
+-    transpose_config.x32 = (struct xnn_transpose_subconfig) {
+-      .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x32_transposec_ukernel__4x4_sse,
+-      .tile_size = 32,
+-    };
+-    if (hardware_config->use_x86_ssse3) {
+-      transpose_config.x24 = (struct xnn_transpose_subconfig) {
+-        .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x24_transposec_ukernel__4x4_ssse3,
+-        .init.x24 = (xnn_init_x24_transpose_params_fn) xnn_init_x24_transpose_ssse3_params,
+-        .tile_size = 32,
+-      };
+-    }
+-    if (hardware_config->use_x86_avx) {
+-      transpose_config.x32 = (struct xnn_transpose_subconfig) {
+-        .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x32_transposec_ukernel__8x8_reuse_multi_avx,
+-        .init.x32 = (xnn_init_x32_transpose_params_fn) xnn_init_x32_transpose_avx_params,
+-        .tile_size = 32,
+-      };
+-    }
+-    if (hardware_config->use_x86_avx2) {
+-      transpose_config.x8 = (struct xnn_transpose_subconfig) {
+-        .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x8_transposec_ukernel__32x32_reuse_switch_avx2,
+-        .init.x8 = (xnn_init_x8_transpose_params_fn) xnn_init_x8_transpose_avx2_params,
+-        .tile_size = 32,
+-      };
+-      transpose_config.x16 = (struct xnn_transpose_subconfig) {
+-        .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x16_transposec_ukernel__16x16_reuse_switch_avx2,
+-        .init.x16 = (xnn_init_x16_transpose_params_fn) xnn_init_x16_transpose_avx2_params,
+-        .tile_size = 32,
+-      };
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    transpose_config.copy = (xnn_vunary_ukernel_fn) xnn_xx_copy_ukernel__scalar_memcpy;
+-    transpose_config.x8 = (struct xnn_transpose_subconfig) {
+-      .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x8_transposec_ukernel__16x16_reuse_mov_wasmsimd,
+-      .tile_size = 32,
+-    };
+-    transpose_config.x16 = (struct xnn_transpose_subconfig) {
+-      .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x16_transposec_ukernel__8x8_reuse_mov_wasmsimd,
+-      .tile_size = 32,
+-    };
+-    transpose_config.x24 = (struct xnn_transpose_subconfig) {
+-      .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x24_transposec_ukernel__1x2_scalar,
+-      .tile_size = 32,
+-    };
+-    transpose_config.x32 = (struct xnn_transpose_subconfig) {
+-      .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x32_transposec_ukernel__4x4_reuse_mov_wasmsimd,
+-      .tile_size = 32,
+-    };
+-    transpose_config.xx = (struct xnn_transpose_subconfig) {
+-      .variable_size_ukernel = xnn_xx_transposev_ukernel__1x1_scalar_memcpy,
+-      .tile_size = 32,
+-    };
+-  #elif XNN_ARCH_WASM
+-    transpose_config.copy = (xnn_vunary_ukernel_fn) xnn_xx_copy_ukernel__scalar_memcpy;
+-    transpose_config.x8 = (struct xnn_transpose_subconfig) {
+-      .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x8_transposec_ukernel__2x4_scalar_int,
+-      .tile_size = 32,
+-    };
+-    transpose_config.x16 = (struct xnn_transpose_subconfig) {
+-      .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x16_transposec_ukernel__2x4_scalar_int,
+-      .tile_size = 32,
+-    };
+-    transpose_config.x24 = (struct xnn_transpose_subconfig) {
+-      .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x24_transposec_ukernel__1x2_scalar,
+-      .tile_size = 32,
+-    };
+-    transpose_config.x32 = (struct xnn_transpose_subconfig) {
+-      .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x32_transposec_ukernel__2x4_scalar_int,
+-      .tile_size = 32,
+-    };
+-    transpose_config.xx = (struct xnn_transpose_subconfig) {
+-      .variable_size_ukernel = xnn_xx_transposev_ukernel__1x1_scalar_memcpy,
+-      .tile_size = 32,
+-    };
+-  #elif XNN_ARCH_RISCV
+-    transpose_config.copy = (xnn_vunary_ukernel_fn) xnn_xx_copy_ukernel__scalar_memcpy;
+-    transpose_config.x8 = (struct xnn_transpose_subconfig) {
+-      .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x8_transposec_ukernel__2x4_scalar_int,
+-      .tile_size = 32,
+-    };
+-    transpose_config.x16 = (struct xnn_transpose_subconfig) {
+-      .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x16_transposec_ukernel__2x4_scalar_int,
+-      .tile_size = 32,
+-    };
+-    transpose_config.x24 = (struct xnn_transpose_subconfig) {
+-      .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x24_transposec_ukernel__1x2_scalar,
+-      .tile_size = 32,
+-    };
+-    transpose_config.x32 = (struct xnn_transpose_subconfig) {
+-      .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x32_transposec_ukernel__2x4_scalar_int,
+-      .tile_size = 32,
+-    };
+-    transpose_config.xx = (struct xnn_transpose_subconfig) {
+-      .variable_size_ukernel = xnn_xx_transposev_ukernel__1x1_scalar_memcpy,
+-      .tile_size = 32,
+-    };
+-  #else
+-    #error "Unsupported architecture"
+-  #endif
+-}
++//     transpose_config.copy = (xnn_vunary_ukernel_fn) xnn_xx_copy_ukernel__scalar_memcpy;
++//     transpose_config.xx = (struct xnn_transpose_subconfig) {
++//       .variable_size_ukernel = xnn_xx_transposev_ukernel__1x1_scalar_memcpy,
++//       .tile_size = 32,
++//     };
++//     transpose_config.x8 = (struct xnn_transpose_subconfig) {
++//       .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x8_transposec_ukernel__16x16_reuse_mov_sse2,
++//       .tile_size = 32,
++//     };
++//     transpose_config.x16 = (struct xnn_transpose_subconfig) {
++//       .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x16_transposec_ukernel__8x8_reuse_multi_sse2,
++//       .tile_size = 32,
++//     };
++//     transpose_config.x24 = (struct xnn_transpose_subconfig) {
++//       .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x24_transposec_ukernel__1x2_scalar,
++//       .tile_size = 32,
++//     };
++//     transpose_config.x32 = (struct xnn_transpose_subconfig) {
++//       .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x32_transposec_ukernel__4x4_sse,
++//       .tile_size = 32,
++//     };
++//     if (hardware_config->use_x86_ssse3) {
++//       transpose_config.x24 = (struct xnn_transpose_subconfig) {
++//         .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x24_transposec_ukernel__4x4_ssse3,
++//         .init.x24 = (xnn_init_x24_transpose_params_fn) xnn_init_x24_transpose_ssse3_params,
++//         .tile_size = 32,
++//       };
++//     }
++//     if (hardware_config->use_x86_avx) {
++//       transpose_config.x32 = (struct xnn_transpose_subconfig) {
++//         .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x32_transposec_ukernel__8x8_reuse_multi_avx,
++//         .init.x32 = (xnn_init_x32_transpose_params_fn) xnn_init_x32_transpose_avx_params,
++//         .tile_size = 32,
++//       };
++//     }
++//     if (hardware_config->use_x86_avx2) {
++//       transpose_config.x8 = (struct xnn_transpose_subconfig) {
++//         .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x8_transposec_ukernel__32x32_reuse_switch_avx2,
++//         .init.x8 = (xnn_init_x8_transpose_params_fn) xnn_init_x8_transpose_avx2_params,
++//         .tile_size = 32,
++//       };
++//       transpose_config.x16 = (struct xnn_transpose_subconfig) {
++//         .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x16_transposec_ukernel__16x16_reuse_switch_avx2,
++//         .init.x16 = (xnn_init_x16_transpose_params_fn) xnn_init_x16_transpose_avx2_params,
++//         .tile_size = 32,
++//       };
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     transpose_config.copy = (xnn_vunary_ukernel_fn) xnn_xx_copy_ukernel__scalar_memcpy;
++//     transpose_config.x8 = (struct xnn_transpose_subconfig) {
++//       .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x8_transposec_ukernel__16x16_reuse_mov_wasmsimd,
++//       .tile_size = 32,
++//     };
++//     transpose_config.x16 = (struct xnn_transpose_subconfig) {
++//       .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x16_transposec_ukernel__8x8_reuse_mov_wasmsimd,
++//       .tile_size = 32,
++//     };
++//     transpose_config.x24 = (struct xnn_transpose_subconfig) {
++//       .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x24_transposec_ukernel__1x2_scalar,
++//       .tile_size = 32,
++//     };
++//     transpose_config.x32 = (struct xnn_transpose_subconfig) {
++//       .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x32_transposec_ukernel__4x4_reuse_mov_wasmsimd,
++//       .tile_size = 32,
++//     };
++//     transpose_config.xx = (struct xnn_transpose_subconfig) {
++//       .variable_size_ukernel = xnn_xx_transposev_ukernel__1x1_scalar_memcpy,
++//       .tile_size = 32,
++//     };
++//   #elif XNN_ARCH_WASM
++//     transpose_config.copy = (xnn_vunary_ukernel_fn) xnn_xx_copy_ukernel__scalar_memcpy;
++//     transpose_config.x8 = (struct xnn_transpose_subconfig) {
++//       .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x8_transposec_ukernel__2x4_scalar_int,
++//       .tile_size = 32,
++//     };
++//     transpose_config.x16 = (struct xnn_transpose_subconfig) {
++//       .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x16_transposec_ukernel__2x4_scalar_int,
++//       .tile_size = 32,
++//     };
++//     transpose_config.x24 = (struct xnn_transpose_subconfig) {
++//       .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x24_transposec_ukernel__1x2_scalar,
++//       .tile_size = 32,
++//     };
++//     transpose_config.x32 = (struct xnn_transpose_subconfig) {
++//       .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x32_transposec_ukernel__2x4_scalar_int,
++//       .tile_size = 32,
++//     };
++//     transpose_config.xx = (struct xnn_transpose_subconfig) {
++//       .variable_size_ukernel = xnn_xx_transposev_ukernel__1x1_scalar_memcpy,
++//       .tile_size = 32,
++//     };
++//   #elif XNN_ARCH_RISCV
++//     transpose_config.copy = (xnn_vunary_ukernel_fn) xnn_xx_copy_ukernel__scalar_memcpy;
++//     transpose_config.x8 = (struct xnn_transpose_subconfig) {
++//       .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x8_transposec_ukernel__2x4_scalar_int,
++//       .tile_size = 32,
++//     };
++//     transpose_config.x16 = (struct xnn_transpose_subconfig) {
++//       .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x16_transposec_ukernel__2x4_scalar_int,
++//       .tile_size = 32,
++//     };
++//     transpose_config.x24 = (struct xnn_transpose_subconfig) {
++//       .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x24_transposec_ukernel__1x2_scalar,
++//       .tile_size = 32,
++//     };
++//     transpose_config.x32 = (struct xnn_transpose_subconfig) {
++//       .const_size_ukernel = (xnn_transposec_ukernel_fn) xnn_x32_transposec_ukernel__2x4_scalar_int,
++//       .tile_size = 32,
++//     };
++//     transpose_config.xx = (struct xnn_transpose_subconfig) {
++//       .variable_size_ukernel = xnn_xx_transposev_ukernel__1x1_scalar_memcpy,
++//       .tile_size = 32,
++//     };
++//   #else
++//     #error "Unsupported architecture"
++//   #endif
++// }
+ 
+ #if XNN_PLATFORM_WINDOWS
+   static BOOL CALLBACK init_transpose_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_transpose_config();
++    //init_transpose_config();
+     return TRUE;
+   }
+ #endif
+diff --git a/src/unary-elementwise-config.c b/src/unary-elementwise-config.c
+index 222b462e2..15b165bf4 100644
+--- a/src/unary-elementwise-config.c
++++ b/src/unary-elementwise-config.c
+@@ -155,2205 +155,2205 @@ static struct xnn_unary_elementwise_config xx_copy_config = {0};
+ #endif
+ 
+ 
+-static void init_f16_abs_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_abs_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vabs_ukernel__neonfp16arith_x16;
+-      f16_abs_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_abs_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vabs_ukernel__neonfp16arith_x16;
+-      f16_abs_config.element_tile = 16;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    f16_abs_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vabs_ukernel__sse2_x16;
+-    f16_abs_config.init.f16_abs = xnn_init_f16_abs_sse_params;
+-    f16_abs_config.element_tile = 16;
+-  #endif
+-}
+-
+-static void init_f16_clamp_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vclamp_ukernel__neonfp16arith_x16;
+-      f16_clamp_config.init.f16_minmax = xnn_init_f16_minmax_fp16arith_params;
+-      f16_clamp_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vclamp_ukernel__neonfp16arith_x16;
+-      f16_clamp_config.init.f16_minmax = xnn_init_f16_minmax_fp16arith_params;
+-      f16_clamp_config.element_tile = 16;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_f16c) {
+-      f16_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vclamp_ukernel__f16c_x16;
+-      f16_clamp_config.init.f16_minmax = xnn_init_f16_minmax_avx_params;
+-      f16_clamp_config.element_tile = 16;
+-    }
+-  #endif
+-}
+-
+-static void init_f16_elu_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_velu_ukernel__neonfp16arith_rr1_p3_x16;
+-      f16_elu_config.init.f16_elu = xnn_init_f16_elu_fp16arith_rr1_p3_params;
+-      f16_elu_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_velu_ukernel__neonfp16arith_rr1_p3_x16;
+-      f16_elu_config.init.f16_elu = xnn_init_f16_elu_fp16arith_rr1_p3_params;
+-      f16_elu_config.element_tile = 16;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx2) {
+-      f16_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_velu_ukernel__avx2_rr1_p3_x16;
+-      f16_elu_config.init.f16_elu = xnn_init_f16_elu_avx2_rr1_p3_params;
+-      f16_elu_config.element_tile = 16;
+-    }
+-  #endif
+-}
+-
+-static void init_f16_hswish_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vhswish_ukernel__neonfp16arith_x16;
+-      f16_hswish_config.init.f16_hswish = xnn_init_f16_hswish_fp16arith_params;
+-      f16_hswish_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vhswish_ukernel__neonfp16arith_x16;
+-      f16_hswish_config.init.f16_hswish = xnn_init_f16_hswish_fp16arith_params;
+-      f16_hswish_config.element_tile = 16;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_f16c) {
+-      f16_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vhswish_ukernel__f16c_x16;
+-      f16_hswish_config.init.f16_hswish = xnn_init_f16_hswish_avx_params;
+-      f16_hswish_config.element_tile = 16;
+-    }
+-  #endif
+-}
+-
+-static void init_f16_lrelu_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vlrelu_ukernel__neonfp16arith_x16;
+-      f16_lrelu_config.init.f16_lrelu = xnn_init_f16_lrelu_fp16arith_params;
+-      f16_lrelu_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vlrelu_ukernel__neonfp16arith_x16;
+-      f16_lrelu_config.init.f16_lrelu = xnn_init_f16_lrelu_fp16arith_params;
+-      f16_lrelu_config.element_tile = 16;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_f16c) {
+-      f16_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vlrelu_ukernel__f16c_x16;
+-      f16_lrelu_config.init.f16_lrelu = xnn_init_f16_lrelu_avx_params;
+-      f16_lrelu_config.element_tile = 16;
+-    }
+-  #endif
+-}
+-
+-static void init_f16_neg_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_neg_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vneg_ukernel__neonfp16arith_x16;
+-      f16_neg_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_neg_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vneg_ukernel__neonfp16arith_x16;
+-      f16_neg_config.element_tile = 16;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    f16_neg_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vneg_ukernel__sse2_x16;
+-    f16_neg_config.init.f16_neg = xnn_init_f16_neg_sse_params;
+-    f16_neg_config.element_tile = 16;
+-  #endif
+-}
+-
+-static void init_f16_rndd_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vrndd_ukernel__neonfp16arith_x16;
+-      f16_rndd_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vrndd_ukernel__neonfp16arith_x16;
+-      f16_rndd_config.element_tile = 16;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_f16c) {
+-      f16_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vrndd_ukernel__f16c_x16;
+-      f16_rndd_config.element_tile = 16;
+-    }
+-  #endif
+-}
+-
+-static void init_f16_rndne_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vrndne_ukernel__neonfp16arith_x16;
+-      f16_rndne_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vrndne_ukernel__neonfp16arith_x16;
+-      f16_rndne_config.element_tile = 16;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_f16c) {
+-      f16_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vrndne_ukernel__f16c_x16;
+-      f16_rndne_config.element_tile = 16;
+-    }
+-  #endif
+-}
+-
+-static void init_f16_rndu_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vrndu_ukernel__neonfp16arith_x16;
+-      f16_rndu_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vrndu_ukernel__neonfp16arith_x16;
+-      f16_rndu_config.element_tile = 16;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_f16c) {
+-      f16_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vrndu_ukernel__f16c_x16;
+-      f16_rndu_config.element_tile = 16;
+-    }
+-  #endif
+-}
+-
+-static void init_f16_rndz_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vrndz_ukernel__neonfp16arith_x16;
+-      f16_rndz_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vrndz_ukernel__neonfp16arith_x16;
+-      f16_rndz_config.element_tile = 16;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_f16c) {
+-      f16_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vrndz_ukernel__f16c_x16;
+-      f16_rndz_config.element_tile = 16;
+-    }
+-  #endif
+-}
+-
+-static void init_f16_sigmoid_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vsigmoid_ukernel__neonfp16arith_rr2_p2_nr1recps_x16;
+-      f16_sigmoid_config.init.f16_sigmoid = xnn_init_f16_sigmoid_fp16arith_rr2_p2_params;
+-      f16_sigmoid_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vsigmoid_ukernel__neonfp16arith_rr2_p2_nr1fma_x40;
+-      f16_sigmoid_config.init.f16_sigmoid = xnn_init_f16_sigmoid_fp16arith_rr2_p2_params;
+-      f16_sigmoid_config.element_tile = 40;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx2) {
+-      f16_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vsigmoid_ukernel__avx2_rr1_p2_rcp_x32;
+-      f16_sigmoid_config.init.f16_sigmoid = xnn_init_f16_sigmoid_avx2_rr1_p2_params;
+-      f16_sigmoid_config.element_tile = 32;
+-    }
+-  #endif
+-}
+-
+-static void init_f16_sqr_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_sqr_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vsqr_ukernel__neonfp16arith_x16;
+-      f16_sqr_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_sqr_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vsqr_ukernel__neonfp16arith_x16;
+-      f16_sqr_config.element_tile = 16;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_f16c) {
+-      f16_sqr_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vsqr_ukernel__f16c_x16;
+-      f16_sqr_config.element_tile = 16;
+-    }
+-  #endif
+-}
+-
+-static void init_f16_sqrt_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_sqrt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vsqrt_ukernel__neonfp16arith_nr1fma1adj_x8;
+-      f16_sqrt_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_sqrt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vsqrt_ukernel__aarch64_neonfp16arith_sqrt_x8;
+-      f16_sqrt_config.element_tile = 8;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_f16c) {
+-      f16_sqrt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vsqrt_ukernel__f16c_sqrt_x8;
+-      f16_sqrt_config.element_tile = 8;
+-    }
+-  #endif
+-}
+-
+-static void init_f16_tanh_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vtanh_ukernel__neonfp16arith_expm1minus_rr1_p3h2ts_nr1fma_x32;
+-      f16_tanh_config.element_tile = 32;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vtanh_ukernel__aarch64_neonfp16arith_expm1minus_rr1_p3h2ts_div_x32;
+-      f16_tanh_config.element_tile = 32;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_fma3) {
+-      f16_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vtanh_ukernel__fma3_polynomial_p19h9t2_x32;
+-      f16_tanh_config.init.f16_tanh = xnn_init_f16_tanh_avx_polynomial_p19h9t2_params;
+-      f16_tanh_config.element_tile = 32;
+-    } else if (hardware_config->use_x86_f16c) {
+-      f16_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vtanh_ukernel__f16c_expm1minus_rr1_p3h2ts_rcp_x72;
+-      f16_tanh_config.init.f16_tanh = xnn_init_f16_tanh_avx_expm1minus_rr1_p3h2_params;
+-      f16_tanh_config.element_tile = 72;
+-    }
+-  #endif
+-}
+-
+-static void init_f16_to_f32_cvt_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      if (hardware_config->use_arm_neon_fp16) {
+-        f16_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_f32_vcvt_ukernel__neonfp16_x16;
+-        f16_to_f32_cvt_config.element_tile = 16;
+-      } else {
+-        f16_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_f32_vcvt_ukernel__neon_int16_x16;
+-        f16_to_f32_cvt_config.init.f16_f32_cvt = xnn_init_f16_f32_cvt_neon_params;
+-        f16_to_f32_cvt_config.element_tile = 16;
+-      }
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f16_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_f32_vcvt_ukernel__scalar_x4;
+-      f16_to_f32_cvt_config.init.f16_f32_cvt = xnn_init_f16_f32_cvt_scalar_params;
+-      f16_to_f32_cvt_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f16_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_f32_vcvt_ukernel__neonfp16_x16;
+-    f16_to_f32_cvt_config.element_tile = 16;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx512skx) {
+-      f16_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_f32_vcvt_ukernel__avx512skx_x16;
+-      f16_to_f32_cvt_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_f16c) {
+-      f16_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_f32_vcvt_ukernel__f16c_x16;
+-      f16_to_f32_cvt_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_avx) {
+-      f16_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_f32_vcvt_ukernel__avx_int16_x16;
+-      f16_to_f32_cvt_config.init.f16_f32_cvt = xnn_init_f16_f32_cvt_sse_int16_params;
+-      f16_to_f32_cvt_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      f16_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_f32_vcvt_ukernel__sse41_int16_x16;
+-      f16_to_f32_cvt_config.init.f16_f32_cvt = xnn_init_f16_f32_cvt_sse_int16_params;
+-      f16_to_f32_cvt_config.element_tile = 16;
+-    } else {
+-      f16_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_f32_vcvt_ukernel__sse2_int16_x32;
+-      f16_to_f32_cvt_config.init.f16_f32_cvt = xnn_init_f16_f32_cvt_sse_int16_params;
+-      f16_to_f32_cvt_config.element_tile = 32;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    #if XNN_ARCH_WASMRELAXEDSIMD
+-      f16_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_f32_vcvt_ukernel__wasmrelaxedsimd_int16_x16;
+-      f16_to_f32_cvt_config.init.f16_f32_cvt = xnn_init_f16_f32_cvt_wasmsimd_int16_params;
+-      f16_to_f32_cvt_config.element_tile = 16;
+-    #else
+-      f16_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_f32_vcvt_ukernel__wasmsimd_int16_x16;
+-      f16_to_f32_cvt_config.init.f16_f32_cvt = xnn_init_f16_f32_cvt_wasmsimd_int16_params;
+-      f16_to_f32_cvt_config.element_tile = 16;
+-    #endif
+-  #elif XNN_ARCH_WASM
+-    f16_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_f32_vcvt_ukernel__scalar_x1;
+-    f16_to_f32_cvt_config.init.f16_f32_cvt = xnn_init_f16_f32_cvt_scalar_params;
+-    f16_to_f32_cvt_config.element_tile = 1;
+-  #elif XNN_ARCH_RISCV
+-    f16_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_f32_vcvt_ukernel__scalar_x4;
+-    f16_to_f32_cvt_config.init.f16_f32_cvt = xnn_init_f16_f32_cvt_scalar_params;
+-    f16_to_f32_cvt_config.element_tile = 4;
+-  #endif
+-}
+-
+-static void init_f32_abs_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      f32_abs_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vabs_ukernel__neon_x8;
+-      f32_abs_config.element_tile = 8;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_abs_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vabs_ukernel__scalar_x4;
+-      f32_abs_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_abs_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vabs_ukernel__neon_x8;
+-    f32_abs_config.element_tile = 8;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
+-      f32_abs_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vabs_ukernel__avx512f_x16;
+-      f32_abs_config.init.f32_abs = xnn_init_f32_abs_avx512_params;
+-      f32_abs_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_avx) {
+-      f32_abs_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vabs_ukernel__avx_x16;
+-      f32_abs_config.init.f32_abs = xnn_init_f32_abs_avx_params;
+-      f32_abs_config.element_tile = 16;
+-    } else {
+-      f32_abs_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vabs_ukernel__sse_x8;
+-      f32_abs_config.init.f32_abs = xnn_init_f32_abs_sse_params;
+-      f32_abs_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    f32_abs_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vabs_ukernel__wasmsimd_x8;
+-    f32_abs_config.init.f32_abs = xnn_init_f32_abs_wasmsimd_params;
+-    f32_abs_config.element_tile = 8;
+-  #elif XNN_ARCH_WASM
+-    f32_abs_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vabs_ukernel__scalar_x4;
+-    f32_abs_config.element_tile = 4;
+-  #elif XNN_ARCH_RISCV
+-    f32_abs_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vabs_ukernel__scalar_x4;
+-    f32_abs_config.element_tile = 4;
+-  #endif
+-}
+-
+-static void init_f32_clamp_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      f32_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vclamp_ukernel__neon_x8;
+-      f32_clamp_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-      f32_clamp_config.element_tile = 8;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vclamp_ukernel__scalar_x4;
+-      f32_clamp_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-      f32_clamp_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vclamp_ukernel__neon_x8;
+-    f32_clamp_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-    f32_clamp_config.element_tile = 8;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
+-      f32_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vclamp_ukernel__avx512f_x16;
+-      f32_clamp_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-      f32_clamp_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_avx) {
+-      f32_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vclamp_ukernel__avx_x16;
+-      f32_clamp_config.init.f32_minmax = xnn_init_f32_minmax_avx_params;
+-      f32_clamp_config.element_tile = 16;
+-    } else {
+-      f32_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vclamp_ukernel__sse_x8;
+-      f32_clamp_config.init.f32_minmax = xnn_init_f32_minmax_sse_params;
+-      f32_clamp_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      f32_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vclamp_ukernel__wasmsimd_x86_x8;
+-      f32_clamp_config.init.f32_minmax = xnn_init_f32_minmax_wasmsimd_params;
+-      f32_clamp_config.element_tile = 8;
+-    } else {
+-      f32_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vclamp_ukernel__wasmsimd_arm_x8;
+-      f32_clamp_config.init.f32_minmax = xnn_init_f32_minmax_wasmsimd_params;
+-      f32_clamp_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASM
+-    f32_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vclamp_ukernel__wasm_x4;
+-    f32_clamp_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-    f32_clamp_config.element_tile = 4;
+-  #elif XNN_ARCH_RISCV
+-    f32_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vclamp_ukernel__scalar_x4;
+-    f32_clamp_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
+-    f32_clamp_config.element_tile = 4;
+-  #endif
+-}
+-
+-static void init_f32_elu_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      if (hardware_config->use_arm_neon_fma) {
+-        f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__neonfma_rr1_p6_x8;
+-        f32_elu_config.init.f32_elu = xnn_init_f32_elu_neonfma_rr1_p6_params;
+-        f32_elu_config.element_tile = 8;
+-      } else {
+-        f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__neon_rr2_lut16_p3_x8;
+-        f32_elu_config.init.f32_elu = xnn_init_f32_elu_neon_rr2_lut16_p3_params;
+-        f32_elu_config.element_tile = 8;
+-      }
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__scalar_rr2_lut16_p3_x4;
+-      f32_elu_config.init.f32_elu = xnn_init_f32_elu_scalar_rr2_lut16_p3_params;
+-      f32_elu_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__neonfma_rr1_lut16_p3_x16;
+-    f32_elu_config.init.f32_elu = xnn_init_f32_elu_neonfma_rr1_lut16_p3_params;
+-    f32_elu_config.element_tile = 16;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
+-      f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__avx512f_rr1_lut16_p3_perm_x64;
+-      f32_elu_config.init.f32_elu = xnn_init_f32_elu_avx512_rr1_lut16_p3_params;
+-      f32_elu_config.element_tile = 64;
+-    } else if (hardware_config->use_x86_avx2) {
+-      f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__avx2_rr1_lut4_p4_perm_x56;
+-      f32_elu_config.init.f32_elu = xnn_init_f32_elu_avx2_rr1_lut4_p4_params;
+-      f32_elu_config.element_tile = 56;
+-    } else if (hardware_config->use_x86_avx) {
+-      f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__avx_rr2_lut4_p4_perm_x32;
+-      f32_elu_config.init.f32_elu = xnn_init_f32_elu_avx_rr2_lut4_p4_params;
+-      f32_elu_config.element_tile = 32;
+-    } else {
+-      f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__sse2_rr2_lut16_p3_x12;
+-      f32_elu_config.init.f32_elu = xnn_init_f32_elu_sse2_rr2_lut16_p3_params;
+-      f32_elu_config.element_tile = 12;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    #if XNN_ARCH_WASMRELAXEDSIMD
+-      f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__wasmrelaxedsimd_fma_rr2_p6_x24;
+-      f32_elu_config.init.f32_elu = xnn_init_f32_elu_wasmsimd_rr2_p6_params;
+-      f32_elu_config.element_tile = 24;
+-    #else
+-      const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-      assert(hardware_config != NULL);
+-      if (hardware_config->is_x86) {
+-        f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__wasmsimd_x86_rr2_p6_x20;
+-        f32_elu_config.init.f32_elu = xnn_init_f32_elu_wasmsimd_rr2_p6_params;
+-        f32_elu_config.element_tile = 20;
+-      } else {
+-        f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__wasmsimd_arm_rr2_p6_x20;
+-        f32_elu_config.init.f32_elu = xnn_init_f32_elu_wasmsimd_rr2_p6_params;
+-        f32_elu_config.element_tile = 20;
+-      }
+-    #endif
+-  #elif XNN_ARCH_WASM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__scalar_rr2_lut16_p3_x2;
+-      f32_elu_config.init.f32_elu = xnn_init_f32_elu_scalar_rr2_lut16_p3_params;
+-      f32_elu_config.element_tile = 2;
+-    } else {
+-      f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__wasm_rr2_p6_x6;
+-      f32_elu_config.init.f32_elu = xnn_init_f32_elu_scalar_rr2_p6_params;
+-      f32_elu_config.element_tile = 6;
+-    }
+-  #elif XNN_ARCH_RISCV
+-    f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__scalar_rr2_lut16_p3_x4;
+-    f32_elu_config.init.f32_elu = xnn_init_f32_elu_scalar_rr2_lut16_p3_params;
+-    f32_elu_config.element_tile = 4;
+-  #endif
+-}
+-
+-static void init_f32_hswish_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      f32_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vhswish_ukernel__neon_x16;
+-      f32_hswish_config.init.f32_hswish = xnn_init_f32_hswish_scalar_params;
+-      f32_hswish_config.element_tile = 16;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vhswish_ukernel__scalar_x4;
+-      f32_hswish_config.init.f32_hswish = xnn_init_f32_hswish_scalar_params;
+-      f32_hswish_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vhswish_ukernel__neon_x16;
+-    f32_hswish_config.init.f32_hswish = xnn_init_f32_hswish_scalar_params;
+-    f32_hswish_config.element_tile = 16;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
+-      f32_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vhswish_ukernel__avx512f_x16;
+-      f32_hswish_config.init.f32_hswish = xnn_init_f32_hswish_avx512_params;
+-      f32_hswish_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_fma3) {
+-      f32_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vhswish_ukernel__fma3_x16;
+-      f32_hswish_config.init.f32_hswish = xnn_init_f32_hswish_avx_params;
+-      f32_hswish_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_avx) {
+-      f32_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vhswish_ukernel__avx_x16;
+-      f32_hswish_config.init.f32_hswish = xnn_init_f32_hswish_avx_params;
+-      f32_hswish_config.element_tile = 16;
+-    } else {
+-      f32_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vhswish_ukernel__sse_x8;
+-      f32_hswish_config.init.f32_hswish = xnn_init_f32_hswish_sse_params;
+-      f32_hswish_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    f32_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vhswish_ukernel__wasmsimd_x16;
+-    f32_hswish_config.init.f32_hswish = xnn_init_f32_hswish_wasmsimd_params;
+-    f32_hswish_config.element_tile = 16;
+-  #elif XNN_ARCH_WASM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      f32_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vhswish_ukernel__scalar_x4;
+-      f32_hswish_config.init.f32_hswish = xnn_init_f32_hswish_scalar_params;
+-      f32_hswish_config.element_tile = 4;
+-    } else {
+-      f32_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vhswish_ukernel__wasm_x4;
+-      f32_hswish_config.init.f32_hswish = xnn_init_f32_hswish_scalar_params;
+-      f32_hswish_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_RISCV
+-    f32_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vhswish_ukernel__scalar_x4;
+-    f32_hswish_config.init.f32_hswish = xnn_init_f32_hswish_scalar_params;
+-    f32_hswish_config.element_tile = 4;
+-  #endif
+-}
+-
+-static void init_f32_lrelu_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      f32_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vlrelu_ukernel__neon_x8;
+-      f32_lrelu_config.init.f32_lrelu = xnn_init_f32_lrelu_scalar_params;
+-      f32_lrelu_config.element_tile = 8;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vlrelu_ukernel__scalar_x4;
+-      f32_lrelu_config.init.f32_lrelu = xnn_init_f32_lrelu_scalar_params;
+-      f32_lrelu_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vlrelu_ukernel__neon_x8;
+-    f32_lrelu_config.init.f32_lrelu = xnn_init_f32_lrelu_scalar_params;
+-    f32_lrelu_config.element_tile = 8;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
+-      f32_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vlrelu_ukernel__avx512f_x16;
+-      f32_lrelu_config.init.f32_lrelu = xnn_init_f32_lrelu_scalar_params;
+-      f32_lrelu_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_avx) {
+-      f32_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vlrelu_ukernel__avx_x16;
+-      f32_lrelu_config.init.f32_lrelu = xnn_init_f32_lrelu_avx_params;
+-      f32_lrelu_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      f32_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vlrelu_ukernel__sse41_x8;
+-      f32_lrelu_config.init.f32_lrelu = xnn_init_f32_lrelu_sse_params;
+-      f32_lrelu_config.element_tile = 8;
+-    } else {
+-      f32_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vlrelu_ukernel__sse_x8;
+-      f32_lrelu_config.init.f32_lrelu = xnn_init_f32_lrelu_sse_params;
+-      f32_lrelu_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    #if XNN_ARCH_WASMRELAXEDSIMD
+-      if (hardware_config->is_x86) {
+-        f32_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vlrelu_ukernel__wasmrelaxedsimd_iminmax_x4;
+-        f32_lrelu_config.init.f32_lrelu = xnn_init_f32_lrelu_wasmsimd_params;
+-        f32_lrelu_config.element_tile = 4;
+-      } else {
+-        f32_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vlrelu_ukernel__wasmrelaxedsimd_laneselect_x4;
+-        f32_lrelu_config.init.f32_lrelu = xnn_init_f32_lrelu_wasmsimd_params;
+-        f32_lrelu_config.element_tile = 4;
+-      }
+-    #else
+-      if (hardware_config->is_x86) {
+-        f32_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vlrelu_ukernel__wasmsimd_iminmax_x8;
+-        f32_lrelu_config.init.f32_lrelu = xnn_init_f32_lrelu_wasmsimd_params;
+-        f32_lrelu_config.element_tile = 8;
+-      } else {
+-        f32_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vlrelu_ukernel__wasmsimd_laneselect_x8;
+-        f32_lrelu_config.init.f32_lrelu = xnn_init_f32_lrelu_wasmsimd_params;
+-        f32_lrelu_config.element_tile = 8;
+-      }
+-    #endif
+-  #elif XNN_ARCH_WASM
+-    f32_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vlrelu_ukernel__scalar_x4;
+-    f32_lrelu_config.init.f32_lrelu = xnn_init_f32_lrelu_scalar_params;
+-    f32_lrelu_config.element_tile = 4;
+-  #elif XNN_ARCH_RISCV
+-    f32_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vlrelu_ukernel__scalar_x4;
+-    f32_lrelu_config.init.f32_lrelu = xnn_init_f32_lrelu_scalar_params;
+-    f32_lrelu_config.element_tile = 4;
+-  #endif
+-}
+-
+-static void init_f32_neg_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      f32_neg_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vneg_ukernel__neon_x8;
+-      f32_neg_config.element_tile = 8;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_neg_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vneg_ukernel__scalar_x4;
+-      f32_neg_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_neg_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vneg_ukernel__neon_x8;
+-    f32_neg_config.element_tile = 8;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
+-      f32_neg_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vneg_ukernel__avx512f_x16;
+-      f32_neg_config.init.f32_neg = xnn_init_f32_neg_avx512_params;
+-      f32_neg_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_avx) {
+-      f32_neg_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vneg_ukernel__avx_x16;
+-      f32_neg_config.init.f32_neg = xnn_init_f32_neg_avx_params;
+-      f32_neg_config.element_tile = 16;
+-    } else {
+-      f32_neg_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vneg_ukernel__sse_x8;
+-      f32_neg_config.init.f32_neg = xnn_init_f32_neg_sse_params;
+-      f32_neg_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    f32_neg_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vneg_ukernel__wasmsimd_x8;
+-    f32_neg_config.init.f32_neg = xnn_init_f32_neg_wasmsimd_params;
+-    f32_neg_config.element_tile = 8;
+-  #elif XNN_ARCH_WASM
+-    f32_neg_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vneg_ukernel__scalar_x4;
+-    f32_neg_config.element_tile = 4;
+-  #elif XNN_ARCH_RISCV
+-    f32_neg_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vneg_ukernel__scalar_x4;
+-    f32_neg_config.element_tile = 4;
+-  #endif
+-}
+-
+-static void init_f32_relu_config(void) {
+-  #if XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    f32_relu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrelu_ukernel__wasmsimd_x16;
+-    f32_relu_config.element_tile = 16;
+-  #elif XNN_ARCH_WASM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      f32_relu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrelu_ukernel__scalar_x8;
+-      f32_relu_config.element_tile = 8;
+-    } else {
+-      f32_relu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrelu_ukernel__wasm_x8;
+-      f32_relu_config.element_tile = 8;
+-    }
+-  #endif
+-}
+-
+-static void init_f32_rndd_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      if (hardware_config->use_arm_neon_v8) {
+-        f32_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndd_ukernel__neonv8_x8;
+-        f32_rndd_config.element_tile = 8;
+-      } else {
+-        f32_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndd_ukernel__neon_x8;
+-        f32_rndd_config.element_tile = 8;
+-      }
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndd_ukernel__scalar_libm_x1;
+-      f32_rndd_config.element_tile = 1;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndd_ukernel__neonv8_x8;
+-    f32_rndd_config.element_tile = 8;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
+-      f32_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndd_ukernel__avx512f_x16;
+-      f32_rndd_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_avx) {
+-      f32_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndd_ukernel__avx_x16;
+-      f32_rndd_config.init.f32_rnd = xnn_init_f32_rnd_avx_params;
+-      f32_rndd_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      f32_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndd_ukernel__sse41_x8;
+-      f32_rndd_config.element_tile = 8;
+-    } else {
+-      f32_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndd_ukernel__sse2_x8;
+-      f32_rndd_config.init.f32_rnd = xnn_init_f32_rnd_sse2_params;
+-      f32_rndd_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    f32_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndd_ukernel__wasmsimd_x8;
+-    f32_rndd_config.element_tile = 8;
+-  #elif XNN_ARCH_WASM
+-    f32_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndd_ukernel__scalar_libm_x4;
+-    f32_rndd_config.element_tile = 4;
+-  #elif XNN_ARCH_RISCV
+-    f32_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndd_ukernel__scalar_libm_x1;
+-    f32_rndd_config.element_tile = 1;
+-  #endif
+-}
+-
+-static void init_f32_rndne_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      if (hardware_config->use_arm_neon_v8) {
+-        f32_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndne_ukernel__neonv8_x8;
+-        f32_rndne_config.element_tile = 8;
+-      } else {
+-        f32_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndne_ukernel__neon_x8;
+-        f32_rndne_config.element_tile = 8;
+-      }
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndne_ukernel__scalar_libm_x1;
+-      f32_rndne_config.element_tile = 1;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndne_ukernel__neonv8_x8;
+-    f32_rndne_config.element_tile = 8;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
+-      f32_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndne_ukernel__avx512f_x16;
+-      f32_rndne_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_avx) {
+-      f32_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndne_ukernel__avx_x16;
+-      f32_rndne_config.init.f32_rnd = xnn_init_f32_rnd_avx_params;
+-      f32_rndne_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      f32_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndne_ukernel__sse41_x8;
+-      f32_rndne_config.element_tile = 8;
+-    } else {
+-      f32_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndne_ukernel__sse2_x8;
+-      f32_rndne_config.init.f32_rnd = xnn_init_f32_rnd_sse2_params;
+-      f32_rndne_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    f32_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndne_ukernel__wasmsimd_x8;
+-    f32_rndne_config.element_tile = 8;
+-  #elif XNN_ARCH_WASM
+-    f32_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndne_ukernel__scalar_libm_x4;
+-    f32_rndne_config.element_tile = 4;
+-  #elif XNN_ARCH_RISCV
+-    f32_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndne_ukernel__scalar_libm_x1;
+-    f32_rndne_config.element_tile = 1;
+-  #endif
+-}
+-
+-static void init_f32_rndu_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      if (hardware_config->use_arm_neon_v8) {
+-        f32_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndu_ukernel__neonv8_x8;
+-        f32_rndu_config.element_tile = 8;
+-      } else {
+-        f32_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndu_ukernel__neon_x8;
+-        f32_rndu_config.element_tile = 8;
+-      }
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndu_ukernel__scalar_libm_x1;
+-      f32_rndu_config.element_tile = 1;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndu_ukernel__neonv8_x8;
+-    f32_rndu_config.element_tile = 8;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
+-      f32_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndu_ukernel__avx512f_x16;
+-      f32_rndu_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_avx) {
+-      f32_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndu_ukernel__avx_x16;
+-      f32_rndu_config.init.f32_rnd = xnn_init_f32_rnd_avx_params;
+-      f32_rndu_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      f32_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndu_ukernel__sse41_x8;
+-      f32_rndu_config.element_tile = 8;
+-    } else {
+-      f32_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndu_ukernel__sse2_x8;
+-      f32_rndu_config.init.f32_rnd = xnn_init_f32_rnd_sse2_params;
+-      f32_rndu_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    f32_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndu_ukernel__wasmsimd_x8;
+-    f32_rndu_config.element_tile = 8;
+-  #elif XNN_ARCH_WASM
+-    f32_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndu_ukernel__scalar_libm_x4;
+-    f32_rndu_config.element_tile = 4;
+-  #elif XNN_ARCH_RISCV
+-    f32_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndu_ukernel__scalar_libm_x1;
+-    f32_rndu_config.element_tile = 1;
+-  #endif
+-}
+-
+-static void init_f32_rndz_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      if (hardware_config->use_arm_neon_v8) {
+-        f32_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndz_ukernel__neonv8_x8;
+-        f32_rndz_config.element_tile = 8;
+-      } else {
+-        f32_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndz_ukernel__neon_x8;
+-        f32_rndz_config.element_tile = 8;
+-      }
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndz_ukernel__scalar_libm_x1;
+-      f32_rndz_config.element_tile = 1;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndz_ukernel__neonv8_x8;
+-    f32_rndz_config.element_tile = 8;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
+-      f32_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndz_ukernel__avx512f_x16;
+-      f32_rndz_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_avx) {
+-      f32_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndz_ukernel__avx_x16;
+-      f32_rndz_config.init.f32_rnd = xnn_init_f32_rnd_avx_params;
+-      f32_rndz_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      f32_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndz_ukernel__sse41_x8;
+-      f32_rndz_config.element_tile = 8;
+-    } else {
+-      f32_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndz_ukernel__sse2_x8;
+-      f32_rndz_config.init.f32_rnd = xnn_init_f32_rnd_sse2_params;
+-      f32_rndz_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    f32_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndz_ukernel__wasmsimd_x8;
+-    f32_rndz_config.element_tile = 8;
+-  #elif XNN_ARCH_WASM
+-    f32_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndz_ukernel__scalar_libm_x4;
+-    f32_rndz_config.element_tile = 4;
+-  #elif XNN_ARCH_RISCV
+-    f32_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndz_ukernel__scalar_libm_x1;
+-    f32_rndz_config.element_tile = 1;
+-  #endif
+-}
+-
+-static void init_f32_sigmoid_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      f32_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsigmoid_ukernel__neon_rr2_lut64_p2_nr2recps_x8;
+-      f32_sigmoid_config.init.f32_sigmoid = xnn_init_f32_sigmoid_neon_rr2_lut64_p2_params;
+-      f32_sigmoid_config.element_tile = 8;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsigmoid_ukernel__scalar_rr2_lut64_p2_div_x2;
+-      f32_sigmoid_config.init.f32_sigmoid = xnn_init_f32_sigmoid_scalar_rr2_lut64_p2_params;
+-      f32_sigmoid_config.element_tile = 2;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsigmoid_ukernel__neonfma_rr1_lut64_p2_nr2recps_x16;
+-    f32_sigmoid_config.init.f32_sigmoid = xnn_init_f32_sigmoid_neonfma_rr1_lut64_p2_params;
+-    f32_sigmoid_config.element_tile = 16;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
+-      f32_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsigmoid_ukernel__avx512f_rr2_lut32_p2_perm2_scalef_div_x64;
+-      f32_sigmoid_config.init.f32_sigmoid = xnn_init_f32_sigmoid_avx512_rr2_lut32_p2_params;
+-      f32_sigmoid_config.element_tile = 64;
+-    } else if (hardware_config->use_x86_avx2) {
+-      f32_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsigmoid_ukernel__avx2_rr1_p5_div_x40;
+-      f32_sigmoid_config.init.f32_sigmoid = xnn_init_f32_sigmoid_avx2_rr1_p5_params;
+-      f32_sigmoid_config.element_tile = 40;
+-    } else if (hardware_config->use_x86_avx) {
+-      f32_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsigmoid_ukernel__avx_rr2_p5_nr2_x40;
+-      f32_sigmoid_config.init.f32_sigmoid = xnn_init_f32_sigmoid_avx_rr2_p5_params;
+-      f32_sigmoid_config.element_tile = 40;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      f32_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsigmoid_ukernel__sse41_rr2_lut64_p2_div_x8;
+-      f32_sigmoid_config.init.f32_sigmoid = xnn_init_f32_sigmoid_sse2_rr2_lut64_p2_params;
+-      f32_sigmoid_config.element_tile = 8;
+-    } else {
+-      f32_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsigmoid_ukernel__sse2_rr2_lut64_p2_div_x8;
+-      f32_sigmoid_config.init.f32_sigmoid = xnn_init_f32_sigmoid_sse2_rr2_lut64_p2_params;
+-      f32_sigmoid_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    #if XNN_ARCH_WASMRELAXEDSIMD
+-      f32_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsigmoid_ukernel__wasmrelaxedsimd_fma_rr2_p5_div_x24;
+-      f32_sigmoid_config.init.f32_sigmoid = xnn_init_f32_sigmoid_wasmsimd_rr2_p5_params;
+-      f32_sigmoid_config.element_tile = 24;
+-    #else
+-      f32_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsigmoid_ukernel__wasmsimd_rr2_p5_div_x16;
+-      f32_sigmoid_config.init.f32_sigmoid = xnn_init_f32_sigmoid_wasmsimd_rr2_p5_params;
+-      f32_sigmoid_config.element_tile = 16;
+-    #endif
+-  #elif XNN_ARCH_WASM
+-    f32_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsigmoid_ukernel__scalar_rr2_lut64_p2_div_x2;
+-    f32_sigmoid_config.init.f32_sigmoid = xnn_init_f32_sigmoid_scalar_rr2_lut64_p2_params;
+-    f32_sigmoid_config.element_tile = 2;
+-  #elif XNN_ARCH_RISCV
+-    f32_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsigmoid_ukernel__scalar_rr2_lut64_p2_div_x2;
+-    f32_sigmoid_config.init.f32_sigmoid = xnn_init_f32_sigmoid_scalar_rr2_lut64_p2_params;
+-    f32_sigmoid_config.element_tile = 2;
+-  #endif
+-}
+-
+-static void init_f32_sqr_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      f32_sqr_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqr_ukernel__neon_x8;
+-      f32_sqr_config.element_tile = 8;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_sqr_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqr_ukernel__scalar_x4;
+-      f32_sqr_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_sqr_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqr_ukernel__neon_x8;
+-    f32_sqr_config.element_tile = 8;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
+-      f32_sqr_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqr_ukernel__avx512f_x16;
+-      f32_sqr_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_avx) {
+-      f32_sqr_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqr_ukernel__avx_x16;
+-      f32_sqr_config.init.f32_default = xnn_init_f32_default_avx_params;
+-      f32_sqr_config.element_tile = 16;
+-    } else {
+-      f32_sqr_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqr_ukernel__sse_x8;
+-      f32_sqr_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    f32_sqr_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqr_ukernel__wasmsimd_x8;
+-    f32_sqr_config.element_tile = 8;
+-  #elif XNN_ARCH_WASM
+-    f32_sqr_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqr_ukernel__scalar_x4;
+-    f32_sqr_config.element_tile = 4;
+-  #elif XNN_ARCH_RISCV
+-    f32_sqr_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqr_ukernel__scalar_x4;
+-    f32_sqr_config.element_tile = 4;
+-  #endif
+-}
+-
+-static void init_f32_sqrt_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      f32_sqrt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqrt_ukernel__scalar_sqrt_x1;
+-      f32_sqrt_config.element_tile = 1;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_sqrt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqrt_ukernel__scalar_sqrt_x1;
+-      f32_sqrt_config.element_tile = 1;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_sqrt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqrt_ukernel__aarch64_neon_sqrt_x4;
+-    f32_sqrt_config.element_tile = 4;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx) {
+-      f32_sqrt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqrt_ukernel__avx_sqrt_x8;
+-      f32_sqrt_config.init.f32_sqrt = xnn_init_f32_sqrt_avx_params;
+-      f32_sqrt_config.element_tile = 8;
+-    } else {
+-      f32_sqrt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqrt_ukernel__sse_sqrt_x4;
+-      f32_sqrt_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    f32_sqrt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqrt_ukernel__wasmsimd_sqrt_x8;
+-    f32_sqrt_config.element_tile = 8;
+-  #elif XNN_ARCH_WASM
+-    f32_sqrt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqrt_ukernel__scalar_sqrt_x1;
+-    f32_sqrt_config.element_tile = 1;
+-  #elif XNN_ARCH_RISCV
+-    f32_sqrt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqrt_ukernel__scalar_sqrt_x1;
+-    f32_sqrt_config.element_tile = 1;
+-  #endif
+-}
+-
+-static void init_f32_tanh_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fma) {
+-      f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__neonfma_expm1minus_rr1_p6h5ts_nr2fma_x8;
+-      f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_neon_expm1minus_rr1_p6h5_params;
+-      f32_tanh_config.element_tile = 8;
+-    } else if (hardware_config->use_arm_neon) {
+-      f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__neon_expm1minus_rr1_p6h5ts_nr2recps_x8;
+-      f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_neon_expm1minus_rr1_p6h5_params;
+-      f32_tanh_config.element_tile = 8;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__scalar_expm1minus_rr1_lut8_p4h3ts_div_x4;
+-      f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_scalar_expm1minus_rr1_lut8_p4h3_params;
+-      f32_tanh_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__aarch64_neonfma_expm1minus_rr1_p6h5ts_div_x16;
+-    f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_neon_expm1minus_rr1_p6h5_params;
+-    f32_tanh_config.element_tile = 16;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512skx) {
+-      f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__avx512skx_expm1minus_rr1_lut4_p4h3ts_perm_div_x64;
+-      f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_avx512_expm1minus_rr1_lut4_p4h3_perm_params;
+-      f32_tanh_config.element_tile = 64;
+-    } else if (hardware_config->use_x86_avx2) {
+-      f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__avx2_expm1minus_rr1_lut4_p4h3ts_perm_div_x32;
+-      f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_avx_expm1minus_rr1_lut4_p4h3_perm_params;
+-      f32_tanh_config.element_tile = 32;
+-    } else if (hardware_config->use_x86_fma3) {
+-      f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__fma3_expm1minus_rr1_lut4_p4h3ts_perm_div_x40;
+-      f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_avx_expm1minus_rr1_lut4_p4h2_perm_params;
+-      f32_tanh_config.element_tile = 40;
+-    } else if (hardware_config->use_x86_avx) {
+-      f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__avx_expm1minus_rr1_lut4_p4h2ts_perm_div_x48;
+-      f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_avx_expm1minus_rr1_lut4_p4h2_perm_params;
+-      f32_tanh_config.element_tile = 48;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__sse41_expm1minus_rr1_lut8_p4h3ts_div_x20;
+-      f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_sse_expm1minus_rr1_lut8_p4h3_params;
+-      f32_tanh_config.element_tile = 20;
+-    } else {
+-      f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__sse2_expm1minus_rr1_lut8_p4h3ts_div_x16;
+-      f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_sse_expm1minus_rr1_lut8_p4h3_params;
+-      f32_tanh_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__wasmsimd_expm1minus_rr1_p6h5ts_div_nabs_pmax_x16;
+-      f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_wasmsimd_expm1minus_rr1_p6h5_nabs_params;
+-      f32_tanh_config.element_tile = 16;
+-    } else {
+-      f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__wasmsimd_expm1minus_rr1_p6h5ts_div_abs_min_x16;
+-      f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_wasmsimd_expm1minus_rr1_p6h5_abs_params;
+-      f32_tanh_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_WASM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__scalar_expm1minus_rr1_lut8_p4h3ts_div_x4;
+-      f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_scalar_expm1minus_rr1_lut8_p4h3_params;
+-      f32_tanh_config.element_tile = 4;
+-    } else {
+-      f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__wasm_expm1minus_rr1_p6h5ts_div_x4;
+-      f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_scalar_expm1minus_rr1_p6h5_params;
+-      f32_tanh_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_RISCV
+-    f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__fma_expm1minus_rr1_lut8_p4h3ts_div_x4;
+-    f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_scalar_expm1minus_rr1_lut8_p4h3_params;
+-    f32_tanh_config.element_tile = 4;
+-  #endif
+-}
+-
+-static void init_f32_to_f16_cvt_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      if (hardware_config->use_arm_neon_fp16) {
+-        f32_to_f16_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_f16_vcvt_ukernel__neonfp16_x16;
+-        f32_to_f16_cvt_config.element_tile = 16;
+-      } else {
+-        f32_to_f16_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_f16_vcvt_ukernel__neon_x8;
+-        f32_to_f16_cvt_config.init.f32_f16_cvt = xnn_init_f32_f16_cvt_neon_params;
+-        f32_to_f16_cvt_config.element_tile = 8;
+-      }
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_to_f16_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_f16_vcvt_ukernel__scalar_fabsf_x2;
+-      f32_to_f16_cvt_config.init.f32_f16_cvt = xnn_init_f32_f16_cvt_scalar_fabsf_params;
+-      f32_to_f16_cvt_config.element_tile = 2;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_to_f16_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_f16_vcvt_ukernel__neonfp16_x16;
+-    f32_to_f16_cvt_config.element_tile = 16;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx512skx) {
+-      f32_to_f16_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_f16_vcvt_ukernel__avx512skx_x16;
+-      f32_to_f16_cvt_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_f16c) {
+-      f32_to_f16_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_f16_vcvt_ukernel__f16c_x16;
+-      f32_to_f16_cvt_config.init.f32_f16_cvt = xnn_init_f32_f16_cvt_f16c_params;
+-      f32_to_f16_cvt_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_avx) {
+-      f32_to_f16_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_f16_vcvt_ukernel__avx_x24;
+-      f32_to_f16_cvt_config.init.f32_f16_cvt = xnn_init_f32_f16_cvt_sse2_params;
+-      f32_to_f16_cvt_config.element_tile = 24;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      f32_to_f16_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_f16_vcvt_ukernel__sse41_x8;
+-      f32_to_f16_cvt_config.init.f32_f16_cvt = xnn_init_f32_f16_cvt_sse2_params;
+-      f32_to_f16_cvt_config.element_tile = 8;
+-    } else {
+-      f32_to_f16_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_f16_vcvt_ukernel__sse2_x16;
+-      f32_to_f16_cvt_config.init.f32_f16_cvt = xnn_init_f32_f16_cvt_sse2_params;
+-      f32_to_f16_cvt_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    #if XNN_ARCH_WASMRELAXEDSIMD
+-      f32_to_f16_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_f16_vcvt_ukernel__wasmrelaxedsimd_x24;
+-      f32_to_f16_cvt_config.init.f32_f16_cvt = xnn_init_f32_f16_cvt_wasmsimd_params;
+-      f32_to_f16_cvt_config.element_tile = 24;
+-    #else
+-      f32_to_f16_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_f16_vcvt_ukernel__wasmsimd_x24;
+-      f32_to_f16_cvt_config.init.f32_f16_cvt = xnn_init_f32_f16_cvt_wasmsimd_params;
+-      f32_to_f16_cvt_config.element_tile = 24;
+-    #endif
+-  #elif XNN_ARCH_WASM
+-    f32_to_f16_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_f16_vcvt_ukernel__scalar_bitcast_x4;
+-    f32_to_f16_cvt_config.init.f32_f16_cvt = xnn_init_f32_f16_cvt_scalar_bitcast_params;
+-    f32_to_f16_cvt_config.element_tile = 4;
+-  #elif XNN_ARCH_RISCV
+-    f32_to_f16_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_f16_vcvt_ukernel__scalar_fabsf_x2;
+-    f32_to_f16_cvt_config.init.f32_f16_cvt = xnn_init_f32_f16_cvt_scalar_fabsf_params;
+-    f32_to_f16_cvt_config.element_tile = 2;
+-  #endif
+-}
+-
+-static void init_f32_to_qs8_cvt_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      if (hardware_config->use_arm_neon_v8) {
+-        f32_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qs8_vcvt_ukernel__neonv8_x32;
+-        f32_to_qs8_cvt_config.init.f32_qs8_cvt = xnn_init_f32_qs8_cvt_neonv8_params;
+-        f32_to_qs8_cvt_config.element_tile = 32;
+-      } else {
+-        f32_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qs8_vcvt_ukernel__neon_x32;
+-        f32_to_qs8_cvt_config.init.f32_qs8_cvt = xnn_init_f32_qs8_cvt_neon_params;
+-        f32_to_qs8_cvt_config.element_tile = 32;
+-      }
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qs8_vcvt_ukernel__scalar_imagic_x4;
+-      f32_to_qs8_cvt_config.init.f32_qs8_cvt = xnn_init_f32_qs8_cvt_scalar_imagic_params;
+-      f32_to_qs8_cvt_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qs8_vcvt_ukernel__neonv8_x32;
+-    f32_to_qs8_cvt_config.init.f32_qs8_cvt = xnn_init_f32_qs8_cvt_neonv8_params;
+-    f32_to_qs8_cvt_config.element_tile = 32;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx512skx) {
+-      f32_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qs8_vcvt_ukernel__avx512skx_x128;
+-      f32_to_qs8_cvt_config.init.f32_qs8_cvt = xnn_init_f32_qs8_cvt_avx512_params;
+-      f32_to_qs8_cvt_config.element_tile = 128;
+-    } else if (hardware_config->use_x86_avx2) {
+-      f32_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qs8_vcvt_ukernel__avx2_x64;
+-      f32_to_qs8_cvt_config.init.f32_qs8_cvt = xnn_init_f32_qs8_cvt_avx2_params;
+-      f32_to_qs8_cvt_config.element_tile = 64;
+-    } else if (hardware_config->use_x86_avx) {
+-      f32_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qs8_vcvt_ukernel__avx_x32;
+-      f32_to_qs8_cvt_config.init.f32_qs8_cvt = xnn_init_f32_qs8_cvt_avx_params;
+-      f32_to_qs8_cvt_config.element_tile = 32;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      f32_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qs8_vcvt_ukernel__sse41_x32;
+-      f32_to_qs8_cvt_config.init.f32_qs8_cvt = xnn_init_f32_qs8_cvt_sse4_params;
+-      f32_to_qs8_cvt_config.element_tile = 32;
+-    } else {
+-      f32_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qs8_vcvt_ukernel__sse2_x32;
+-      f32_to_qs8_cvt_config.init.f32_qs8_cvt = xnn_init_f32_qs8_cvt_sse2_params;
+-      f32_to_qs8_cvt_config.element_tile = 32;
+-      }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    f32_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qs8_vcvt_ukernel__wasmsimd_magic_x32;
+-    f32_to_qs8_cvt_config.init.f32_qs8_cvt = xnn_init_f32_qs8_cvt_wasmsimd_magic_params;
+-    f32_to_qs8_cvt_config.element_tile = 32;
+-  #elif XNN_ARCH_WASM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      f32_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__scalar_imagic_x1;
+-      f32_to_qs8_cvt_config.init.f32_qs8_cvt = xnn_init_f32_qs8_cvt_scalar_imagic_params;
+-      f32_to_qs8_cvt_config.element_tile = 1;
+-    } else {
+-      f32_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__wasm_fmagic_x4;
+-      f32_to_qs8_cvt_config.init.f32_qs8_cvt = xnn_init_f32_qs8_cvt_scalar_fmagic_params;
+-      f32_to_qs8_cvt_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_RISCV
+-    f32_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qs8_vcvt_ukernel__scalar_lrintf_x4;
+-    f32_to_qs8_cvt_config.init.f32_qs8_cvt = xnn_init_f32_qs8_cvt_scalar_lrintf_params;
+-    f32_to_qs8_cvt_config.element_tile = 4;
+-  #endif
+-}
+-
+-static void init_f32_to_qu8_cvt_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      if (hardware_config->use_arm_neon_v8) {
+-        f32_to_qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__neonv8_x32;
+-        f32_to_qu8_cvt_config.init.f32_qu8_cvt = xnn_init_f32_qu8_cvt_neonv8_params;
+-        f32_to_qu8_cvt_config.element_tile = 32;
+-      } else {
+-        f32_to_qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__neon_x32;
+-        f32_to_qu8_cvt_config.init.f32_qu8_cvt = xnn_init_f32_qu8_cvt_neon_params;
+-        f32_to_qu8_cvt_config.element_tile = 32;
+-      }
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_to_qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__scalar_imagic_x4;
+-      f32_to_qu8_cvt_config.init.f32_qu8_cvt = xnn_init_f32_qu8_cvt_scalar_imagic_params;
+-      f32_to_qu8_cvt_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_to_qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__neonv8_x32;
+-    f32_to_qu8_cvt_config.init.f32_qu8_cvt = xnn_init_f32_qu8_cvt_neonv8_params;
+-    f32_to_qu8_cvt_config.element_tile = 32;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx512skx) {
+-      f32_to_qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__avx512skx_x128;
+-      f32_to_qu8_cvt_config.init.f32_qu8_cvt = xnn_init_f32_qu8_cvt_avx512_params;
+-      f32_to_qu8_cvt_config.element_tile = 128;
+-    } else if (hardware_config->use_x86_avx2) {
+-      f32_to_qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__avx2_x64;
+-      f32_to_qu8_cvt_config.init.f32_qu8_cvt = xnn_init_f32_qu8_cvt_avx2_params;
+-      f32_to_qu8_cvt_config.element_tile = 64;
+-    } else if (hardware_config->use_x86_avx) {
+-      f32_to_qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__avx_x32;
+-      f32_to_qu8_cvt_config.init.f32_qu8_cvt = xnn_init_f32_qu8_cvt_avx_params;
+-      f32_to_qu8_cvt_config.element_tile = 32;
+-    } else {
+-      f32_to_qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__sse2_x32;
+-      f32_to_qu8_cvt_config.init.f32_qu8_cvt = xnn_init_f32_qu8_cvt_sse2_params;
+-      f32_to_qu8_cvt_config.element_tile = 32;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    f32_to_qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__wasmsimd_magic_x32;
+-    f32_to_qu8_cvt_config.init.f32_qu8_cvt = xnn_init_f32_qu8_cvt_wasmsimd_magic_params;
+-    f32_to_qu8_cvt_config.element_tile = 32;
+-  #elif XNN_ARCH_WASM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      f32_to_qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__scalar_imagic_x1;
+-      f32_to_qu8_cvt_config.init.f32_qu8_cvt = xnn_init_f32_qu8_cvt_scalar_imagic_params;
+-      f32_to_qu8_cvt_config.element_tile = 1;
+-    } else {
+-      f32_to_qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__wasm_fmagic_x4;
+-      f32_to_qu8_cvt_config.init.f32_qu8_cvt = xnn_init_f32_qu8_cvt_scalar_fmagic_params;
+-      f32_to_qu8_cvt_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_RISCV
+-    f32_to_qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__scalar_lrintf_x4;
+-    f32_to_qu8_cvt_config.init.f32_qu8_cvt = xnn_init_f32_qu8_cvt_scalar_lrintf_params;
+-    f32_to_qu8_cvt_config.element_tile = 4;
+-  #endif
+-}
+-
+-static void init_qs8_cvt_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_v8) {
+-      qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vcvt_ukernel__neon_x32;
+-      qs8_cvt_config.init.qs8_cvt = xnn_init_qs8_cvt_neon_params;
+-      qs8_cvt_config.element_tile = 32;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vcvt_ukernel__armsimd32_x8;
+-      qs8_cvt_config.init.qs8_cvt = xnn_init_qs8_cvt_armsimd32_params;
+-      qs8_cvt_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vcvt_ukernel__neon_x32;
+-    qs8_cvt_config.init.qs8_cvt = xnn_init_qs8_cvt_neon_params;
+-    qs8_cvt_config.element_tile = 32;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx2) {
+-      qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vcvt_ukernel__avx2_x32;
+-      qs8_cvt_config.init.qs8_cvt = xnn_init_qs8_cvt_avx2_params;
+-      qs8_cvt_config.element_tile = 32;
+-    } else if (hardware_config->use_x86_avx) {
+-      qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vcvt_ukernel__avx_x32;
+-      qs8_cvt_config.init.qs8_cvt = xnn_init_qs8_cvt_ssse3_params;
+-      qs8_cvt_config.element_tile = 32;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vcvt_ukernel__sse41_x32;
+-      qs8_cvt_config.init.qs8_cvt = xnn_init_qs8_cvt_ssse3_params;
+-      qs8_cvt_config.element_tile = 32;
+-    } else if (hardware_config->use_x86_ssse3) {
+-      qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vcvt_ukernel__ssse3_x32;
+-      qs8_cvt_config.init.qs8_cvt = xnn_init_qs8_cvt_ssse3_params;
+-      qs8_cvt_config.element_tile = 32;
+-    } else {
+-      qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vcvt_ukernel__sse2_x32;
+-      qs8_cvt_config.init.qs8_cvt = xnn_init_qs8_cvt_sse2_params;
+-      qs8_cvt_config.element_tile = 32;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    #if XNN_ARCH_WASMRELAXEDSIMD
+-      qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vcvt_ukernel__wasmrelaxedsimd_x32;
+-      qs8_cvt_config.init.qs8_cvt = xnn_init_qs8_cvt_wasmsimd_params;
+-      qs8_cvt_config.element_tile = 32;
+-    #else
+-      qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vcvt_ukernel__wasmsimd_x16;
+-      qs8_cvt_config.init.qs8_cvt = xnn_init_qs8_cvt_wasmsimd_params;
+-      qs8_cvt_config.element_tile = 16;
+-    #endif
+-  #elif XNN_ARCH_WASM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vcvt_ukernel__scalar_x1;
+-      qs8_cvt_config.init.qs8_cvt = xnn_init_qs8_cvt_scalar_params;
+-      qs8_cvt_config.element_tile = 1;
+-    } else {
+-      qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vcvt_ukernel__scalar_x4;
+-      qs8_cvt_config.init.qs8_cvt = xnn_init_qs8_cvt_scalar_params;
+-      qs8_cvt_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_RISCV
+-    qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vcvt_ukernel__scalar_x4;
+-    qs8_cvt_config.init.qs8_cvt = xnn_init_qs8_cvt_scalar_params;
+-    qs8_cvt_config.element_tile = 4;
+-  #endif
+-}
+-
+-static void init_qs16_to_qs8_cvt_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      qs16_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs16_qs8_vcvt_ukernel__asm_aarch32_neon_x16;
+-      qs16_to_qs8_cvt_config.init.qs16_qs8_cvt = xnn_init_qs16_qs8_cvt_neon_params;
+-      qs16_to_qs8_cvt_config.element_tile = 16;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      qs16_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs16_qs8_vcvt_ukernel__scalar_x4;
+-      qs16_to_qs8_cvt_config.init.qs16_qs8_cvt = xnn_init_qs16_qs8_cvt_scalar_params;
+-      qs16_to_qs8_cvt_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    qs16_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs16_qs8_vcvt_ukernel__neon_x32;
+-    qs16_to_qs8_cvt_config.init.qs16_qs8_cvt = xnn_init_qs16_qs8_cvt_neon_params;
+-    qs16_to_qs8_cvt_config.element_tile = 32;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx) {
+-      qs16_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs16_qs8_vcvt_ukernel__avx_x16;
+-      qs16_to_qs8_cvt_config.init.qs16_qs8_cvt = xnn_init_qs16_qs8_cvt_sse4_params;
+-      qs16_to_qs8_cvt_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      qs16_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs16_qs8_vcvt_ukernel__sse41_x16;
+-      qs16_to_qs8_cvt_config.init.qs16_qs8_cvt = xnn_init_qs16_qs8_cvt_sse4_params;
+-      qs16_to_qs8_cvt_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_ssse3) {
+-      qs16_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs16_qs8_vcvt_ukernel__ssse3_x16;
+-      qs16_to_qs8_cvt_config.init.qs16_qs8_cvt = xnn_init_qs16_qs8_cvt_ssse3_params;
+-      qs16_to_qs8_cvt_config.element_tile = 16;
+-    } else {
+-      qs16_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs16_qs8_vcvt_ukernel__sse2_x16;
+-      qs16_to_qs8_cvt_config.init.qs16_qs8_cvt = xnn_init_qs16_qs8_cvt_sse2_params;
+-      qs16_to_qs8_cvt_config.element_tile = 16;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    qs16_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs16_qs8_vcvt_ukernel__wasmsimd_x16;
+-    qs16_to_qs8_cvt_config.init.qs16_qs8_cvt = xnn_init_qs16_qs8_cvt_wasmsimd_params;
+-    qs16_to_qs8_cvt_config.element_tile = 16;
+-  #else
+-    qs16_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs16_qs8_vcvt_ukernel__scalar_x4;
+-    qs16_to_qs8_cvt_config.init.qs16_qs8_cvt = xnn_init_qs16_qs8_cvt_scalar_params;
+-    qs16_to_qs8_cvt_config.element_tile = 4;
+-  #endif
+-}
+-
+-static void init_qs8_lrelu_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__neon_x32;
+-      qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_neon_params;
+-      qs8_lrelu_config.element_tile = 32;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__armsimd32_x4;
+-      qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_armsimd32_params;
+-      qs8_lrelu_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__neon_x32;
+-    qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_neon_params;
+-    qs8_lrelu_config.element_tile = 32;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx2) {
+-      qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__avx2_x32;
+-      qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_avx2_params;
+-      qs8_lrelu_config.element_tile = 32;
+-    } else if (hardware_config->use_x86_avx) {
+-      qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__avx_x32;
+-      qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_avx_params;
+-      qs8_lrelu_config.element_tile = 32;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__sse41_x32;
+-      qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_sse2_params;
+-      qs8_lrelu_config.element_tile = 32;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__ssse3_x32;
+-      qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_sse2_params;
+-      qs8_lrelu_config.element_tile = 32;
+-    } else {
+-      qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__sse2_x32;
+-      qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_sse2_params;
+-      qs8_lrelu_config.element_tile = 32;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    #if XNN_ARCH_WASMRELAXEDSIMD
+-      if (hardware_config->is_x86) {
+-        qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__wasmrelaxedsimd_x86_x32;
+-        qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_wasmsimd_x86_params;
+-        qs8_lrelu_config.element_tile = 32;
+-      } else {
+-        qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__wasmrelaxedsimd_arm_x32;
+-        qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_wasmsimd_arm_params;
+-        qs8_lrelu_config.element_tile = 32;
+-      }
+-    #else
+-      if (hardware_config->is_x86) {
+-        qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__wasmsimd_x86_x16;
+-        qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_wasmsimd_x86_params;
+-        qs8_lrelu_config.element_tile = 16;
+-      } else {
+-        qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__wasmsimd_arm_x32;
+-        qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_wasmsimd_arm_params;
+-        qs8_lrelu_config.element_tile = 32;
+-      }
+-    #endif
+-  #elif XNN_ARCH_WASM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__scalar_select_x4;
+-      qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_scalar_select_params;
+-      qs8_lrelu_config.element_tile = 4;
+-    } else {
+-      qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__scalar_andxor_x4;
+-      qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_scalar_andxor_params;
+-      qs8_lrelu_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_RISCV
+-    qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__scalar_andxor_x4;
+-    qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_scalar_andxor_params;
+-    qs8_lrelu_config.element_tile = 4;
+-  #endif
+-}
+-
+-static void init_qs8_to_f32_cvt_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_v8) {
+-      qs8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_f32_vcvt_ukernel__neon_x32;
+-      qs8_to_f32_cvt_config.init.qs8_f32_cvt = xnn_init_qs8_f32_cvt_neon_params;
+-      qs8_to_f32_cvt_config.element_tile = 32;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      qs8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_f32_vcvt_ukernel__scalar_x4;
+-      qs8_to_f32_cvt_config.init.qs8_f32_cvt = xnn_init_qs8_f32_cvt_scalar_params;
+-      qs8_to_f32_cvt_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    qs8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_f32_vcvt_ukernel__neon_x32;
+-    qs8_to_f32_cvt_config.init.qs8_f32_cvt = xnn_init_qs8_f32_cvt_neon_params;
+-    qs8_to_f32_cvt_config.element_tile = 32;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx512skx) {
+-      qs8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_f32_vcvt_ukernel__avx512skx_x32;
+-      qs8_to_f32_cvt_config.init.qs8_f32_cvt = xnn_init_qs8_f32_cvt_avx512_params;
+-      qs8_to_f32_cvt_config.element_tile = 32;
+-    } else if (hardware_config->use_x86_avx2) {
+-      qs8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_f32_vcvt_ukernel__avx2_x16;
+-      qs8_to_f32_cvt_config.init.qs8_f32_cvt = xnn_init_qs8_f32_cvt_avx_params;
+-      qs8_to_f32_cvt_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_avx) {
+-      qs8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_f32_vcvt_ukernel__avx_x32;
+-      qs8_to_f32_cvt_config.init.qs8_f32_cvt = xnn_init_qs8_f32_cvt_avx_params;
+-      qs8_to_f32_cvt_config.element_tile = 32;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      qs8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_f32_vcvt_ukernel__sse41_x16;
+-      qs8_to_f32_cvt_config.init.qs8_f32_cvt = xnn_init_qs8_f32_cvt_sse4_params;
+-      qs8_to_f32_cvt_config.element_tile = 16;
+-    } else {
+-      qs8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_f32_vcvt_ukernel__sse2_x32;
+-      qs8_to_f32_cvt_config.init.qs8_f32_cvt = xnn_init_qs8_f32_cvt_sse2_params;
+-      qs8_to_f32_cvt_config.element_tile = 32;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    qs8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_f32_vcvt_ukernel__wasmsimd_x32;
+-    qs8_to_f32_cvt_config.init.qs8_f32_cvt = xnn_init_qs8_f32_cvt_wasmsimd_params;
+-    qs8_to_f32_cvt_config.element_tile = 32;
+-  #elif XNN_ARCH_WASM
+-    qs8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_f32_vcvt_ukernel__scalar_x1;
+-    qs8_to_f32_cvt_config.init.qs8_f32_cvt = xnn_init_qs8_f32_cvt_scalar_params;
+-    qs8_to_f32_cvt_config.element_tile = 1;
+-  #elif XNN_ARCH_RISCV
+-    qs8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_f32_vcvt_ukernel__scalar_x4;
+-    qs8_to_f32_cvt_config.init.qs8_f32_cvt = xnn_init_qs8_f32_cvt_scalar_params;
+-    qs8_to_f32_cvt_config.element_tile = 4;
+-  #endif
+-}
+-
+-static void init_qu8_cvt_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_v8) {
+-      qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vcvt_ukernel__neon_x32;
+-      qu8_cvt_config.init.qu8_cvt = xnn_init_qu8_cvt_neon_params;
+-      qu8_cvt_config.element_tile = 32;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vcvt_ukernel__armsimd32_x8;
+-      qu8_cvt_config.init.qu8_cvt = xnn_init_qu8_cvt_armsimd32_params;
+-      qu8_cvt_config.element_tile = 8;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vcvt_ukernel__neon_x32;
+-    qu8_cvt_config.init.qu8_cvt = xnn_init_qu8_cvt_neon_params;
+-    qu8_cvt_config.element_tile = 32;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx2) {
+-      qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vcvt_ukernel__avx2_x32;
+-      qu8_cvt_config.init.qu8_cvt = xnn_init_qu8_cvt_avx2_params;
+-      qu8_cvt_config.element_tile = 32;
+-    } else if (hardware_config->use_x86_avx) {
+-      qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vcvt_ukernel__avx_x32;
+-      qu8_cvt_config.init.qu8_cvt = xnn_init_qu8_cvt_ssse3_params;
+-      qu8_cvt_config.element_tile = 32;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vcvt_ukernel__sse41_x32;
+-      qu8_cvt_config.init.qu8_cvt = xnn_init_qu8_cvt_ssse3_params;
+-      qu8_cvt_config.element_tile = 32;
+-    } else if (hardware_config->use_x86_ssse3) {
+-      qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vcvt_ukernel__ssse3_x32;
+-      qu8_cvt_config.init.qu8_cvt = xnn_init_qu8_cvt_ssse3_params;
+-      qu8_cvt_config.element_tile = 32;
+-    } else {
+-      qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vcvt_ukernel__sse2_x32;
+-      qu8_cvt_config.init.qu8_cvt = xnn_init_qu8_cvt_sse2_params;
+-      qu8_cvt_config.element_tile = 32;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    #if XNN_ARCH_WASMRELAXEDSIMD
+-      qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vcvt_ukernel__wasmrelaxedsimd_x32;
+-      qu8_cvt_config.init.qu8_cvt = xnn_init_qu8_cvt_wasmsimd_params;
+-      qu8_cvt_config.element_tile = 32;
+-    #else
+-      qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vcvt_ukernel__wasmsimd_x16;
+-      qu8_cvt_config.init.qu8_cvt = xnn_init_qu8_cvt_wasmsimd_params;
+-      qu8_cvt_config.element_tile = 16;
+-    #endif
+-  #elif XNN_ARCH_WASM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vcvt_ukernel__scalar_x1;
+-      qu8_cvt_config.init.qu8_cvt = xnn_init_qu8_cvt_scalar_params;
+-      qu8_cvt_config.element_tile = 1;
+-    } else {
+-      qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vcvt_ukernel__scalar_x4;
+-      qu8_cvt_config.init.qu8_cvt = xnn_init_qu8_cvt_scalar_params;
+-      qu8_cvt_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_RISCV
+-    qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vcvt_ukernel__scalar_x4;
+-    qu8_cvt_config.init.qu8_cvt = xnn_init_qu8_cvt_scalar_params;
+-    qu8_cvt_config.element_tile = 4;
+-  #endif
+-}
+-
+-static void init_qu8_lrelu_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__neon_x32;
+-      qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_neon_params;
+-      qu8_lrelu_config.element_tile = 32;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__armsimd32_x4;
+-      qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_armsimd32_params;
+-      qu8_lrelu_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__neon_x32;
+-    qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_neon_params;
+-    qu8_lrelu_config.element_tile = 32;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx2) {
+-      qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__avx2_x32;
+-      qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_avx2_params;
+-      qu8_lrelu_config.element_tile = 32;
+-    } else if (hardware_config->use_x86_avx) {
+-      qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__avx_x32;
+-      qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_avx_params;
+-      qu8_lrelu_config.element_tile = 32;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__sse41_x32;
+-      qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_sse2_params;
+-      qu8_lrelu_config.element_tile = 32;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__ssse3_x32;
+-      qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_sse2_params;
+-      qu8_lrelu_config.element_tile = 32;
+-    } else {
+-      qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__sse2_x32;
+-      qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_sse2_params;
+-      qu8_lrelu_config.element_tile = 32;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    #if XNN_ARCH_WASMRELAXEDSIMD
+-      if (hardware_config->is_x86) {
+-        qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__wasmrelaxedsimd_x86_x32;
+-        qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_wasmsimd_x86_params;
+-        qu8_lrelu_config.element_tile = 32;
+-      } else {
+-        qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__wasmrelaxedsimd_arm_x32;
+-        qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_wasmsimd_arm_params;
+-        qu8_lrelu_config.element_tile = 32;
+-      }
+-    #else
+-      if (hardware_config->is_x86) {
+-        qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__wasmsimd_x86_x16;
+-        qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_wasmsimd_x86_params;
+-        qu8_lrelu_config.element_tile = 16;
+-      } else {
+-        qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__wasmsimd_arm_x32;
+-        qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_wasmsimd_arm_params;
+-        qu8_lrelu_config.element_tile = 32;
+-      }
+-    #endif
+-  #elif XNN_ARCH_WASM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->is_x86) {
+-      qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__scalar_select_x4;
+-      qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_scalar_select_params;
+-      qu8_lrelu_config.element_tile = 4;
+-    } else {
+-      qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__scalar_andxor_x4;
+-      qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_scalar_andxor_params;
+-      qu8_lrelu_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_RISCV
+-    qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__scalar_andxor_x4;
+-    qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_scalar_andxor_params;
+-    qu8_lrelu_config.element_tile = 4;
+-  #endif
+-}
+-
+-static void init_qu8_to_f32_cvt_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_v8) {
+-      qu8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_f32_vcvt_ukernel__neon_x32;
+-      qu8_to_f32_cvt_config.init.qu8_f32_cvt = xnn_init_qu8_f32_cvt_neon_params;
+-      qu8_to_f32_cvt_config.element_tile = 32;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      qu8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_f32_vcvt_ukernel__scalar_x4;
+-      qu8_to_f32_cvt_config.init.qu8_f32_cvt = xnn_init_qu8_f32_cvt_scalar_params;
+-      qu8_to_f32_cvt_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    qu8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_f32_vcvt_ukernel__neon_x32;
+-    qu8_to_f32_cvt_config.init.qu8_f32_cvt = xnn_init_qu8_f32_cvt_neon_params;
+-    qu8_to_f32_cvt_config.element_tile = 32;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx512skx) {
+-      qu8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_f32_vcvt_ukernel__avx512skx_x32;
+-      qu8_to_f32_cvt_config.init.qu8_f32_cvt = xnn_init_qu8_f32_cvt_avx512_params;
+-      qu8_to_f32_cvt_config.element_tile = 32;
+-    } else if (hardware_config->use_x86_avx2) {
+-      qu8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_f32_vcvt_ukernel__avx2_x16;
+-      qu8_to_f32_cvt_config.init.qu8_f32_cvt = xnn_init_qu8_f32_cvt_avx_params;
+-      qu8_to_f32_cvt_config.element_tile = 16;
+-    } else if (hardware_config->use_x86_avx) {
+-      qu8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_f32_vcvt_ukernel__avx_x32;
+-      qu8_to_f32_cvt_config.init.qu8_f32_cvt = xnn_init_qu8_f32_cvt_avx_params;
+-      qu8_to_f32_cvt_config.element_tile = 32;
+-    } else if (hardware_config->use_x86_sse4_1) {
+-      qu8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_f32_vcvt_ukernel__sse41_x16;
+-      qu8_to_f32_cvt_config.init.qu8_f32_cvt = xnn_init_qu8_f32_cvt_sse4_params;
+-      qu8_to_f32_cvt_config.element_tile = 16;
+-    } else {
+-      qu8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_f32_vcvt_ukernel__sse2_x32;
+-      qu8_to_f32_cvt_config.init.qu8_f32_cvt = xnn_init_qu8_f32_cvt_sse2_params;
+-      qu8_to_f32_cvt_config.element_tile = 32;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    qu8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_f32_vcvt_ukernel__wasmsimd_x32;
+-    qu8_to_f32_cvt_config.init.qu8_f32_cvt = xnn_init_qu8_f32_cvt_wasmsimd_params;
+-    qu8_to_f32_cvt_config.element_tile = 32;
+-  #elif XNN_ARCH_WASM
+-    qu8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_f32_vcvt_ukernel__scalar_x1;
+-    qu8_to_f32_cvt_config.init.qu8_f32_cvt = xnn_init_qu8_f32_cvt_scalar_params;
+-    qu8_to_f32_cvt_config.element_tile = 1;
+-  #elif XNN_ARCH_RISCV
+-    qu8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_f32_vcvt_ukernel__scalar_x4;
+-    qu8_to_f32_cvt_config.init.qu8_f32_cvt = xnn_init_qu8_f32_cvt_scalar_params;
+-    qu8_to_f32_cvt_config.element_tile = 4;
+-  #endif
+-}
+-
+-static void init_s8_clamp_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      s8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_s8_vclamp_ukernel__neon_x64;
+-      s8_clamp_config.init.s8_minmax = xnn_init_s8_minmax_neon_params;
+-      s8_clamp_config.element_tile = 64;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      s8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_s8_vclamp_ukernel__scalar_x4;
+-      s8_clamp_config.init.s8_minmax = xnn_init_s8_minmax_scalar_params;
+-      s8_clamp_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    s8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_s8_vclamp_ukernel__neon_x64;
+-    s8_clamp_config.init.s8_minmax = xnn_init_s8_minmax_neon_params;
+-    s8_clamp_config.element_tile = 64;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_sse4_1) {
+-      s8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_s8_vclamp_ukernel__sse41_x64;
+-      s8_clamp_config.init.s8_minmax = xnn_init_s8_minmax_sse4_params;
+-      s8_clamp_config.element_tile = 64;
+-    } else {
+-      s8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_s8_vclamp_ukernel__sse2_x64;
+-      s8_clamp_config.init.s8_minmax = xnn_init_s8_minmax_sse2_params;
+-      s8_clamp_config.element_tile = 64;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    s8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_s8_vclamp_ukernel__wasmsimd_x64;
+-    s8_clamp_config.init.s8_minmax = xnn_init_s8_minmax_wasmsimd_params;
+-    s8_clamp_config.element_tile = 64;
+-  #elif XNN_ARCH_WASM
+-    s8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_s8_vclamp_ukernel__scalar_x4;
+-    s8_clamp_config.init.s8_minmax = xnn_init_s8_minmax_scalar_params;
+-    s8_clamp_config.element_tile = 4;
+-  #elif XNN_ARCH_RISCV
+-    s8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_s8_vclamp_ukernel__scalar_x4;
+-    s8_clamp_config.init.s8_minmax = xnn_init_s8_minmax_scalar_params;
+-    s8_clamp_config.element_tile = 4;
+-  #endif
+-}
+-
+-static void init_u8_clamp_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      u8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_u8_vclamp_ukernel__neon_x64;
+-      u8_clamp_config.init.u8_minmax = xnn_init_u8_minmax_neon_params;
+-      u8_clamp_config.element_tile = 64;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      u8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_u8_vclamp_ukernel__scalar_x4;
+-      u8_clamp_config.init.u8_minmax = xnn_init_u8_minmax_scalar_params;
+-      u8_clamp_config.element_tile = 4;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    u8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_u8_vclamp_ukernel__neon_x64;
+-    u8_clamp_config.init.u8_minmax = xnn_init_u8_minmax_neon_params;
+-    u8_clamp_config.element_tile = 64;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    u8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_u8_vclamp_ukernel__sse2_x64;
+-    u8_clamp_config.init.u8_minmax = xnn_init_u8_minmax_sse2_params;
+-    u8_clamp_config.element_tile = 64;
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    u8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_u8_vclamp_ukernel__wasmsimd_x64;
+-    u8_clamp_config.init.u8_minmax = xnn_init_u8_minmax_wasmsimd_params;
+-    u8_clamp_config.element_tile = 64;
+-  #elif XNN_ARCH_WASM
+-    u8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_u8_vclamp_ukernel__scalar_x4;
+-    u8_clamp_config.init.u8_minmax = xnn_init_u8_minmax_scalar_params;
+-    u8_clamp_config.element_tile = 4;
+-  #elif XNN_ARCH_RISCV
+-    u8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_u8_vclamp_ukernel__scalar_x4;
+-    u8_clamp_config.init.u8_minmax = xnn_init_u8_minmax_scalar_params;
+-    u8_clamp_config.element_tile = 4;
+-  #endif
+-}
+-
+-static void init_xx_copy_config(void) {
+-  #if XNN_ARCH_ARM
+-    xx_copy_config.ukernel = (xnn_vunary_ukernel_fn) xnn_xx_copy_ukernel__scalar_memcpy;
+-    xx_copy_config.element_tile = 1;
+-  #elif XNN_ARCH_ARM64
+-    xx_copy_config.ukernel = (xnn_vunary_ukernel_fn) xnn_xx_copy_ukernel__scalar_memcpy;
+-    xx_copy_config.element_tile = 1;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    xx_copy_config.ukernel = (xnn_vunary_ukernel_fn) xnn_xx_copy_ukernel__scalar_memcpy;
+-    xx_copy_config.element_tile = 1;
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    xx_copy_config.ukernel = (xnn_vunary_ukernel_fn) xnn_xx_copy_ukernel__scalar_memcpy;
+-    xx_copy_config.element_tile = 1;
+-  #elif XNN_ARCH_WASM
+-    xx_copy_config.ukernel = (xnn_vunary_ukernel_fn) xnn_xx_copy_ukernel__scalar_memcpy;
+-    xx_copy_config.element_tile = 1;
+-  #elif XNN_ARCH_RISCV
+-    xx_copy_config.ukernel = (xnn_vunary_ukernel_fn) xnn_xx_copy_ukernel__scalar_memcpy;
+-    xx_copy_config.element_tile = 1;
+-  #endif
+-}
++// static void init_f16_abs_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_abs_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vabs_ukernel__neonfp16arith_x16;
++//       f16_abs_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_abs_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vabs_ukernel__neonfp16arith_x16;
++//       f16_abs_config.element_tile = 16;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     f16_abs_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vabs_ukernel__sse2_x16;
++//     f16_abs_config.init.f16_abs = xnn_init_f16_abs_sse_params;
++//     f16_abs_config.element_tile = 16;
++//   #endif
++// }
++
++// static void init_f16_clamp_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vclamp_ukernel__neonfp16arith_x16;
++//       f16_clamp_config.init.f16_minmax = xnn_init_f16_minmax_fp16arith_params;
++//       f16_clamp_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vclamp_ukernel__neonfp16arith_x16;
++//       f16_clamp_config.init.f16_minmax = xnn_init_f16_minmax_fp16arith_params;
++//       f16_clamp_config.element_tile = 16;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_f16c) {
++//       f16_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vclamp_ukernel__f16c_x16;
++//       f16_clamp_config.init.f16_minmax = xnn_init_f16_minmax_avx_params;
++//       f16_clamp_config.element_tile = 16;
++//     }
++//   #endif
++// }
++
++// static void init_f16_elu_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_velu_ukernel__neonfp16arith_rr1_p3_x16;
++//       f16_elu_config.init.f16_elu = xnn_init_f16_elu_fp16arith_rr1_p3_params;
++//       f16_elu_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_velu_ukernel__neonfp16arith_rr1_p3_x16;
++//       f16_elu_config.init.f16_elu = xnn_init_f16_elu_fp16arith_rr1_p3_params;
++//       f16_elu_config.element_tile = 16;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx2) {
++//       f16_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_velu_ukernel__avx2_rr1_p3_x16;
++//       f16_elu_config.init.f16_elu = xnn_init_f16_elu_avx2_rr1_p3_params;
++//       f16_elu_config.element_tile = 16;
++//     }
++//   #endif
++// }
++
++// static void init_f16_hswish_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vhswish_ukernel__neonfp16arith_x16;
++//       f16_hswish_config.init.f16_hswish = xnn_init_f16_hswish_fp16arith_params;
++//       f16_hswish_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vhswish_ukernel__neonfp16arith_x16;
++//       f16_hswish_config.init.f16_hswish = xnn_init_f16_hswish_fp16arith_params;
++//       f16_hswish_config.element_tile = 16;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_f16c) {
++//       f16_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vhswish_ukernel__f16c_x16;
++//       f16_hswish_config.init.f16_hswish = xnn_init_f16_hswish_avx_params;
++//       f16_hswish_config.element_tile = 16;
++//     }
++//   #endif
++// }
++
++// static void init_f16_lrelu_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vlrelu_ukernel__neonfp16arith_x16;
++//       f16_lrelu_config.init.f16_lrelu = xnn_init_f16_lrelu_fp16arith_params;
++//       f16_lrelu_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vlrelu_ukernel__neonfp16arith_x16;
++//       f16_lrelu_config.init.f16_lrelu = xnn_init_f16_lrelu_fp16arith_params;
++//       f16_lrelu_config.element_tile = 16;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_f16c) {
++//       f16_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vlrelu_ukernel__f16c_x16;
++//       f16_lrelu_config.init.f16_lrelu = xnn_init_f16_lrelu_avx_params;
++//       f16_lrelu_config.element_tile = 16;
++//     }
++//   #endif
++// }
++
++// static void init_f16_neg_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_neg_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vneg_ukernel__neonfp16arith_x16;
++//       f16_neg_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_neg_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vneg_ukernel__neonfp16arith_x16;
++//       f16_neg_config.element_tile = 16;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     f16_neg_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vneg_ukernel__sse2_x16;
++//     f16_neg_config.init.f16_neg = xnn_init_f16_neg_sse_params;
++//     f16_neg_config.element_tile = 16;
++//   #endif
++// }
++
++// static void init_f16_rndd_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vrndd_ukernel__neonfp16arith_x16;
++//       f16_rndd_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vrndd_ukernel__neonfp16arith_x16;
++//       f16_rndd_config.element_tile = 16;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_f16c) {
++//       f16_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vrndd_ukernel__f16c_x16;
++//       f16_rndd_config.element_tile = 16;
++//     }
++//   #endif
++// }
++
++// static void init_f16_rndne_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vrndne_ukernel__neonfp16arith_x16;
++//       f16_rndne_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vrndne_ukernel__neonfp16arith_x16;
++//       f16_rndne_config.element_tile = 16;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_f16c) {
++//       f16_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vrndne_ukernel__f16c_x16;
++//       f16_rndne_config.element_tile = 16;
++//     }
++//   #endif
++// }
++
++// static void init_f16_rndu_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vrndu_ukernel__neonfp16arith_x16;
++//       f16_rndu_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vrndu_ukernel__neonfp16arith_x16;
++//       f16_rndu_config.element_tile = 16;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_f16c) {
++//       f16_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vrndu_ukernel__f16c_x16;
++//       f16_rndu_config.element_tile = 16;
++//     }
++//   #endif
++// }
++
++// static void init_f16_rndz_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vrndz_ukernel__neonfp16arith_x16;
++//       f16_rndz_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vrndz_ukernel__neonfp16arith_x16;
++//       f16_rndz_config.element_tile = 16;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_f16c) {
++//       f16_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vrndz_ukernel__f16c_x16;
++//       f16_rndz_config.element_tile = 16;
++//     }
++//   #endif
++// }
++
++// static void init_f16_sigmoid_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vsigmoid_ukernel__neonfp16arith_rr2_p2_nr1recps_x16;
++//       f16_sigmoid_config.init.f16_sigmoid = xnn_init_f16_sigmoid_fp16arith_rr2_p2_params;
++//       f16_sigmoid_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vsigmoid_ukernel__neonfp16arith_rr2_p2_nr1fma_x40;
++//       f16_sigmoid_config.init.f16_sigmoid = xnn_init_f16_sigmoid_fp16arith_rr2_p2_params;
++//       f16_sigmoid_config.element_tile = 40;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx2) {
++//       f16_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vsigmoid_ukernel__avx2_rr1_p2_rcp_x32;
++//       f16_sigmoid_config.init.f16_sigmoid = xnn_init_f16_sigmoid_avx2_rr1_p2_params;
++//       f16_sigmoid_config.element_tile = 32;
++//     }
++//   #endif
++// }
++
++// static void init_f16_sqr_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_sqr_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vsqr_ukernel__neonfp16arith_x16;
++//       f16_sqr_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_sqr_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vsqr_ukernel__neonfp16arith_x16;
++//       f16_sqr_config.element_tile = 16;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_f16c) {
++//       f16_sqr_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vsqr_ukernel__f16c_x16;
++//       f16_sqr_config.element_tile = 16;
++//     }
++//   #endif
++// }
++
++// static void init_f16_sqrt_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_sqrt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vsqrt_ukernel__neonfp16arith_nr1fma1adj_x8;
++//       f16_sqrt_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_sqrt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vsqrt_ukernel__aarch64_neonfp16arith_sqrt_x8;
++//       f16_sqrt_config.element_tile = 8;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_f16c) {
++//       f16_sqrt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vsqrt_ukernel__f16c_sqrt_x8;
++//       f16_sqrt_config.element_tile = 8;
++//     }
++//   #endif
++// }
++
++// static void init_f16_tanh_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vtanh_ukernel__neonfp16arith_expm1minus_rr1_p3h2ts_nr1fma_x32;
++//       f16_tanh_config.element_tile = 32;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vtanh_ukernel__aarch64_neonfp16arith_expm1minus_rr1_p3h2ts_div_x32;
++//       f16_tanh_config.element_tile = 32;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_fma3) {
++//       f16_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vtanh_ukernel__fma3_polynomial_p19h9t2_x32;
++//       f16_tanh_config.init.f16_tanh = xnn_init_f16_tanh_avx_polynomial_p19h9t2_params;
++//       f16_tanh_config.element_tile = 32;
++//     } else if (hardware_config->use_x86_f16c) {
++//       f16_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_vtanh_ukernel__f16c_expm1minus_rr1_p3h2ts_rcp_x72;
++//       f16_tanh_config.init.f16_tanh = xnn_init_f16_tanh_avx_expm1minus_rr1_p3h2_params;
++//       f16_tanh_config.element_tile = 72;
++//     }
++//   #endif
++// }
++
++// static void init_f16_to_f32_cvt_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       if (hardware_config->use_arm_neon_fp16) {
++//         f16_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_f32_vcvt_ukernel__neonfp16_x16;
++//         f16_to_f32_cvt_config.element_tile = 16;
++//       } else {
++//         f16_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_f32_vcvt_ukernel__neon_int16_x16;
++//         f16_to_f32_cvt_config.init.f16_f32_cvt = xnn_init_f16_f32_cvt_neon_params;
++//         f16_to_f32_cvt_config.element_tile = 16;
++//       }
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f16_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_f32_vcvt_ukernel__scalar_x4;
++//       f16_to_f32_cvt_config.init.f16_f32_cvt = xnn_init_f16_f32_cvt_scalar_params;
++//       f16_to_f32_cvt_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f16_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_f32_vcvt_ukernel__neonfp16_x16;
++//     f16_to_f32_cvt_config.element_tile = 16;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx512skx) {
++//       f16_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_f32_vcvt_ukernel__avx512skx_x16;
++//       f16_to_f32_cvt_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_f16c) {
++//       f16_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_f32_vcvt_ukernel__f16c_x16;
++//       f16_to_f32_cvt_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_avx) {
++//       f16_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_f32_vcvt_ukernel__avx_int16_x16;
++//       f16_to_f32_cvt_config.init.f16_f32_cvt = xnn_init_f16_f32_cvt_sse_int16_params;
++//       f16_to_f32_cvt_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       f16_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_f32_vcvt_ukernel__sse41_int16_x16;
++//       f16_to_f32_cvt_config.init.f16_f32_cvt = xnn_init_f16_f32_cvt_sse_int16_params;
++//       f16_to_f32_cvt_config.element_tile = 16;
++//     } else {
++//       f16_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_f32_vcvt_ukernel__sse2_int16_x32;
++//       f16_to_f32_cvt_config.init.f16_f32_cvt = xnn_init_f16_f32_cvt_sse_int16_params;
++//       f16_to_f32_cvt_config.element_tile = 32;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     #if XNN_ARCH_WASMRELAXEDSIMD
++//       f16_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_f32_vcvt_ukernel__wasmrelaxedsimd_int16_x16;
++//       f16_to_f32_cvt_config.init.f16_f32_cvt = xnn_init_f16_f32_cvt_wasmsimd_int16_params;
++//       f16_to_f32_cvt_config.element_tile = 16;
++//     #else
++//       f16_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_f32_vcvt_ukernel__wasmsimd_int16_x16;
++//       f16_to_f32_cvt_config.init.f16_f32_cvt = xnn_init_f16_f32_cvt_wasmsimd_int16_params;
++//       f16_to_f32_cvt_config.element_tile = 16;
++//     #endif
++//   #elif XNN_ARCH_WASM
++//     f16_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_f32_vcvt_ukernel__scalar_x1;
++//     f16_to_f32_cvt_config.init.f16_f32_cvt = xnn_init_f16_f32_cvt_scalar_params;
++//     f16_to_f32_cvt_config.element_tile = 1;
++//   #elif XNN_ARCH_RISCV
++//     f16_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f16_f32_vcvt_ukernel__scalar_x4;
++//     f16_to_f32_cvt_config.init.f16_f32_cvt = xnn_init_f16_f32_cvt_scalar_params;
++//     f16_to_f32_cvt_config.element_tile = 4;
++//   #endif
++// }
++
++// static void init_f32_abs_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       f32_abs_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vabs_ukernel__neon_x8;
++//       f32_abs_config.element_tile = 8;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_abs_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vabs_ukernel__scalar_x4;
++//       f32_abs_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_abs_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vabs_ukernel__neon_x8;
++//     f32_abs_config.element_tile = 8;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
++//       f32_abs_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vabs_ukernel__avx512f_x16;
++//       f32_abs_config.init.f32_abs = xnn_init_f32_abs_avx512_params;
++//       f32_abs_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_avx) {
++//       f32_abs_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vabs_ukernel__avx_x16;
++//       f32_abs_config.init.f32_abs = xnn_init_f32_abs_avx_params;
++//       f32_abs_config.element_tile = 16;
++//     } else {
++//       f32_abs_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vabs_ukernel__sse_x8;
++//       f32_abs_config.init.f32_abs = xnn_init_f32_abs_sse_params;
++//       f32_abs_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     f32_abs_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vabs_ukernel__wasmsimd_x8;
++//     f32_abs_config.init.f32_abs = xnn_init_f32_abs_wasmsimd_params;
++//     f32_abs_config.element_tile = 8;
++//   #elif XNN_ARCH_WASM
++//     f32_abs_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vabs_ukernel__scalar_x4;
++//     f32_abs_config.element_tile = 4;
++//   #elif XNN_ARCH_RISCV
++//     f32_abs_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vabs_ukernel__scalar_x4;
++//     f32_abs_config.element_tile = 4;
++//   #endif
++// }
++
++// static void init_f32_clamp_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       f32_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vclamp_ukernel__neon_x8;
++//       f32_clamp_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//       f32_clamp_config.element_tile = 8;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vclamp_ukernel__scalar_x4;
++//       f32_clamp_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//       f32_clamp_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vclamp_ukernel__neon_x8;
++//     f32_clamp_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//     f32_clamp_config.element_tile = 8;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
++//       f32_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vclamp_ukernel__avx512f_x16;
++//       f32_clamp_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//       f32_clamp_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_avx) {
++//       f32_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vclamp_ukernel__avx_x16;
++//       f32_clamp_config.init.f32_minmax = xnn_init_f32_minmax_avx_params;
++//       f32_clamp_config.element_tile = 16;
++//     } else {
++//       f32_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vclamp_ukernel__sse_x8;
++//       f32_clamp_config.init.f32_minmax = xnn_init_f32_minmax_sse_params;
++//       f32_clamp_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       f32_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vclamp_ukernel__wasmsimd_x86_x8;
++//       f32_clamp_config.init.f32_minmax = xnn_init_f32_minmax_wasmsimd_params;
++//       f32_clamp_config.element_tile = 8;
++//     } else {
++//       f32_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vclamp_ukernel__wasmsimd_arm_x8;
++//       f32_clamp_config.init.f32_minmax = xnn_init_f32_minmax_wasmsimd_params;
++//       f32_clamp_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASM
++//     f32_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vclamp_ukernel__wasm_x4;
++//     f32_clamp_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//     f32_clamp_config.element_tile = 4;
++//   #elif XNN_ARCH_RISCV
++//     f32_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vclamp_ukernel__scalar_x4;
++//     f32_clamp_config.init.f32_minmax = xnn_init_f32_minmax_scalar_params;
++//     f32_clamp_config.element_tile = 4;
++//   #endif
++// }
++
++// static void init_f32_elu_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       if (hardware_config->use_arm_neon_fma) {
++//         f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__neonfma_rr1_p6_x8;
++//         f32_elu_config.init.f32_elu = xnn_init_f32_elu_neonfma_rr1_p6_params;
++//         f32_elu_config.element_tile = 8;
++//       } else {
++//         f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__neon_rr2_lut16_p3_x8;
++//         f32_elu_config.init.f32_elu = xnn_init_f32_elu_neon_rr2_lut16_p3_params;
++//         f32_elu_config.element_tile = 8;
++//       }
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__scalar_rr2_lut16_p3_x4;
++//       f32_elu_config.init.f32_elu = xnn_init_f32_elu_scalar_rr2_lut16_p3_params;
++//       f32_elu_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__neonfma_rr1_lut16_p3_x16;
++//     f32_elu_config.init.f32_elu = xnn_init_f32_elu_neonfma_rr1_lut16_p3_params;
++//     f32_elu_config.element_tile = 16;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
++//       f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__avx512f_rr1_lut16_p3_perm_x64;
++//       f32_elu_config.init.f32_elu = xnn_init_f32_elu_avx512_rr1_lut16_p3_params;
++//       f32_elu_config.element_tile = 64;
++//     } else if (hardware_config->use_x86_avx2) {
++//       f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__avx2_rr1_lut4_p4_perm_x56;
++//       f32_elu_config.init.f32_elu = xnn_init_f32_elu_avx2_rr1_lut4_p4_params;
++//       f32_elu_config.element_tile = 56;
++//     } else if (hardware_config->use_x86_avx) {
++//       f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__avx_rr2_lut4_p4_perm_x32;
++//       f32_elu_config.init.f32_elu = xnn_init_f32_elu_avx_rr2_lut4_p4_params;
++//       f32_elu_config.element_tile = 32;
++//     } else {
++//       f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__sse2_rr2_lut16_p3_x12;
++//       f32_elu_config.init.f32_elu = xnn_init_f32_elu_sse2_rr2_lut16_p3_params;
++//       f32_elu_config.element_tile = 12;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     #if XNN_ARCH_WASMRELAXEDSIMD
++//       f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__wasmrelaxedsimd_fma_rr2_p6_x24;
++//       f32_elu_config.init.f32_elu = xnn_init_f32_elu_wasmsimd_rr2_p6_params;
++//       f32_elu_config.element_tile = 24;
++//     #else
++//       const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//       assert(hardware_config != NULL);
++//       if (hardware_config->is_x86) {
++//         f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__wasmsimd_x86_rr2_p6_x20;
++//         f32_elu_config.init.f32_elu = xnn_init_f32_elu_wasmsimd_rr2_p6_params;
++//         f32_elu_config.element_tile = 20;
++//       } else {
++//         f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__wasmsimd_arm_rr2_p6_x20;
++//         f32_elu_config.init.f32_elu = xnn_init_f32_elu_wasmsimd_rr2_p6_params;
++//         f32_elu_config.element_tile = 20;
++//       }
++//     #endif
++//   #elif XNN_ARCH_WASM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__scalar_rr2_lut16_p3_x2;
++//       f32_elu_config.init.f32_elu = xnn_init_f32_elu_scalar_rr2_lut16_p3_params;
++//       f32_elu_config.element_tile = 2;
++//     } else {
++//       f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__wasm_rr2_p6_x6;
++//       f32_elu_config.init.f32_elu = xnn_init_f32_elu_scalar_rr2_p6_params;
++//       f32_elu_config.element_tile = 6;
++//     }
++//   #elif XNN_ARCH_RISCV
++//     f32_elu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_velu_ukernel__scalar_rr2_lut16_p3_x4;
++//     f32_elu_config.init.f32_elu = xnn_init_f32_elu_scalar_rr2_lut16_p3_params;
++//     f32_elu_config.element_tile = 4;
++//   #endif
++// }
++
++// static void init_f32_hswish_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       f32_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vhswish_ukernel__neon_x16;
++//       f32_hswish_config.init.f32_hswish = xnn_init_f32_hswish_scalar_params;
++//       f32_hswish_config.element_tile = 16;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vhswish_ukernel__scalar_x4;
++//       f32_hswish_config.init.f32_hswish = xnn_init_f32_hswish_scalar_params;
++//       f32_hswish_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vhswish_ukernel__neon_x16;
++//     f32_hswish_config.init.f32_hswish = xnn_init_f32_hswish_scalar_params;
++//     f32_hswish_config.element_tile = 16;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
++//       f32_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vhswish_ukernel__avx512f_x16;
++//       f32_hswish_config.init.f32_hswish = xnn_init_f32_hswish_avx512_params;
++//       f32_hswish_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_fma3) {
++//       f32_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vhswish_ukernel__fma3_x16;
++//       f32_hswish_config.init.f32_hswish = xnn_init_f32_hswish_avx_params;
++//       f32_hswish_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_avx) {
++//       f32_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vhswish_ukernel__avx_x16;
++//       f32_hswish_config.init.f32_hswish = xnn_init_f32_hswish_avx_params;
++//       f32_hswish_config.element_tile = 16;
++//     } else {
++//       f32_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vhswish_ukernel__sse_x8;
++//       f32_hswish_config.init.f32_hswish = xnn_init_f32_hswish_sse_params;
++//       f32_hswish_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     f32_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vhswish_ukernel__wasmsimd_x16;
++//     f32_hswish_config.init.f32_hswish = xnn_init_f32_hswish_wasmsimd_params;
++//     f32_hswish_config.element_tile = 16;
++//   #elif XNN_ARCH_WASM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       f32_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vhswish_ukernel__scalar_x4;
++//       f32_hswish_config.init.f32_hswish = xnn_init_f32_hswish_scalar_params;
++//       f32_hswish_config.element_tile = 4;
++//     } else {
++//       f32_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vhswish_ukernel__wasm_x4;
++//       f32_hswish_config.init.f32_hswish = xnn_init_f32_hswish_scalar_params;
++//       f32_hswish_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_RISCV
++//     f32_hswish_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vhswish_ukernel__scalar_x4;
++//     f32_hswish_config.init.f32_hswish = xnn_init_f32_hswish_scalar_params;
++//     f32_hswish_config.element_tile = 4;
++//   #endif
++// }
++
++// static void init_f32_lrelu_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       f32_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vlrelu_ukernel__neon_x8;
++//       f32_lrelu_config.init.f32_lrelu = xnn_init_f32_lrelu_scalar_params;
++//       f32_lrelu_config.element_tile = 8;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vlrelu_ukernel__scalar_x4;
++//       f32_lrelu_config.init.f32_lrelu = xnn_init_f32_lrelu_scalar_params;
++//       f32_lrelu_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vlrelu_ukernel__neon_x8;
++//     f32_lrelu_config.init.f32_lrelu = xnn_init_f32_lrelu_scalar_params;
++//     f32_lrelu_config.element_tile = 8;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
++//       f32_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vlrelu_ukernel__avx512f_x16;
++//       f32_lrelu_config.init.f32_lrelu = xnn_init_f32_lrelu_scalar_params;
++//       f32_lrelu_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_avx) {
++//       f32_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vlrelu_ukernel__avx_x16;
++//       f32_lrelu_config.init.f32_lrelu = xnn_init_f32_lrelu_avx_params;
++//       f32_lrelu_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       f32_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vlrelu_ukernel__sse41_x8;
++//       f32_lrelu_config.init.f32_lrelu = xnn_init_f32_lrelu_sse_params;
++//       f32_lrelu_config.element_tile = 8;
++//     } else {
++//       f32_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vlrelu_ukernel__sse_x8;
++//       f32_lrelu_config.init.f32_lrelu = xnn_init_f32_lrelu_sse_params;
++//       f32_lrelu_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     #if XNN_ARCH_WASMRELAXEDSIMD
++//       if (hardware_config->is_x86) {
++//         f32_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vlrelu_ukernel__wasmrelaxedsimd_iminmax_x4;
++//         f32_lrelu_config.init.f32_lrelu = xnn_init_f32_lrelu_wasmsimd_params;
++//         f32_lrelu_config.element_tile = 4;
++//       } else {
++//         f32_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vlrelu_ukernel__wasmrelaxedsimd_laneselect_x4;
++//         f32_lrelu_config.init.f32_lrelu = xnn_init_f32_lrelu_wasmsimd_params;
++//         f32_lrelu_config.element_tile = 4;
++//       }
++//     #else
++//       if (hardware_config->is_x86) {
++//         f32_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vlrelu_ukernel__wasmsimd_iminmax_x8;
++//         f32_lrelu_config.init.f32_lrelu = xnn_init_f32_lrelu_wasmsimd_params;
++//         f32_lrelu_config.element_tile = 8;
++//       } else {
++//         f32_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vlrelu_ukernel__wasmsimd_laneselect_x8;
++//         f32_lrelu_config.init.f32_lrelu = xnn_init_f32_lrelu_wasmsimd_params;
++//         f32_lrelu_config.element_tile = 8;
++//       }
++//     #endif
++//   #elif XNN_ARCH_WASM
++//     f32_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vlrelu_ukernel__scalar_x4;
++//     f32_lrelu_config.init.f32_lrelu = xnn_init_f32_lrelu_scalar_params;
++//     f32_lrelu_config.element_tile = 4;
++//   #elif XNN_ARCH_RISCV
++//     f32_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vlrelu_ukernel__scalar_x4;
++//     f32_lrelu_config.init.f32_lrelu = xnn_init_f32_lrelu_scalar_params;
++//     f32_lrelu_config.element_tile = 4;
++//   #endif
++// }
++
++// static void init_f32_neg_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       f32_neg_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vneg_ukernel__neon_x8;
++//       f32_neg_config.element_tile = 8;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_neg_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vneg_ukernel__scalar_x4;
++//       f32_neg_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_neg_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vneg_ukernel__neon_x8;
++//     f32_neg_config.element_tile = 8;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
++//       f32_neg_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vneg_ukernel__avx512f_x16;
++//       f32_neg_config.init.f32_neg = xnn_init_f32_neg_avx512_params;
++//       f32_neg_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_avx) {
++//       f32_neg_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vneg_ukernel__avx_x16;
++//       f32_neg_config.init.f32_neg = xnn_init_f32_neg_avx_params;
++//       f32_neg_config.element_tile = 16;
++//     } else {
++//       f32_neg_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vneg_ukernel__sse_x8;
++//       f32_neg_config.init.f32_neg = xnn_init_f32_neg_sse_params;
++//       f32_neg_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     f32_neg_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vneg_ukernel__wasmsimd_x8;
++//     f32_neg_config.init.f32_neg = xnn_init_f32_neg_wasmsimd_params;
++//     f32_neg_config.element_tile = 8;
++//   #elif XNN_ARCH_WASM
++//     f32_neg_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vneg_ukernel__scalar_x4;
++//     f32_neg_config.element_tile = 4;
++//   #elif XNN_ARCH_RISCV
++//     f32_neg_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vneg_ukernel__scalar_x4;
++//     f32_neg_config.element_tile = 4;
++//   #endif
++// }
++
++// static void init_f32_relu_config(void) {
++//   #if XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     f32_relu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrelu_ukernel__wasmsimd_x16;
++//     f32_relu_config.element_tile = 16;
++//   #elif XNN_ARCH_WASM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       f32_relu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrelu_ukernel__scalar_x8;
++//       f32_relu_config.element_tile = 8;
++//     } else {
++//       f32_relu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrelu_ukernel__wasm_x8;
++//       f32_relu_config.element_tile = 8;
++//     }
++//   #endif
++// }
++
++// static void init_f32_rndd_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       if (hardware_config->use_arm_neon_v8) {
++//         f32_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndd_ukernel__neonv8_x8;
++//         f32_rndd_config.element_tile = 8;
++//       } else {
++//         f32_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndd_ukernel__neon_x8;
++//         f32_rndd_config.element_tile = 8;
++//       }
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndd_ukernel__scalar_libm_x1;
++//       f32_rndd_config.element_tile = 1;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndd_ukernel__neonv8_x8;
++//     f32_rndd_config.element_tile = 8;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
++//       f32_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndd_ukernel__avx512f_x16;
++//       f32_rndd_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_avx) {
++//       f32_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndd_ukernel__avx_x16;
++//       f32_rndd_config.init.f32_rnd = xnn_init_f32_rnd_avx_params;
++//       f32_rndd_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       f32_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndd_ukernel__sse41_x8;
++//       f32_rndd_config.element_tile = 8;
++//     } else {
++//       f32_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndd_ukernel__sse2_x8;
++//       f32_rndd_config.init.f32_rnd = xnn_init_f32_rnd_sse2_params;
++//       f32_rndd_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     f32_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndd_ukernel__wasmsimd_x8;
++//     f32_rndd_config.element_tile = 8;
++//   #elif XNN_ARCH_WASM
++//     f32_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndd_ukernel__scalar_libm_x4;
++//     f32_rndd_config.element_tile = 4;
++//   #elif XNN_ARCH_RISCV
++//     f32_rndd_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndd_ukernel__scalar_libm_x1;
++//     f32_rndd_config.element_tile = 1;
++//   #endif
++// }
++
++// static void init_f32_rndne_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       if (hardware_config->use_arm_neon_v8) {
++//         f32_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndne_ukernel__neonv8_x8;
++//         f32_rndne_config.element_tile = 8;
++//       } else {
++//         f32_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndne_ukernel__neon_x8;
++//         f32_rndne_config.element_tile = 8;
++//       }
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndne_ukernel__scalar_libm_x1;
++//       f32_rndne_config.element_tile = 1;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndne_ukernel__neonv8_x8;
++//     f32_rndne_config.element_tile = 8;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
++//       f32_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndne_ukernel__avx512f_x16;
++//       f32_rndne_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_avx) {
++//       f32_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndne_ukernel__avx_x16;
++//       f32_rndne_config.init.f32_rnd = xnn_init_f32_rnd_avx_params;
++//       f32_rndne_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       f32_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndne_ukernel__sse41_x8;
++//       f32_rndne_config.element_tile = 8;
++//     } else {
++//       f32_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndne_ukernel__sse2_x8;
++//       f32_rndne_config.init.f32_rnd = xnn_init_f32_rnd_sse2_params;
++//       f32_rndne_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     f32_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndne_ukernel__wasmsimd_x8;
++//     f32_rndne_config.element_tile = 8;
++//   #elif XNN_ARCH_WASM
++//     f32_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndne_ukernel__scalar_libm_x4;
++//     f32_rndne_config.element_tile = 4;
++//   #elif XNN_ARCH_RISCV
++//     f32_rndne_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndne_ukernel__scalar_libm_x1;
++//     f32_rndne_config.element_tile = 1;
++//   #endif
++// }
++
++// static void init_f32_rndu_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       if (hardware_config->use_arm_neon_v8) {
++//         f32_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndu_ukernel__neonv8_x8;
++//         f32_rndu_config.element_tile = 8;
++//       } else {
++//         f32_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndu_ukernel__neon_x8;
++//         f32_rndu_config.element_tile = 8;
++//       }
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndu_ukernel__scalar_libm_x1;
++//       f32_rndu_config.element_tile = 1;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndu_ukernel__neonv8_x8;
++//     f32_rndu_config.element_tile = 8;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
++//       f32_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndu_ukernel__avx512f_x16;
++//       f32_rndu_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_avx) {
++//       f32_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndu_ukernel__avx_x16;
++//       f32_rndu_config.init.f32_rnd = xnn_init_f32_rnd_avx_params;
++//       f32_rndu_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       f32_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndu_ukernel__sse41_x8;
++//       f32_rndu_config.element_tile = 8;
++//     } else {
++//       f32_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndu_ukernel__sse2_x8;
++//       f32_rndu_config.init.f32_rnd = xnn_init_f32_rnd_sse2_params;
++//       f32_rndu_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     f32_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndu_ukernel__wasmsimd_x8;
++//     f32_rndu_config.element_tile = 8;
++//   #elif XNN_ARCH_WASM
++//     f32_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndu_ukernel__scalar_libm_x4;
++//     f32_rndu_config.element_tile = 4;
++//   #elif XNN_ARCH_RISCV
++//     f32_rndu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndu_ukernel__scalar_libm_x1;
++//     f32_rndu_config.element_tile = 1;
++//   #endif
++// }
++
++// static void init_f32_rndz_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       if (hardware_config->use_arm_neon_v8) {
++//         f32_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndz_ukernel__neonv8_x8;
++//         f32_rndz_config.element_tile = 8;
++//       } else {
++//         f32_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndz_ukernel__neon_x8;
++//         f32_rndz_config.element_tile = 8;
++//       }
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndz_ukernel__scalar_libm_x1;
++//       f32_rndz_config.element_tile = 1;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndz_ukernel__neonv8_x8;
++//     f32_rndz_config.element_tile = 8;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
++//       f32_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndz_ukernel__avx512f_x16;
++//       f32_rndz_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_avx) {
++//       f32_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndz_ukernel__avx_x16;
++//       f32_rndz_config.init.f32_rnd = xnn_init_f32_rnd_avx_params;
++//       f32_rndz_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       f32_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndz_ukernel__sse41_x8;
++//       f32_rndz_config.element_tile = 8;
++//     } else {
++//       f32_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndz_ukernel__sse2_x8;
++//       f32_rndz_config.init.f32_rnd = xnn_init_f32_rnd_sse2_params;
++//       f32_rndz_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     f32_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndz_ukernel__wasmsimd_x8;
++//     f32_rndz_config.element_tile = 8;
++//   #elif XNN_ARCH_WASM
++//     f32_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndz_ukernel__scalar_libm_x4;
++//     f32_rndz_config.element_tile = 4;
++//   #elif XNN_ARCH_RISCV
++//     f32_rndz_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vrndz_ukernel__scalar_libm_x1;
++//     f32_rndz_config.element_tile = 1;
++//   #endif
++// }
++
++// static void init_f32_sigmoid_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       f32_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsigmoid_ukernel__neon_rr2_lut64_p2_nr2recps_x8;
++//       f32_sigmoid_config.init.f32_sigmoid = xnn_init_f32_sigmoid_neon_rr2_lut64_p2_params;
++//       f32_sigmoid_config.element_tile = 8;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsigmoid_ukernel__scalar_rr2_lut64_p2_div_x2;
++//       f32_sigmoid_config.init.f32_sigmoid = xnn_init_f32_sigmoid_scalar_rr2_lut64_p2_params;
++//       f32_sigmoid_config.element_tile = 2;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsigmoid_ukernel__neonfma_rr1_lut64_p2_nr2recps_x16;
++//     f32_sigmoid_config.init.f32_sigmoid = xnn_init_f32_sigmoid_neonfma_rr1_lut64_p2_params;
++//     f32_sigmoid_config.element_tile = 16;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
++//       f32_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsigmoid_ukernel__avx512f_rr2_lut32_p2_perm2_scalef_div_x64;
++//       f32_sigmoid_config.init.f32_sigmoid = xnn_init_f32_sigmoid_avx512_rr2_lut32_p2_params;
++//       f32_sigmoid_config.element_tile = 64;
++//     } else if (hardware_config->use_x86_avx2) {
++//       f32_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsigmoid_ukernel__avx2_rr1_p5_div_x40;
++//       f32_sigmoid_config.init.f32_sigmoid = xnn_init_f32_sigmoid_avx2_rr1_p5_params;
++//       f32_sigmoid_config.element_tile = 40;
++//     } else if (hardware_config->use_x86_avx) {
++//       f32_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsigmoid_ukernel__avx_rr2_p5_nr2_x40;
++//       f32_sigmoid_config.init.f32_sigmoid = xnn_init_f32_sigmoid_avx_rr2_p5_params;
++//       f32_sigmoid_config.element_tile = 40;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       f32_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsigmoid_ukernel__sse41_rr2_lut64_p2_div_x8;
++//       f32_sigmoid_config.init.f32_sigmoid = xnn_init_f32_sigmoid_sse2_rr2_lut64_p2_params;
++//       f32_sigmoid_config.element_tile = 8;
++//     } else {
++//       f32_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsigmoid_ukernel__sse2_rr2_lut64_p2_div_x8;
++//       f32_sigmoid_config.init.f32_sigmoid = xnn_init_f32_sigmoid_sse2_rr2_lut64_p2_params;
++//       f32_sigmoid_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     #if XNN_ARCH_WASMRELAXEDSIMD
++//       f32_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsigmoid_ukernel__wasmrelaxedsimd_fma_rr2_p5_div_x24;
++//       f32_sigmoid_config.init.f32_sigmoid = xnn_init_f32_sigmoid_wasmsimd_rr2_p5_params;
++//       f32_sigmoid_config.element_tile = 24;
++//     #else
++//       f32_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsigmoid_ukernel__wasmsimd_rr2_p5_div_x16;
++//       f32_sigmoid_config.init.f32_sigmoid = xnn_init_f32_sigmoid_wasmsimd_rr2_p5_params;
++//       f32_sigmoid_config.element_tile = 16;
++//     #endif
++//   #elif XNN_ARCH_WASM
++//     f32_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsigmoid_ukernel__scalar_rr2_lut64_p2_div_x2;
++//     f32_sigmoid_config.init.f32_sigmoid = xnn_init_f32_sigmoid_scalar_rr2_lut64_p2_params;
++//     f32_sigmoid_config.element_tile = 2;
++//   #elif XNN_ARCH_RISCV
++//     f32_sigmoid_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsigmoid_ukernel__scalar_rr2_lut64_p2_div_x2;
++//     f32_sigmoid_config.init.f32_sigmoid = xnn_init_f32_sigmoid_scalar_rr2_lut64_p2_params;
++//     f32_sigmoid_config.element_tile = 2;
++//   #endif
++// }
++
++// static void init_f32_sqr_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       f32_sqr_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqr_ukernel__neon_x8;
++//       f32_sqr_config.element_tile = 8;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_sqr_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqr_ukernel__scalar_x4;
++//       f32_sqr_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_sqr_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqr_ukernel__neon_x8;
++//     f32_sqr_config.element_tile = 8;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512f) {
++//       f32_sqr_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqr_ukernel__avx512f_x16;
++//       f32_sqr_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_avx) {
++//       f32_sqr_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqr_ukernel__avx_x16;
++//       f32_sqr_config.init.f32_default = xnn_init_f32_default_avx_params;
++//       f32_sqr_config.element_tile = 16;
++//     } else {
++//       f32_sqr_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqr_ukernel__sse_x8;
++//       f32_sqr_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     f32_sqr_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqr_ukernel__wasmsimd_x8;
++//     f32_sqr_config.element_tile = 8;
++//   #elif XNN_ARCH_WASM
++//     f32_sqr_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqr_ukernel__scalar_x4;
++//     f32_sqr_config.element_tile = 4;
++//   #elif XNN_ARCH_RISCV
++//     f32_sqr_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqr_ukernel__scalar_x4;
++//     f32_sqr_config.element_tile = 4;
++//   #endif
++// }
++
++// static void init_f32_sqrt_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       f32_sqrt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqrt_ukernel__scalar_sqrt_x1;
++//       f32_sqrt_config.element_tile = 1;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_sqrt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqrt_ukernel__scalar_sqrt_x1;
++//       f32_sqrt_config.element_tile = 1;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_sqrt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqrt_ukernel__aarch64_neon_sqrt_x4;
++//     f32_sqrt_config.element_tile = 4;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx) {
++//       f32_sqrt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqrt_ukernel__avx_sqrt_x8;
++//       f32_sqrt_config.init.f32_sqrt = xnn_init_f32_sqrt_avx_params;
++//       f32_sqrt_config.element_tile = 8;
++//     } else {
++//       f32_sqrt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqrt_ukernel__sse_sqrt_x4;
++//       f32_sqrt_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     f32_sqrt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqrt_ukernel__wasmsimd_sqrt_x8;
++//     f32_sqrt_config.element_tile = 8;
++//   #elif XNN_ARCH_WASM
++//     f32_sqrt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqrt_ukernel__scalar_sqrt_x1;
++//     f32_sqrt_config.element_tile = 1;
++//   #elif XNN_ARCH_RISCV
++//     f32_sqrt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vsqrt_ukernel__scalar_sqrt_x1;
++//     f32_sqrt_config.element_tile = 1;
++//   #endif
++// }
++
++// static void init_f32_tanh_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fma) {
++//       f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__neonfma_expm1minus_rr1_p6h5ts_nr2fma_x8;
++//       f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_neon_expm1minus_rr1_p6h5_params;
++//       f32_tanh_config.element_tile = 8;
++//     } else if (hardware_config->use_arm_neon) {
++//       f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__neon_expm1minus_rr1_p6h5ts_nr2recps_x8;
++//       f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_neon_expm1minus_rr1_p6h5_params;
++//       f32_tanh_config.element_tile = 8;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__scalar_expm1minus_rr1_lut8_p4h3ts_div_x4;
++//       f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_scalar_expm1minus_rr1_lut8_p4h3_params;
++//       f32_tanh_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__aarch64_neonfma_expm1minus_rr1_p6h5ts_div_x16;
++//     f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_neon_expm1minus_rr1_p6h5_params;
++//     f32_tanh_config.element_tile = 16;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512skx) {
++//       f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__avx512skx_expm1minus_rr1_lut4_p4h3ts_perm_div_x64;
++//       f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_avx512_expm1minus_rr1_lut4_p4h3_perm_params;
++//       f32_tanh_config.element_tile = 64;
++//     } else if (hardware_config->use_x86_avx2) {
++//       f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__avx2_expm1minus_rr1_lut4_p4h3ts_perm_div_x32;
++//       f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_avx_expm1minus_rr1_lut4_p4h3_perm_params;
++//       f32_tanh_config.element_tile = 32;
++//     } else if (hardware_config->use_x86_fma3) {
++//       f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__fma3_expm1minus_rr1_lut4_p4h3ts_perm_div_x40;
++//       f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_avx_expm1minus_rr1_lut4_p4h2_perm_params;
++//       f32_tanh_config.element_tile = 40;
++//     } else if (hardware_config->use_x86_avx) {
++//       f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__avx_expm1minus_rr1_lut4_p4h2ts_perm_div_x48;
++//       f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_avx_expm1minus_rr1_lut4_p4h2_perm_params;
++//       f32_tanh_config.element_tile = 48;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__sse41_expm1minus_rr1_lut8_p4h3ts_div_x20;
++//       f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_sse_expm1minus_rr1_lut8_p4h3_params;
++//       f32_tanh_config.element_tile = 20;
++//     } else {
++//       f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__sse2_expm1minus_rr1_lut8_p4h3ts_div_x16;
++//       f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_sse_expm1minus_rr1_lut8_p4h3_params;
++//       f32_tanh_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__wasmsimd_expm1minus_rr1_p6h5ts_div_nabs_pmax_x16;
++//       f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_wasmsimd_expm1minus_rr1_p6h5_nabs_params;
++//       f32_tanh_config.element_tile = 16;
++//     } else {
++//       f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__wasmsimd_expm1minus_rr1_p6h5ts_div_abs_min_x16;
++//       f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_wasmsimd_expm1minus_rr1_p6h5_abs_params;
++//       f32_tanh_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_WASM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__scalar_expm1minus_rr1_lut8_p4h3ts_div_x4;
++//       f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_scalar_expm1minus_rr1_lut8_p4h3_params;
++//       f32_tanh_config.element_tile = 4;
++//     } else {
++//       f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__wasm_expm1minus_rr1_p6h5ts_div_x4;
++//       f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_scalar_expm1minus_rr1_p6h5_params;
++//       f32_tanh_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_RISCV
++//     f32_tanh_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_vtanh_ukernel__fma_expm1minus_rr1_lut8_p4h3ts_div_x4;
++//     f32_tanh_config.init.f32_tanh = xnn_init_f32_tanh_scalar_expm1minus_rr1_lut8_p4h3_params;
++//     f32_tanh_config.element_tile = 4;
++//   #endif
++// }
++
++// static void init_f32_to_f16_cvt_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       if (hardware_config->use_arm_neon_fp16) {
++//         f32_to_f16_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_f16_vcvt_ukernel__neonfp16_x16;
++//         f32_to_f16_cvt_config.element_tile = 16;
++//       } else {
++//         f32_to_f16_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_f16_vcvt_ukernel__neon_x8;
++//         f32_to_f16_cvt_config.init.f32_f16_cvt = xnn_init_f32_f16_cvt_neon_params;
++//         f32_to_f16_cvt_config.element_tile = 8;
++//       }
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_to_f16_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_f16_vcvt_ukernel__scalar_fabsf_x2;
++//       f32_to_f16_cvt_config.init.f32_f16_cvt = xnn_init_f32_f16_cvt_scalar_fabsf_params;
++//       f32_to_f16_cvt_config.element_tile = 2;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_to_f16_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_f16_vcvt_ukernel__neonfp16_x16;
++//     f32_to_f16_cvt_config.element_tile = 16;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx512skx) {
++//       f32_to_f16_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_f16_vcvt_ukernel__avx512skx_x16;
++//       f32_to_f16_cvt_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_f16c) {
++//       f32_to_f16_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_f16_vcvt_ukernel__f16c_x16;
++//       f32_to_f16_cvt_config.init.f32_f16_cvt = xnn_init_f32_f16_cvt_f16c_params;
++//       f32_to_f16_cvt_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_avx) {
++//       f32_to_f16_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_f16_vcvt_ukernel__avx_x24;
++//       f32_to_f16_cvt_config.init.f32_f16_cvt = xnn_init_f32_f16_cvt_sse2_params;
++//       f32_to_f16_cvt_config.element_tile = 24;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       f32_to_f16_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_f16_vcvt_ukernel__sse41_x8;
++//       f32_to_f16_cvt_config.init.f32_f16_cvt = xnn_init_f32_f16_cvt_sse2_params;
++//       f32_to_f16_cvt_config.element_tile = 8;
++//     } else {
++//       f32_to_f16_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_f16_vcvt_ukernel__sse2_x16;
++//       f32_to_f16_cvt_config.init.f32_f16_cvt = xnn_init_f32_f16_cvt_sse2_params;
++//       f32_to_f16_cvt_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     #if XNN_ARCH_WASMRELAXEDSIMD
++//       f32_to_f16_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_f16_vcvt_ukernel__wasmrelaxedsimd_x24;
++//       f32_to_f16_cvt_config.init.f32_f16_cvt = xnn_init_f32_f16_cvt_wasmsimd_params;
++//       f32_to_f16_cvt_config.element_tile = 24;
++//     #else
++//       f32_to_f16_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_f16_vcvt_ukernel__wasmsimd_x24;
++//       f32_to_f16_cvt_config.init.f32_f16_cvt = xnn_init_f32_f16_cvt_wasmsimd_params;
++//       f32_to_f16_cvt_config.element_tile = 24;
++//     #endif
++//   #elif XNN_ARCH_WASM
++//     f32_to_f16_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_f16_vcvt_ukernel__scalar_bitcast_x4;
++//     f32_to_f16_cvt_config.init.f32_f16_cvt = xnn_init_f32_f16_cvt_scalar_bitcast_params;
++//     f32_to_f16_cvt_config.element_tile = 4;
++//   #elif XNN_ARCH_RISCV
++//     f32_to_f16_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_f16_vcvt_ukernel__scalar_fabsf_x2;
++//     f32_to_f16_cvt_config.init.f32_f16_cvt = xnn_init_f32_f16_cvt_scalar_fabsf_params;
++//     f32_to_f16_cvt_config.element_tile = 2;
++//   #endif
++// }
++
++// static void init_f32_to_qs8_cvt_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       if (hardware_config->use_arm_neon_v8) {
++//         f32_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qs8_vcvt_ukernel__neonv8_x32;
++//         f32_to_qs8_cvt_config.init.f32_qs8_cvt = xnn_init_f32_qs8_cvt_neonv8_params;
++//         f32_to_qs8_cvt_config.element_tile = 32;
++//       } else {
++//         f32_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qs8_vcvt_ukernel__neon_x32;
++//         f32_to_qs8_cvt_config.init.f32_qs8_cvt = xnn_init_f32_qs8_cvt_neon_params;
++//         f32_to_qs8_cvt_config.element_tile = 32;
++//       }
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qs8_vcvt_ukernel__scalar_imagic_x4;
++//       f32_to_qs8_cvt_config.init.f32_qs8_cvt = xnn_init_f32_qs8_cvt_scalar_imagic_params;
++//       f32_to_qs8_cvt_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qs8_vcvt_ukernel__neonv8_x32;
++//     f32_to_qs8_cvt_config.init.f32_qs8_cvt = xnn_init_f32_qs8_cvt_neonv8_params;
++//     f32_to_qs8_cvt_config.element_tile = 32;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx512skx) {
++//       f32_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qs8_vcvt_ukernel__avx512skx_x128;
++//       f32_to_qs8_cvt_config.init.f32_qs8_cvt = xnn_init_f32_qs8_cvt_avx512_params;
++//       f32_to_qs8_cvt_config.element_tile = 128;
++//     } else if (hardware_config->use_x86_avx2) {
++//       f32_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qs8_vcvt_ukernel__avx2_x64;
++//       f32_to_qs8_cvt_config.init.f32_qs8_cvt = xnn_init_f32_qs8_cvt_avx2_params;
++//       f32_to_qs8_cvt_config.element_tile = 64;
++//     } else if (hardware_config->use_x86_avx) {
++//       f32_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qs8_vcvt_ukernel__avx_x32;
++//       f32_to_qs8_cvt_config.init.f32_qs8_cvt = xnn_init_f32_qs8_cvt_avx_params;
++//       f32_to_qs8_cvt_config.element_tile = 32;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       f32_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qs8_vcvt_ukernel__sse41_x32;
++//       f32_to_qs8_cvt_config.init.f32_qs8_cvt = xnn_init_f32_qs8_cvt_sse4_params;
++//       f32_to_qs8_cvt_config.element_tile = 32;
++//     } else {
++//       f32_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qs8_vcvt_ukernel__sse2_x32;
++//       f32_to_qs8_cvt_config.init.f32_qs8_cvt = xnn_init_f32_qs8_cvt_sse2_params;
++//       f32_to_qs8_cvt_config.element_tile = 32;
++//       }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     f32_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qs8_vcvt_ukernel__wasmsimd_magic_x32;
++//     f32_to_qs8_cvt_config.init.f32_qs8_cvt = xnn_init_f32_qs8_cvt_wasmsimd_magic_params;
++//     f32_to_qs8_cvt_config.element_tile = 32;
++//   #elif XNN_ARCH_WASM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       f32_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__scalar_imagic_x1;
++//       f32_to_qs8_cvt_config.init.f32_qs8_cvt = xnn_init_f32_qs8_cvt_scalar_imagic_params;
++//       f32_to_qs8_cvt_config.element_tile = 1;
++//     } else {
++//       f32_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__wasm_fmagic_x4;
++//       f32_to_qs8_cvt_config.init.f32_qs8_cvt = xnn_init_f32_qs8_cvt_scalar_fmagic_params;
++//       f32_to_qs8_cvt_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_RISCV
++//     f32_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qs8_vcvt_ukernel__scalar_lrintf_x4;
++//     f32_to_qs8_cvt_config.init.f32_qs8_cvt = xnn_init_f32_qs8_cvt_scalar_lrintf_params;
++//     f32_to_qs8_cvt_config.element_tile = 4;
++//   #endif
++// }
++
++// static void init_f32_to_qu8_cvt_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       if (hardware_config->use_arm_neon_v8) {
++//         f32_to_qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__neonv8_x32;
++//         f32_to_qu8_cvt_config.init.f32_qu8_cvt = xnn_init_f32_qu8_cvt_neonv8_params;
++//         f32_to_qu8_cvt_config.element_tile = 32;
++//       } else {
++//         f32_to_qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__neon_x32;
++//         f32_to_qu8_cvt_config.init.f32_qu8_cvt = xnn_init_f32_qu8_cvt_neon_params;
++//         f32_to_qu8_cvt_config.element_tile = 32;
++//       }
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_to_qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__scalar_imagic_x4;
++//       f32_to_qu8_cvt_config.init.f32_qu8_cvt = xnn_init_f32_qu8_cvt_scalar_imagic_params;
++//       f32_to_qu8_cvt_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_to_qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__neonv8_x32;
++//     f32_to_qu8_cvt_config.init.f32_qu8_cvt = xnn_init_f32_qu8_cvt_neonv8_params;
++//     f32_to_qu8_cvt_config.element_tile = 32;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx512skx) {
++//       f32_to_qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__avx512skx_x128;
++//       f32_to_qu8_cvt_config.init.f32_qu8_cvt = xnn_init_f32_qu8_cvt_avx512_params;
++//       f32_to_qu8_cvt_config.element_tile = 128;
++//     } else if (hardware_config->use_x86_avx2) {
++//       f32_to_qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__avx2_x64;
++//       f32_to_qu8_cvt_config.init.f32_qu8_cvt = xnn_init_f32_qu8_cvt_avx2_params;
++//       f32_to_qu8_cvt_config.element_tile = 64;
++//     } else if (hardware_config->use_x86_avx) {
++//       f32_to_qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__avx_x32;
++//       f32_to_qu8_cvt_config.init.f32_qu8_cvt = xnn_init_f32_qu8_cvt_avx_params;
++//       f32_to_qu8_cvt_config.element_tile = 32;
++//     } else {
++//       f32_to_qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__sse2_x32;
++//       f32_to_qu8_cvt_config.init.f32_qu8_cvt = xnn_init_f32_qu8_cvt_sse2_params;
++//       f32_to_qu8_cvt_config.element_tile = 32;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     f32_to_qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__wasmsimd_magic_x32;
++//     f32_to_qu8_cvt_config.init.f32_qu8_cvt = xnn_init_f32_qu8_cvt_wasmsimd_magic_params;
++//     f32_to_qu8_cvt_config.element_tile = 32;
++//   #elif XNN_ARCH_WASM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       f32_to_qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__scalar_imagic_x1;
++//       f32_to_qu8_cvt_config.init.f32_qu8_cvt = xnn_init_f32_qu8_cvt_scalar_imagic_params;
++//       f32_to_qu8_cvt_config.element_tile = 1;
++//     } else {
++//       f32_to_qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__wasm_fmagic_x4;
++//       f32_to_qu8_cvt_config.init.f32_qu8_cvt = xnn_init_f32_qu8_cvt_scalar_fmagic_params;
++//       f32_to_qu8_cvt_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_RISCV
++//     f32_to_qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_f32_qu8_vcvt_ukernel__scalar_lrintf_x4;
++//     f32_to_qu8_cvt_config.init.f32_qu8_cvt = xnn_init_f32_qu8_cvt_scalar_lrintf_params;
++//     f32_to_qu8_cvt_config.element_tile = 4;
++//   #endif
++// }
++
++// static void init_qs8_cvt_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_v8) {
++//       qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vcvt_ukernel__neon_x32;
++//       qs8_cvt_config.init.qs8_cvt = xnn_init_qs8_cvt_neon_params;
++//       qs8_cvt_config.element_tile = 32;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vcvt_ukernel__armsimd32_x8;
++//       qs8_cvt_config.init.qs8_cvt = xnn_init_qs8_cvt_armsimd32_params;
++//       qs8_cvt_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vcvt_ukernel__neon_x32;
++//     qs8_cvt_config.init.qs8_cvt = xnn_init_qs8_cvt_neon_params;
++//     qs8_cvt_config.element_tile = 32;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx2) {
++//       qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vcvt_ukernel__avx2_x32;
++//       qs8_cvt_config.init.qs8_cvt = xnn_init_qs8_cvt_avx2_params;
++//       qs8_cvt_config.element_tile = 32;
++//     } else if (hardware_config->use_x86_avx) {
++//       qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vcvt_ukernel__avx_x32;
++//       qs8_cvt_config.init.qs8_cvt = xnn_init_qs8_cvt_ssse3_params;
++//       qs8_cvt_config.element_tile = 32;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vcvt_ukernel__sse41_x32;
++//       qs8_cvt_config.init.qs8_cvt = xnn_init_qs8_cvt_ssse3_params;
++//       qs8_cvt_config.element_tile = 32;
++//     } else if (hardware_config->use_x86_ssse3) {
++//       qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vcvt_ukernel__ssse3_x32;
++//       qs8_cvt_config.init.qs8_cvt = xnn_init_qs8_cvt_ssse3_params;
++//       qs8_cvt_config.element_tile = 32;
++//     } else {
++//       qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vcvt_ukernel__sse2_x32;
++//       qs8_cvt_config.init.qs8_cvt = xnn_init_qs8_cvt_sse2_params;
++//       qs8_cvt_config.element_tile = 32;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     #if XNN_ARCH_WASMRELAXEDSIMD
++//       qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vcvt_ukernel__wasmrelaxedsimd_x32;
++//       qs8_cvt_config.init.qs8_cvt = xnn_init_qs8_cvt_wasmsimd_params;
++//       qs8_cvt_config.element_tile = 32;
++//     #else
++//       qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vcvt_ukernel__wasmsimd_x16;
++//       qs8_cvt_config.init.qs8_cvt = xnn_init_qs8_cvt_wasmsimd_params;
++//       qs8_cvt_config.element_tile = 16;
++//     #endif
++//   #elif XNN_ARCH_WASM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vcvt_ukernel__scalar_x1;
++//       qs8_cvt_config.init.qs8_cvt = xnn_init_qs8_cvt_scalar_params;
++//       qs8_cvt_config.element_tile = 1;
++//     } else {
++//       qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vcvt_ukernel__scalar_x4;
++//       qs8_cvt_config.init.qs8_cvt = xnn_init_qs8_cvt_scalar_params;
++//       qs8_cvt_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_RISCV
++//     qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vcvt_ukernel__scalar_x4;
++//     qs8_cvt_config.init.qs8_cvt = xnn_init_qs8_cvt_scalar_params;
++//     qs8_cvt_config.element_tile = 4;
++//   #endif
++// }
++
++// static void init_qs16_to_qs8_cvt_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       qs16_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs16_qs8_vcvt_ukernel__asm_aarch32_neon_x16;
++//       qs16_to_qs8_cvt_config.init.qs16_qs8_cvt = xnn_init_qs16_qs8_cvt_neon_params;
++//       qs16_to_qs8_cvt_config.element_tile = 16;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       qs16_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs16_qs8_vcvt_ukernel__scalar_x4;
++//       qs16_to_qs8_cvt_config.init.qs16_qs8_cvt = xnn_init_qs16_qs8_cvt_scalar_params;
++//       qs16_to_qs8_cvt_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     qs16_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs16_qs8_vcvt_ukernel__neon_x32;
++//     qs16_to_qs8_cvt_config.init.qs16_qs8_cvt = xnn_init_qs16_qs8_cvt_neon_params;
++//     qs16_to_qs8_cvt_config.element_tile = 32;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx) {
++//       qs16_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs16_qs8_vcvt_ukernel__avx_x16;
++//       qs16_to_qs8_cvt_config.init.qs16_qs8_cvt = xnn_init_qs16_qs8_cvt_sse4_params;
++//       qs16_to_qs8_cvt_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       qs16_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs16_qs8_vcvt_ukernel__sse41_x16;
++//       qs16_to_qs8_cvt_config.init.qs16_qs8_cvt = xnn_init_qs16_qs8_cvt_sse4_params;
++//       qs16_to_qs8_cvt_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_ssse3) {
++//       qs16_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs16_qs8_vcvt_ukernel__ssse3_x16;
++//       qs16_to_qs8_cvt_config.init.qs16_qs8_cvt = xnn_init_qs16_qs8_cvt_ssse3_params;
++//       qs16_to_qs8_cvt_config.element_tile = 16;
++//     } else {
++//       qs16_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs16_qs8_vcvt_ukernel__sse2_x16;
++//       qs16_to_qs8_cvt_config.init.qs16_qs8_cvt = xnn_init_qs16_qs8_cvt_sse2_params;
++//       qs16_to_qs8_cvt_config.element_tile = 16;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     qs16_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs16_qs8_vcvt_ukernel__wasmsimd_x16;
++//     qs16_to_qs8_cvt_config.init.qs16_qs8_cvt = xnn_init_qs16_qs8_cvt_wasmsimd_params;
++//     qs16_to_qs8_cvt_config.element_tile = 16;
++//   #else
++//     qs16_to_qs8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs16_qs8_vcvt_ukernel__scalar_x4;
++//     qs16_to_qs8_cvt_config.init.qs16_qs8_cvt = xnn_init_qs16_qs8_cvt_scalar_params;
++//     qs16_to_qs8_cvt_config.element_tile = 4;
++//   #endif
++// }
++
++// static void init_qs8_lrelu_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__neon_x32;
++//       qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_neon_params;
++//       qs8_lrelu_config.element_tile = 32;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__armsimd32_x4;
++//       qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_armsimd32_params;
++//       qs8_lrelu_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__neon_x32;
++//     qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_neon_params;
++//     qs8_lrelu_config.element_tile = 32;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx2) {
++//       qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__avx2_x32;
++//       qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_avx2_params;
++//       qs8_lrelu_config.element_tile = 32;
++//     } else if (hardware_config->use_x86_avx) {
++//       qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__avx_x32;
++//       qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_avx_params;
++//       qs8_lrelu_config.element_tile = 32;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__sse41_x32;
++//       qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_sse2_params;
++//       qs8_lrelu_config.element_tile = 32;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__ssse3_x32;
++//       qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_sse2_params;
++//       qs8_lrelu_config.element_tile = 32;
++//     } else {
++//       qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__sse2_x32;
++//       qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_sse2_params;
++//       qs8_lrelu_config.element_tile = 32;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     #if XNN_ARCH_WASMRELAXEDSIMD
++//       if (hardware_config->is_x86) {
++//         qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__wasmrelaxedsimd_x86_x32;
++//         qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_wasmsimd_x86_params;
++//         qs8_lrelu_config.element_tile = 32;
++//       } else {
++//         qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__wasmrelaxedsimd_arm_x32;
++//         qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_wasmsimd_arm_params;
++//         qs8_lrelu_config.element_tile = 32;
++//       }
++//     #else
++//       if (hardware_config->is_x86) {
++//         qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__wasmsimd_x86_x16;
++//         qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_wasmsimd_x86_params;
++//         qs8_lrelu_config.element_tile = 16;
++//       } else {
++//         qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__wasmsimd_arm_x32;
++//         qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_wasmsimd_arm_params;
++//         qs8_lrelu_config.element_tile = 32;
++//       }
++//     #endif
++//   #elif XNN_ARCH_WASM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__scalar_select_x4;
++//       qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_scalar_select_params;
++//       qs8_lrelu_config.element_tile = 4;
++//     } else {
++//       qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__scalar_andxor_x4;
++//       qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_scalar_andxor_params;
++//       qs8_lrelu_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_RISCV
++//     qs8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_vlrelu_ukernel__scalar_andxor_x4;
++//     qs8_lrelu_config.init.qs8_lrelu = xnn_init_qs8_lrelu_scalar_andxor_params;
++//     qs8_lrelu_config.element_tile = 4;
++//   #endif
++// }
++
++// static void init_qs8_to_f32_cvt_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_v8) {
++//       qs8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_f32_vcvt_ukernel__neon_x32;
++//       qs8_to_f32_cvt_config.init.qs8_f32_cvt = xnn_init_qs8_f32_cvt_neon_params;
++//       qs8_to_f32_cvt_config.element_tile = 32;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       qs8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_f32_vcvt_ukernel__scalar_x4;
++//       qs8_to_f32_cvt_config.init.qs8_f32_cvt = xnn_init_qs8_f32_cvt_scalar_params;
++//       qs8_to_f32_cvt_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     qs8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_f32_vcvt_ukernel__neon_x32;
++//     qs8_to_f32_cvt_config.init.qs8_f32_cvt = xnn_init_qs8_f32_cvt_neon_params;
++//     qs8_to_f32_cvt_config.element_tile = 32;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx512skx) {
++//       qs8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_f32_vcvt_ukernel__avx512skx_x32;
++//       qs8_to_f32_cvt_config.init.qs8_f32_cvt = xnn_init_qs8_f32_cvt_avx512_params;
++//       qs8_to_f32_cvt_config.element_tile = 32;
++//     } else if (hardware_config->use_x86_avx2) {
++//       qs8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_f32_vcvt_ukernel__avx2_x16;
++//       qs8_to_f32_cvt_config.init.qs8_f32_cvt = xnn_init_qs8_f32_cvt_avx_params;
++//       qs8_to_f32_cvt_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_avx) {
++//       qs8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_f32_vcvt_ukernel__avx_x32;
++//       qs8_to_f32_cvt_config.init.qs8_f32_cvt = xnn_init_qs8_f32_cvt_avx_params;
++//       qs8_to_f32_cvt_config.element_tile = 32;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       qs8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_f32_vcvt_ukernel__sse41_x16;
++//       qs8_to_f32_cvt_config.init.qs8_f32_cvt = xnn_init_qs8_f32_cvt_sse4_params;
++//       qs8_to_f32_cvt_config.element_tile = 16;
++//     } else {
++//       qs8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_f32_vcvt_ukernel__sse2_x32;
++//       qs8_to_f32_cvt_config.init.qs8_f32_cvt = xnn_init_qs8_f32_cvt_sse2_params;
++//       qs8_to_f32_cvt_config.element_tile = 32;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     qs8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_f32_vcvt_ukernel__wasmsimd_x32;
++//     qs8_to_f32_cvt_config.init.qs8_f32_cvt = xnn_init_qs8_f32_cvt_wasmsimd_params;
++//     qs8_to_f32_cvt_config.element_tile = 32;
++//   #elif XNN_ARCH_WASM
++//     qs8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_f32_vcvt_ukernel__scalar_x1;
++//     qs8_to_f32_cvt_config.init.qs8_f32_cvt = xnn_init_qs8_f32_cvt_scalar_params;
++//     qs8_to_f32_cvt_config.element_tile = 1;
++//   #elif XNN_ARCH_RISCV
++//     qs8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qs8_f32_vcvt_ukernel__scalar_x4;
++//     qs8_to_f32_cvt_config.init.qs8_f32_cvt = xnn_init_qs8_f32_cvt_scalar_params;
++//     qs8_to_f32_cvt_config.element_tile = 4;
++//   #endif
++// }
++
++// static void init_qu8_cvt_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_v8) {
++//       qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vcvt_ukernel__neon_x32;
++//       qu8_cvt_config.init.qu8_cvt = xnn_init_qu8_cvt_neon_params;
++//       qu8_cvt_config.element_tile = 32;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vcvt_ukernel__armsimd32_x8;
++//       qu8_cvt_config.init.qu8_cvt = xnn_init_qu8_cvt_armsimd32_params;
++//       qu8_cvt_config.element_tile = 8;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vcvt_ukernel__neon_x32;
++//     qu8_cvt_config.init.qu8_cvt = xnn_init_qu8_cvt_neon_params;
++//     qu8_cvt_config.element_tile = 32;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx2) {
++//       qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vcvt_ukernel__avx2_x32;
++//       qu8_cvt_config.init.qu8_cvt = xnn_init_qu8_cvt_avx2_params;
++//       qu8_cvt_config.element_tile = 32;
++//     } else if (hardware_config->use_x86_avx) {
++//       qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vcvt_ukernel__avx_x32;
++//       qu8_cvt_config.init.qu8_cvt = xnn_init_qu8_cvt_ssse3_params;
++//       qu8_cvt_config.element_tile = 32;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vcvt_ukernel__sse41_x32;
++//       qu8_cvt_config.init.qu8_cvt = xnn_init_qu8_cvt_ssse3_params;
++//       qu8_cvt_config.element_tile = 32;
++//     } else if (hardware_config->use_x86_ssse3) {
++//       qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vcvt_ukernel__ssse3_x32;
++//       qu8_cvt_config.init.qu8_cvt = xnn_init_qu8_cvt_ssse3_params;
++//       qu8_cvt_config.element_tile = 32;
++//     } else {
++//       qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vcvt_ukernel__sse2_x32;
++//       qu8_cvt_config.init.qu8_cvt = xnn_init_qu8_cvt_sse2_params;
++//       qu8_cvt_config.element_tile = 32;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     #if XNN_ARCH_WASMRELAXEDSIMD
++//       qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vcvt_ukernel__wasmrelaxedsimd_x32;
++//       qu8_cvt_config.init.qu8_cvt = xnn_init_qu8_cvt_wasmsimd_params;
++//       qu8_cvt_config.element_tile = 32;
++//     #else
++//       qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vcvt_ukernel__wasmsimd_x16;
++//       qu8_cvt_config.init.qu8_cvt = xnn_init_qu8_cvt_wasmsimd_params;
++//       qu8_cvt_config.element_tile = 16;
++//     #endif
++//   #elif XNN_ARCH_WASM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vcvt_ukernel__scalar_x1;
++//       qu8_cvt_config.init.qu8_cvt = xnn_init_qu8_cvt_scalar_params;
++//       qu8_cvt_config.element_tile = 1;
++//     } else {
++//       qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vcvt_ukernel__scalar_x4;
++//       qu8_cvt_config.init.qu8_cvt = xnn_init_qu8_cvt_scalar_params;
++//       qu8_cvt_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_RISCV
++//     qu8_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vcvt_ukernel__scalar_x4;
++//     qu8_cvt_config.init.qu8_cvt = xnn_init_qu8_cvt_scalar_params;
++//     qu8_cvt_config.element_tile = 4;
++//   #endif
++// }
++
++// static void init_qu8_lrelu_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__neon_x32;
++//       qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_neon_params;
++//       qu8_lrelu_config.element_tile = 32;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__armsimd32_x4;
++//       qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_armsimd32_params;
++//       qu8_lrelu_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__neon_x32;
++//     qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_neon_params;
++//     qu8_lrelu_config.element_tile = 32;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx2) {
++//       qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__avx2_x32;
++//       qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_avx2_params;
++//       qu8_lrelu_config.element_tile = 32;
++//     } else if (hardware_config->use_x86_avx) {
++//       qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__avx_x32;
++//       qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_avx_params;
++//       qu8_lrelu_config.element_tile = 32;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__sse41_x32;
++//       qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_sse2_params;
++//       qu8_lrelu_config.element_tile = 32;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__ssse3_x32;
++//       qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_sse2_params;
++//       qu8_lrelu_config.element_tile = 32;
++//     } else {
++//       qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__sse2_x32;
++//       qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_sse2_params;
++//       qu8_lrelu_config.element_tile = 32;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     #if XNN_ARCH_WASMRELAXEDSIMD
++//       if (hardware_config->is_x86) {
++//         qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__wasmrelaxedsimd_x86_x32;
++//         qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_wasmsimd_x86_params;
++//         qu8_lrelu_config.element_tile = 32;
++//       } else {
++//         qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__wasmrelaxedsimd_arm_x32;
++//         qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_wasmsimd_arm_params;
++//         qu8_lrelu_config.element_tile = 32;
++//       }
++//     #else
++//       if (hardware_config->is_x86) {
++//         qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__wasmsimd_x86_x16;
++//         qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_wasmsimd_x86_params;
++//         qu8_lrelu_config.element_tile = 16;
++//       } else {
++//         qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__wasmsimd_arm_x32;
++//         qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_wasmsimd_arm_params;
++//         qu8_lrelu_config.element_tile = 32;
++//       }
++//     #endif
++//   #elif XNN_ARCH_WASM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->is_x86) {
++//       qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__scalar_select_x4;
++//       qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_scalar_select_params;
++//       qu8_lrelu_config.element_tile = 4;
++//     } else {
++//       qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__scalar_andxor_x4;
++//       qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_scalar_andxor_params;
++//       qu8_lrelu_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_RISCV
++//     qu8_lrelu_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_vlrelu_ukernel__scalar_andxor_x4;
++//     qu8_lrelu_config.init.qu8_lrelu = xnn_init_qu8_lrelu_scalar_andxor_params;
++//     qu8_lrelu_config.element_tile = 4;
++//   #endif
++// }
++
++// static void init_qu8_to_f32_cvt_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_v8) {
++//       qu8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_f32_vcvt_ukernel__neon_x32;
++//       qu8_to_f32_cvt_config.init.qu8_f32_cvt = xnn_init_qu8_f32_cvt_neon_params;
++//       qu8_to_f32_cvt_config.element_tile = 32;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       qu8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_f32_vcvt_ukernel__scalar_x4;
++//       qu8_to_f32_cvt_config.init.qu8_f32_cvt = xnn_init_qu8_f32_cvt_scalar_params;
++//       qu8_to_f32_cvt_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     qu8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_f32_vcvt_ukernel__neon_x32;
++//     qu8_to_f32_cvt_config.init.qu8_f32_cvt = xnn_init_qu8_f32_cvt_neon_params;
++//     qu8_to_f32_cvt_config.element_tile = 32;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx512skx) {
++//       qu8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_f32_vcvt_ukernel__avx512skx_x32;
++//       qu8_to_f32_cvt_config.init.qu8_f32_cvt = xnn_init_qu8_f32_cvt_avx512_params;
++//       qu8_to_f32_cvt_config.element_tile = 32;
++//     } else if (hardware_config->use_x86_avx2) {
++//       qu8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_f32_vcvt_ukernel__avx2_x16;
++//       qu8_to_f32_cvt_config.init.qu8_f32_cvt = xnn_init_qu8_f32_cvt_avx_params;
++//       qu8_to_f32_cvt_config.element_tile = 16;
++//     } else if (hardware_config->use_x86_avx) {
++//       qu8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_f32_vcvt_ukernel__avx_x32;
++//       qu8_to_f32_cvt_config.init.qu8_f32_cvt = xnn_init_qu8_f32_cvt_avx_params;
++//       qu8_to_f32_cvt_config.element_tile = 32;
++//     } else if (hardware_config->use_x86_sse4_1) {
++//       qu8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_f32_vcvt_ukernel__sse41_x16;
++//       qu8_to_f32_cvt_config.init.qu8_f32_cvt = xnn_init_qu8_f32_cvt_sse4_params;
++//       qu8_to_f32_cvt_config.element_tile = 16;
++//     } else {
++//       qu8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_f32_vcvt_ukernel__sse2_x32;
++//       qu8_to_f32_cvt_config.init.qu8_f32_cvt = xnn_init_qu8_f32_cvt_sse2_params;
++//       qu8_to_f32_cvt_config.element_tile = 32;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     qu8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_f32_vcvt_ukernel__wasmsimd_x32;
++//     qu8_to_f32_cvt_config.init.qu8_f32_cvt = xnn_init_qu8_f32_cvt_wasmsimd_params;
++//     qu8_to_f32_cvt_config.element_tile = 32;
++//   #elif XNN_ARCH_WASM
++//     qu8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_f32_vcvt_ukernel__scalar_x1;
++//     qu8_to_f32_cvt_config.init.qu8_f32_cvt = xnn_init_qu8_f32_cvt_scalar_params;
++//     qu8_to_f32_cvt_config.element_tile = 1;
++//   #elif XNN_ARCH_RISCV
++//     qu8_to_f32_cvt_config.ukernel = (xnn_vunary_ukernel_fn) xnn_qu8_f32_vcvt_ukernel__scalar_x4;
++//     qu8_to_f32_cvt_config.init.qu8_f32_cvt = xnn_init_qu8_f32_cvt_scalar_params;
++//     qu8_to_f32_cvt_config.element_tile = 4;
++//   #endif
++// }
++
++// static void init_s8_clamp_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       s8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_s8_vclamp_ukernel__neon_x64;
++//       s8_clamp_config.init.s8_minmax = xnn_init_s8_minmax_neon_params;
++//       s8_clamp_config.element_tile = 64;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       s8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_s8_vclamp_ukernel__scalar_x4;
++//       s8_clamp_config.init.s8_minmax = xnn_init_s8_minmax_scalar_params;
++//       s8_clamp_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     s8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_s8_vclamp_ukernel__neon_x64;
++//     s8_clamp_config.init.s8_minmax = xnn_init_s8_minmax_neon_params;
++//     s8_clamp_config.element_tile = 64;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_sse4_1) {
++//       s8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_s8_vclamp_ukernel__sse41_x64;
++//       s8_clamp_config.init.s8_minmax = xnn_init_s8_minmax_sse4_params;
++//       s8_clamp_config.element_tile = 64;
++//     } else {
++//       s8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_s8_vclamp_ukernel__sse2_x64;
++//       s8_clamp_config.init.s8_minmax = xnn_init_s8_minmax_sse2_params;
++//       s8_clamp_config.element_tile = 64;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     s8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_s8_vclamp_ukernel__wasmsimd_x64;
++//     s8_clamp_config.init.s8_minmax = xnn_init_s8_minmax_wasmsimd_params;
++//     s8_clamp_config.element_tile = 64;
++//   #elif XNN_ARCH_WASM
++//     s8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_s8_vclamp_ukernel__scalar_x4;
++//     s8_clamp_config.init.s8_minmax = xnn_init_s8_minmax_scalar_params;
++//     s8_clamp_config.element_tile = 4;
++//   #elif XNN_ARCH_RISCV
++//     s8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_s8_vclamp_ukernel__scalar_x4;
++//     s8_clamp_config.init.s8_minmax = xnn_init_s8_minmax_scalar_params;
++//     s8_clamp_config.element_tile = 4;
++//   #endif
++// }
++
++// static void init_u8_clamp_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       u8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_u8_vclamp_ukernel__neon_x64;
++//       u8_clamp_config.init.u8_minmax = xnn_init_u8_minmax_neon_params;
++//       u8_clamp_config.element_tile = 64;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       u8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_u8_vclamp_ukernel__scalar_x4;
++//       u8_clamp_config.init.u8_minmax = xnn_init_u8_minmax_scalar_params;
++//       u8_clamp_config.element_tile = 4;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     u8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_u8_vclamp_ukernel__neon_x64;
++//     u8_clamp_config.init.u8_minmax = xnn_init_u8_minmax_neon_params;
++//     u8_clamp_config.element_tile = 64;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     u8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_u8_vclamp_ukernel__sse2_x64;
++//     u8_clamp_config.init.u8_minmax = xnn_init_u8_minmax_sse2_params;
++//     u8_clamp_config.element_tile = 64;
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     u8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_u8_vclamp_ukernel__wasmsimd_x64;
++//     u8_clamp_config.init.u8_minmax = xnn_init_u8_minmax_wasmsimd_params;
++//     u8_clamp_config.element_tile = 64;
++//   #elif XNN_ARCH_WASM
++//     u8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_u8_vclamp_ukernel__scalar_x4;
++//     u8_clamp_config.init.u8_minmax = xnn_init_u8_minmax_scalar_params;
++//     u8_clamp_config.element_tile = 4;
++//   #elif XNN_ARCH_RISCV
++//     u8_clamp_config.ukernel = (xnn_vunary_ukernel_fn) xnn_u8_vclamp_ukernel__scalar_x4;
++//     u8_clamp_config.init.u8_minmax = xnn_init_u8_minmax_scalar_params;
++//     u8_clamp_config.element_tile = 4;
++//   #endif
++// }
++
++// static void init_xx_copy_config(void) {
++//   #if XNN_ARCH_ARM
++//     xx_copy_config.ukernel = (xnn_vunary_ukernel_fn) xnn_xx_copy_ukernel__scalar_memcpy;
++//     xx_copy_config.element_tile = 1;
++//   #elif XNN_ARCH_ARM64
++//     xx_copy_config.ukernel = (xnn_vunary_ukernel_fn) xnn_xx_copy_ukernel__scalar_memcpy;
++//     xx_copy_config.element_tile = 1;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     xx_copy_config.ukernel = (xnn_vunary_ukernel_fn) xnn_xx_copy_ukernel__scalar_memcpy;
++//     xx_copy_config.element_tile = 1;
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     xx_copy_config.ukernel = (xnn_vunary_ukernel_fn) xnn_xx_copy_ukernel__scalar_memcpy;
++//     xx_copy_config.element_tile = 1;
++//   #elif XNN_ARCH_WASM
++//     xx_copy_config.ukernel = (xnn_vunary_ukernel_fn) xnn_xx_copy_ukernel__scalar_memcpy;
++//     xx_copy_config.element_tile = 1;
++//   #elif XNN_ARCH_RISCV
++//     xx_copy_config.ukernel = (xnn_vunary_ukernel_fn) xnn_xx_copy_ukernel__scalar_memcpy;
++//     xx_copy_config.element_tile = 1;
++//   #endif
++// }
+ 
+ 
+ #if XNN_PLATFORM_WINDOWS
+  static BOOL CALLBACK init_f16_abs_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_abs_config();
++    //init_f16_abs_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f16_clamp_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_clamp_config();
++    //init_f16_clamp_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f16_elu_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_elu_config();
++    //init_f16_elu_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f16_hswish_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_hswish_config();
++    //init_f16_hswish_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f16_lrelu_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_lrelu_config();
++    //init_f16_lrelu_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f16_neg_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_neg_config();
++    //init_f16_neg_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f16_rndd_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_rndd_config();
++    //init_f16_rndd_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f16_rndne_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_rndne_config();
++    //init_f16_rndne_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f16_rndu_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_rndu_config();
++    //init_f16_rndu_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f16_rndz_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_rndz_config();
++    //init_f16_rndz_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f16_sigmoid_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_sigmoid_config();
++    //init_f16_sigmoid_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f16_sqr_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_sqr_config();
++    //init_f16_sqr_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f16_sqrt_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_sqrt_config();
++    //init_f16_sqrt_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f16_tanh_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_tanh_config();
++    //init_f16_tanh_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_abs_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_abs_config();
++    //init_f32_abs_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_clamp_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_clamp_config();
++    //init_f32_clamp_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_elu_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_elu_config();
++    //init_f32_elu_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_hswish_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_hswish_config();
++    //init_f32_hswish_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_lrelu_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_lrelu_config();
++    //init_f32_lrelu_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_neg_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_neg_config();
++    //init_f32_neg_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_relu_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_relu_config();
++    //init_f32_relu_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_rndd_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_rndd_config();
++    //init_f32_rndd_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_rndne_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_rndne_config();
++    //init_f32_rndne_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_rndu_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_rndu_config();
++    //init_f32_rndu_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_rndz_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_rndz_config();
++    //init_f32_rndz_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_sigmoid_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_sigmoid_config();
++    //init_f32_sigmoid_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_sqr_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_sqr_config();
++    //init_f32_sqr_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_sqrt_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_sqrt_config();
++    //init_f32_sqrt_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_tanh_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_tanh_config();
++    //init_f32_tanh_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_qs8_lrelu_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_qs8_lrelu_config();
++    //init_qs8_lrelu_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_qu8_lrelu_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_qu8_lrelu_config();
++    //init_qu8_lrelu_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_s8_clamp_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_s8_clamp_config();
++    //init_s8_clamp_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_u8_clamp_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_u8_clamp_config();
++    //init_u8_clamp_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f16_to_f32_cvt_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_to_f32_cvt_config();
++    //init_f16_to_f32_cvt_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_to_f16_cvt_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_to_f16_cvt_config();
++    //init_f32_to_f16_cvt_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_to_qs8_cvt_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_to_qs8_cvt_config();
++    //init_f32_to_qs8_cvt_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_to_qu8_cvt_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_to_qu8_cvt_config();
++    //init_f32_to_qu8_cvt_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_qs8_cvt_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_qs8_cvt_config();
++    //init_qs8_cvt_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_qs8_to_f32_cvt_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_qs8_to_f32_cvt_config();
++    //init_qs8_to_f32_cvt_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_qs16_to_qs8_cvt_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_qs16_to_qs8_cvt_config();
++    //init_qs16_to_qs8_cvt_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_qu8_cvt_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_qu8_cvt_config();
++    //init_qu8_cvt_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_qu8_to_f32_cvt_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_qu8_to_f32_cvt_config();
++    //init_qu8_to_f32_cvt_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_xx_copy_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_xx_copy_config();
++    //init_xx_copy_config();
+     return TRUE;
+   }
+ #endif
+diff --git a/src/unpool-config.c b/src/unpool-config.c
+index 06ec2b20c..da63404e9 100644
+--- a/src/unpool-config.c
++++ b/src/unpool-config.c
+@@ -26,31 +26,31 @@ static struct xnn_unpool_config x32_unpool_config = {0};
+   static pthread_once_t init_guard_x32_unpool = PTHREAD_ONCE_INIT;
+ #endif
+ 
+-static void init_x32_unpool_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      x32_unpool_config.unpool = (xnn_unpool_ukernel_fn) xnn_x32_unpool_ukernel__neon;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      x32_unpool_config.unpool = (xnn_unpool_ukernel_fn) xnn_x32_unpool_ukernel__scalar;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    x32_unpool_config.unpool = (xnn_unpool_ukernel_fn) xnn_x32_unpool_ukernel__neon;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    x32_unpool_config.unpool = (xnn_unpool_ukernel_fn) xnn_x32_unpool_ukernel__sse2;
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    x32_unpool_config.unpool = (xnn_unpool_ukernel_fn) xnn_x32_unpool_ukernel__wasmsimd;
+-  #elif XNN_ARCH_WASM
+-    x32_unpool_config.unpool = (xnn_unpool_ukernel_fn) xnn_x32_unpool_ukernel__scalar;
+-  #elif XNN_ARCH_RISCV
+-    x32_unpool_config.unpool = (xnn_unpool_ukernel_fn) xnn_x32_unpool_ukernel__scalar;
+-  #endif
+-}
++// static void init_x32_unpool_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       x32_unpool_config.unpool = (xnn_unpool_ukernel_fn) xnn_x32_unpool_ukernel__neon;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       x32_unpool_config.unpool = (xnn_unpool_ukernel_fn) xnn_x32_unpool_ukernel__scalar;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     x32_unpool_config.unpool = (xnn_unpool_ukernel_fn) xnn_x32_unpool_ukernel__neon;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     x32_unpool_config.unpool = (xnn_unpool_ukernel_fn) xnn_x32_unpool_ukernel__sse2;
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     x32_unpool_config.unpool = (xnn_unpool_ukernel_fn) xnn_x32_unpool_ukernel__wasmsimd;
++//   #elif XNN_ARCH_WASM
++//     x32_unpool_config.unpool = (xnn_unpool_ukernel_fn) xnn_x32_unpool_ukernel__scalar;
++//   #elif XNN_ARCH_RISCV
++//     x32_unpool_config.unpool = (xnn_unpool_ukernel_fn) xnn_x32_unpool_ukernel__scalar;
++//   #endif
++// }
+ 
+ #if XNN_PLATFORM_WINDOWS
+   static BOOL CALLBACK init_x32_unpool_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_x32_unpool_config();
++    //init_x32_unpool_config();
+     return TRUE;
+   }
+ #endif
+diff --git a/src/vmulcaddc-config.c b/src/vmulcaddc-config.c
+index c1d783da4..2c3787b35 100644
+--- a/src/vmulcaddc-config.c
++++ b/src/vmulcaddc-config.c
+@@ -29,104 +29,104 @@ static struct xnn_vmulcaddc_config f32_vmulcaddc_config = {0};
+   static pthread_once_t init_guard_f32_vmulcaddc = PTHREAD_ONCE_INIT;
+ #endif
+ 
+-static void init_f16_vmulcaddc_config(void) {
+-  #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_vmulcaddc_config.ukernel = (xnn_vmulcaddc_ukernel_fn) xnn_f16_vmulcaddc_minmax_ukernel_c8__neonfp16arith_2x;
+-      f16_vmulcaddc_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
+-      f16_vmulcaddc_config.channel_tile = 8;
+-      f16_vmulcaddc_config.row_tile = 2;
+-    }
+-  #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon_fp16_arith) {
+-      f16_vmulcaddc_config.ukernel = (xnn_vmulcaddc_ukernel_fn) xnn_f16_vmulcaddc_minmax_ukernel_c8__neonfp16arith_2x;
+-      f16_vmulcaddc_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
+-      f16_vmulcaddc_config.channel_tile = 8;
+-      f16_vmulcaddc_config.row_tile = 2;
+-    }
+-  #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_x86_avx2) {
+-      f16_vmulcaddc_config.ukernel = (xnn_vmulcaddc_ukernel_fn) xnn_f16_vmulcaddc_minmax_ukernel_c8__fma3_2x;
+-      f16_vmulcaddc_config.init.f16 = xnn_init_f16_minmax_avx_params;
+-      f16_vmulcaddc_config.channel_tile = 8;
+-      f16_vmulcaddc_config.row_tile = 2;
+-    }
+-  #endif
+-}
++// static void init_f16_vmulcaddc_config(void) {
++//   #if XNN_ARCH_ARM && XNN_ENABLE_ARM_FP16_VECTOR && XNN_ENABLE_ARM_FP16_SCALAR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_vmulcaddc_config.ukernel = (xnn_vmulcaddc_ukernel_fn) xnn_f16_vmulcaddc_minmax_ukernel_c8__neonfp16arith_2x;
++//       f16_vmulcaddc_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
++//       f16_vmulcaddc_config.channel_tile = 8;
++//       f16_vmulcaddc_config.row_tile = 2;
++//     }
++//   #elif XNN_ARCH_ARM64 && XNN_ENABLE_ARM_FP16_VECTOR
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon_fp16_arith) {
++//       f16_vmulcaddc_config.ukernel = (xnn_vmulcaddc_ukernel_fn) xnn_f16_vmulcaddc_minmax_ukernel_c8__neonfp16arith_2x;
++//       f16_vmulcaddc_config.init.f16 = xnn_init_f16_minmax_fp16arith_params;
++//       f16_vmulcaddc_config.channel_tile = 8;
++//       f16_vmulcaddc_config.row_tile = 2;
++//     }
++//   #elif (XNN_ARCH_X86 || XNN_ARCH_X86_64) && !XNN_PLATFORM_MOBILE
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_x86_avx2) {
++//       f16_vmulcaddc_config.ukernel = (xnn_vmulcaddc_ukernel_fn) xnn_f16_vmulcaddc_minmax_ukernel_c8__fma3_2x;
++//       f16_vmulcaddc_config.init.f16 = xnn_init_f16_minmax_avx_params;
++//       f16_vmulcaddc_config.channel_tile = 8;
++//       f16_vmulcaddc_config.row_tile = 2;
++//     }
++//   #endif
++// }
+ 
+-static void init_f32_vmulcaddc_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      f32_vmulcaddc_config.ukernel = (xnn_vmulcaddc_ukernel_fn) xnn_f32_vmulcaddc_minmax_ukernel_c4__neon_2x;
+-      f32_vmulcaddc_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_vmulcaddc_config.channel_tile = 4;
+-      f32_vmulcaddc_config.row_tile = 2;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      f32_vmulcaddc_config.ukernel = (xnn_vmulcaddc_ukernel_fn) xnn_f32_vmulcaddc_minmax_ukernel_c1__scalar_2x;
+-      f32_vmulcaddc_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-      f32_vmulcaddc_config.channel_tile = 1;
+-      f32_vmulcaddc_config.row_tile = 2;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    f32_vmulcaddc_config.ukernel = (xnn_vmulcaddc_ukernel_fn) xnn_f32_vmulcaddc_minmax_ukernel_c4__neonfma_2x;
+-    f32_vmulcaddc_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_vmulcaddc_config.channel_tile = 4;
+-    f32_vmulcaddc_config.row_tile = 2;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    f32_vmulcaddc_config.ukernel = (xnn_vmulcaddc_ukernel_fn) xnn_f32_vmulcaddc_minmax_ukernel_c4__sse_2x;
+-    f32_vmulcaddc_config.init.f32 = xnn_init_f32_minmax_sse_params;
+-    f32_vmulcaddc_config.channel_tile = 4;
+-    f32_vmulcaddc_config.row_tile = 2;
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    #if XNN_ARCH_WASMRELAXEDSIMD
+-      f32_vmulcaddc_config.ukernel = (xnn_vmulcaddc_ukernel_fn) xnn_f32_vmulcaddc_minmax_ukernel_c4__wasmrelaxedsimd_fma_2x;
+-      f32_vmulcaddc_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-      f32_vmulcaddc_config.channel_tile = 4;
+-      f32_vmulcaddc_config.row_tile = 2;
+-    #else
+-      const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-      assert(hardware_config != NULL);
+-      if (hardware_config->is_x86) {
+-        f32_vmulcaddc_config.ukernel = (xnn_vmulcaddc_ukernel_fn) xnn_f32_vmulcaddc_minmax_ukernel_c4__wasmsimd_x86_2x;
+-        f32_vmulcaddc_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-        f32_vmulcaddc_config.channel_tile = 4;
+-        f32_vmulcaddc_config.row_tile = 2;
+-      } else {
+-        f32_vmulcaddc_config.ukernel = (xnn_vmulcaddc_ukernel_fn) xnn_f32_vmulcaddc_minmax_ukernel_c4__wasmsimd_arm_2x;
+-        f32_vmulcaddc_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
+-        f32_vmulcaddc_config.channel_tile = 4;
+-        f32_vmulcaddc_config.row_tile = 2;
+-      }
+-    #endif
+-  #elif XNN_ARCH_WASM
+-    f32_vmulcaddc_config.ukernel = (xnn_vmulcaddc_ukernel_fn) xnn_f32_vmulcaddc_minmax_ukernel_c1__wasm_2x;
+-    f32_vmulcaddc_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_vmulcaddc_config.channel_tile = 1;
+-    f32_vmulcaddc_config.row_tile = 2;
+-  #elif XNN_ARCH_RISCV
+-    f32_vmulcaddc_config.ukernel = (xnn_vmulcaddc_ukernel_fn) xnn_f32_vmulcaddc_minmax_ukernel_c1__scalar_2x;
+-    f32_vmulcaddc_config.init.f32 = xnn_init_f32_minmax_scalar_params;
+-    f32_vmulcaddc_config.channel_tile = 1;
+-    f32_vmulcaddc_config.row_tile = 2;
+-  #endif
+-}
++// static void init_f32_vmulcaddc_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       f32_vmulcaddc_config.ukernel = (xnn_vmulcaddc_ukernel_fn) xnn_f32_vmulcaddc_minmax_ukernel_c4__neon_2x;
++//       f32_vmulcaddc_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_vmulcaddc_config.channel_tile = 4;
++//       f32_vmulcaddc_config.row_tile = 2;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       f32_vmulcaddc_config.ukernel = (xnn_vmulcaddc_ukernel_fn) xnn_f32_vmulcaddc_minmax_ukernel_c1__scalar_2x;
++//       f32_vmulcaddc_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//       f32_vmulcaddc_config.channel_tile = 1;
++//       f32_vmulcaddc_config.row_tile = 2;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     f32_vmulcaddc_config.ukernel = (xnn_vmulcaddc_ukernel_fn) xnn_f32_vmulcaddc_minmax_ukernel_c4__neonfma_2x;
++//     f32_vmulcaddc_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_vmulcaddc_config.channel_tile = 4;
++//     f32_vmulcaddc_config.row_tile = 2;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     f32_vmulcaddc_config.ukernel = (xnn_vmulcaddc_ukernel_fn) xnn_f32_vmulcaddc_minmax_ukernel_c4__sse_2x;
++//     f32_vmulcaddc_config.init.f32 = xnn_init_f32_minmax_sse_params;
++//     f32_vmulcaddc_config.channel_tile = 4;
++//     f32_vmulcaddc_config.row_tile = 2;
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     #if XNN_ARCH_WASMRELAXEDSIMD
++//       f32_vmulcaddc_config.ukernel = (xnn_vmulcaddc_ukernel_fn) xnn_f32_vmulcaddc_minmax_ukernel_c4__wasmrelaxedsimd_fma_2x;
++//       f32_vmulcaddc_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//       f32_vmulcaddc_config.channel_tile = 4;
++//       f32_vmulcaddc_config.row_tile = 2;
++//     #else
++//       const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//       assert(hardware_config != NULL);
++//       if (hardware_config->is_x86) {
++//         f32_vmulcaddc_config.ukernel = (xnn_vmulcaddc_ukernel_fn) xnn_f32_vmulcaddc_minmax_ukernel_c4__wasmsimd_x86_2x;
++//         f32_vmulcaddc_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//         f32_vmulcaddc_config.channel_tile = 4;
++//         f32_vmulcaddc_config.row_tile = 2;
++//       } else {
++//         f32_vmulcaddc_config.ukernel = (xnn_vmulcaddc_ukernel_fn) xnn_f32_vmulcaddc_minmax_ukernel_c4__wasmsimd_arm_2x;
++//         f32_vmulcaddc_config.init.f32 = xnn_init_f32_minmax_wasmsimd_params;
++//         f32_vmulcaddc_config.channel_tile = 4;
++//         f32_vmulcaddc_config.row_tile = 2;
++//       }
++//     #endif
++//   #elif XNN_ARCH_WASM
++//     f32_vmulcaddc_config.ukernel = (xnn_vmulcaddc_ukernel_fn) xnn_f32_vmulcaddc_minmax_ukernel_c1__wasm_2x;
++//     f32_vmulcaddc_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_vmulcaddc_config.channel_tile = 1;
++//     f32_vmulcaddc_config.row_tile = 2;
++//   #elif XNN_ARCH_RISCV
++//     f32_vmulcaddc_config.ukernel = (xnn_vmulcaddc_ukernel_fn) xnn_f32_vmulcaddc_minmax_ukernel_c1__scalar_2x;
++//     f32_vmulcaddc_config.init.f32 = xnn_init_f32_minmax_scalar_params;
++//     f32_vmulcaddc_config.channel_tile = 1;
++//     f32_vmulcaddc_config.row_tile = 2;
++//   #endif
++// }
+ 
+ #if XNN_PLATFORM_WINDOWS
+   static BOOL CALLBACK init_f16_vmulcaddc_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f16_vmulcaddc_config();
++    //init_f16_vmulcaddc_config();
+     return TRUE;
+   }
+ 
+   static BOOL CALLBACK init_f32_vmulcaddc_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_f32_vmulcaddc_config();
++    //init_f32_vmulcaddc_config();
+     return TRUE;
+   }
+ #endif
+diff --git a/src/x8-lut-config.c b/src/x8-lut-config.c
+index a19f46b1c..b36c80d61 100644
+--- a/src/x8-lut-config.c
++++ b/src/x8-lut-config.c
+@@ -25,71 +25,71 @@ static struct xnn_x8_lut_config x8_lut_config = {0};
+   static pthread_once_t init_guard = PTHREAD_ONCE_INIT;
+ #endif
+ 
+-static void init_x8_lut_config(void) {
+-  #if XNN_ARCH_ARM
+-    x8_lut_config.microkernel = xnn_x8_lut_ukernel__scalar_x4;
+-    x8_lut_config.tile_size = 4;
+-  #elif XNN_ARCH_ARM64
+-    x8_lut_config.microkernel = xnn_x8_lut_ukernel__aarch64_neon_tbx128x4_x64;
+-    x8_lut_config.tile_size = 64;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
++// static void init_x8_lut_config(void) {
++//   #if XNN_ARCH_ARM
++//     x8_lut_config.microkernel = xnn_x8_lut_ukernel__scalar_x4;
++//     x8_lut_config.tile_size = 4;
++//   #elif XNN_ARCH_ARM64
++//     x8_lut_config.microkernel = xnn_x8_lut_ukernel__aarch64_neon_tbx128x4_x64;
++//     x8_lut_config.tile_size = 64;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
+ 
+-    if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512skx) {
+-      if (hardware_config->use_x86_avx512vbmi) {
+-        x8_lut_config.microkernel = xnn_x8_lut_ukernel__avx512vbmi_vpermx2b_x128;
+-        x8_lut_config.tile_size = 128;
+-      } else {
+-        x8_lut_config.microkernel = xnn_x8_lut_ukernel__avx512skx_vpshufb_x64;
+-        x8_lut_config.tile_size = 64;
+-      }
+-    } else if (hardware_config->use_x86_avx2) {
+-      x8_lut_config.microkernel = xnn_x8_lut_ukernel__avx2_x128;
+-      x8_lut_config.tile_size = 128;
+-    } else if (hardware_config->use_x86_avx) {
+-      x8_lut_config.microkernel = xnn_x8_lut_ukernel__avx_x64;
+-      x8_lut_config.tile_size = 64;
+-    } else {
+-      // Note: SSSE3 version is usually slower than scalar
+-      x8_lut_config.microkernel = xnn_x8_lut_ukernel__scalar_x4;
+-      x8_lut_config.tile_size = 4;
+-    }
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
++//     if (!XNN_PLATFORM_MOBILE && hardware_config->use_x86_avx512skx) {
++//       if (hardware_config->use_x86_avx512vbmi) {
++//         x8_lut_config.microkernel = xnn_x8_lut_ukernel__avx512vbmi_vpermx2b_x128;
++//         x8_lut_config.tile_size = 128;
++//       } else {
++//         x8_lut_config.microkernel = xnn_x8_lut_ukernel__avx512skx_vpshufb_x64;
++//         x8_lut_config.tile_size = 64;
++//       }
++//     } else if (hardware_config->use_x86_avx2) {
++//       x8_lut_config.microkernel = xnn_x8_lut_ukernel__avx2_x128;
++//       x8_lut_config.tile_size = 128;
++//     } else if (hardware_config->use_x86_avx) {
++//       x8_lut_config.microkernel = xnn_x8_lut_ukernel__avx_x64;
++//       x8_lut_config.tile_size = 64;
++//     } else {
++//       // Note: SSSE3 version is usually slower than scalar
++//       x8_lut_config.microkernel = xnn_x8_lut_ukernel__scalar_x4;
++//       x8_lut_config.tile_size = 4;
++//     }
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
+ 
+-    if (hardware_config->is_x86) {
+-      #if XNN_ARCH_WASMRELAXEDSIMD
+-        if (hardware_config->use_wasm_pshufb) {
+-          x8_lut_config.microkernel = xnn_x8_lut_ukernel__wasmpshufb_x32;
+-          x8_lut_config.tile_size = 32;
+-        } else {
+-          x8_lut_config.microkernel = xnn_x8_lut_ukernel__scalar_x1;
+-          x8_lut_config.tile_size = 1;
+-        }
+-      #else
+-        x8_lut_config.microkernel = xnn_x8_lut_ukernel__scalar_x1;
+-        x8_lut_config.tile_size = 1;
+-      #endif
+-    } else {
+-      x8_lut_config.microkernel = xnn_x8_lut_ukernel__wasmsimd_x32;
+-      x8_lut_config.tile_size = 32;
+-    }
+-  #elif XNN_ARCH_WASM
+-    x8_lut_config.microkernel = xnn_x8_lut_ukernel__scalar_x1;
+-    x8_lut_config.tile_size = 1;
+-  #elif XNN_ARCH_RISCV
+-    x8_lut_config.microkernel = xnn_x8_lut_ukernel__scalar_x4;
+-    x8_lut_config.tile_size = 4;
+-  #else
+-    #error "Unsupported architecture"
+-  #endif
+-}
++//     if (hardware_config->is_x86) {
++//       #if XNN_ARCH_WASMRELAXEDSIMD
++//         if (hardware_config->use_wasm_pshufb) {
++//           x8_lut_config.microkernel = xnn_x8_lut_ukernel__wasmpshufb_x32;
++//           x8_lut_config.tile_size = 32;
++//         } else {
++//           x8_lut_config.microkernel = xnn_x8_lut_ukernel__scalar_x1;
++//           x8_lut_config.tile_size = 1;
++//         }
++//       #else
++//         x8_lut_config.microkernel = xnn_x8_lut_ukernel__scalar_x1;
++//         x8_lut_config.tile_size = 1;
++//       #endif
++//     } else {
++//       x8_lut_config.microkernel = xnn_x8_lut_ukernel__wasmsimd_x32;
++//       x8_lut_config.tile_size = 32;
++//     }
++//   #elif XNN_ARCH_WASM
++//     x8_lut_config.microkernel = xnn_x8_lut_ukernel__scalar_x1;
++//     x8_lut_config.tile_size = 1;
++//   #elif XNN_ARCH_RISCV
++//     x8_lut_config.microkernel = xnn_x8_lut_ukernel__scalar_x4;
++//     x8_lut_config.tile_size = 4;
++//   #else
++//     #error "Unsupported architecture"
++//   #endif
++// }
+ 
+ #if XNN_PLATFORM_WINDOWS
+   static BOOL CALLBACK init_x8_lut_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_x8_lut_config();
++    //init_x8_lut_config();
+     return TRUE;
+   }
+ #endif
+diff --git a/src/xx-fill-config.c b/src/xx-fill-config.c
+index 6861e17e5..ae9e55bee 100644
+--- a/src/xx-fill-config.c
++++ b/src/xx-fill-config.c
+@@ -25,40 +25,40 @@ static struct xnn_xx_fill_config xx_fill_config = {0};
+   static pthread_once_t init_guard = PTHREAD_ONCE_INIT;
+ #endif
+ 
+-static void init_xx_fill_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      xx_fill_config.ukernel = (xnn_fill_ukernel_fn) xnn_xx_fill_ukernel__neon_x64;
+-      xx_fill_config.row_tile = 1;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      xx_fill_config.ukernel = (xnn_fill_ukernel_fn) xnn_xx_fill_ukernel__scalar_x16;
+-      xx_fill_config.row_tile = 1;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    xx_fill_config.ukernel = (xnn_fill_ukernel_fn) xnn_xx_fill_ukernel__neon_x64;
+-    xx_fill_config.row_tile = 1;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    xx_fill_config.ukernel = (xnn_fill_ukernel_fn) xnn_xx_fill_ukernel__sse2_x64;
+-    xx_fill_config.row_tile = 1;
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    xx_fill_config.ukernel = (xnn_fill_ukernel_fn) xnn_xx_fill_ukernel__wasmsimd_x64;
+-    xx_fill_config.row_tile = 1;
+-  #elif XNN_ARCH_WASM
+-    xx_fill_config.ukernel = (xnn_fill_ukernel_fn) xnn_xx_fill_ukernel__scalar_x16;
+-    xx_fill_config.row_tile = 1;
+-  #elif XNN_ARCH_RISCV
+-    xx_fill_config.ukernel = (xnn_fill_ukernel_fn) xnn_xx_fill_ukernel__scalar_x16;
+-    xx_fill_config.row_tile = 1;
+-  #else
+-    #error "Unsupported architecture"
+-  #endif
+-}
++// static void init_xx_fill_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       xx_fill_config.ukernel = (xnn_fill_ukernel_fn) xnn_xx_fill_ukernel__neon_x64;
++//       xx_fill_config.row_tile = 1;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       xx_fill_config.ukernel = (xnn_fill_ukernel_fn) xnn_xx_fill_ukernel__scalar_x16;
++//       xx_fill_config.row_tile = 1;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     xx_fill_config.ukernel = (xnn_fill_ukernel_fn) xnn_xx_fill_ukernel__neon_x64;
++//     xx_fill_config.row_tile = 1;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     xx_fill_config.ukernel = (xnn_fill_ukernel_fn) xnn_xx_fill_ukernel__sse2_x64;
++//     xx_fill_config.row_tile = 1;
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     xx_fill_config.ukernel = (xnn_fill_ukernel_fn) xnn_xx_fill_ukernel__wasmsimd_x64;
++//     xx_fill_config.row_tile = 1;
++//   #elif XNN_ARCH_WASM
++//     xx_fill_config.ukernel = (xnn_fill_ukernel_fn) xnn_xx_fill_ukernel__scalar_x16;
++//     xx_fill_config.row_tile = 1;
++//   #elif XNN_ARCH_RISCV
++//     xx_fill_config.ukernel = (xnn_fill_ukernel_fn) xnn_xx_fill_ukernel__scalar_x16;
++//     xx_fill_config.row_tile = 1;
++//   #else
++//     #error "Unsupported architecture"
++//   #endif
++// }
+ 
+ #if XNN_PLATFORM_WINDOWS
+   static BOOL CALLBACK init_xx_fill_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_xx_fill_config();
++    //init_xx_fill_config();
+     return TRUE;
+   }
+ #endif
+diff --git a/src/xx-pad-config.c b/src/xx-pad-config.c
+index 7daa00e31..87209b9f6 100644
+--- a/src/xx-pad-config.c
++++ b/src/xx-pad-config.c
+@@ -25,40 +25,40 @@ static struct xnn_xx_pad_config xx_pad_config = {0};
+   static pthread_once_t init_guard = PTHREAD_ONCE_INIT;
+ #endif
+ 
+-static void init_xx_pad_config(void) {
+-  #if XNN_ARCH_ARM
+-    const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
+-    assert(hardware_config != NULL);
+-    if (hardware_config->use_arm_neon) {
+-      xx_pad_config.ukernel = (xnn_pad_ukernel_fn) xnn_xx_pad_ukernel__neon;
+-      xx_pad_config.row_tile = 1;
+-    } else if (!XNN_PLATFORM_MOBILE) {
+-      xx_pad_config.ukernel = (xnn_pad_ukernel_fn) xnn_xx_pad_ukernel__scalar;
+-      xx_pad_config.row_tile = 1;
+-    }
+-  #elif XNN_ARCH_ARM64
+-    xx_pad_config.ukernel = (xnn_pad_ukernel_fn) xnn_xx_pad_ukernel__neon;
+-    xx_pad_config.row_tile = 1;
+-  #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
+-    xx_pad_config.ukernel = (xnn_pad_ukernel_fn) xnn_xx_pad_ukernel__sse2;
+-    xx_pad_config.row_tile = 1;
+-  #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
+-    xx_pad_config.ukernel = (xnn_pad_ukernel_fn) xnn_xx_pad_ukernel__wasmsimd;
+-    xx_pad_config.row_tile = 1;
+-  #elif XNN_ARCH_WASM
+-    xx_pad_config.ukernel = (xnn_pad_ukernel_fn) xnn_xx_pad_ukernel__scalar;
+-    xx_pad_config.row_tile = 1;
+-  #elif XNN_ARCH_RISCV
+-    xx_pad_config.ukernel = (xnn_pad_ukernel_fn) xnn_xx_pad_ukernel__scalar;
+-    xx_pad_config.row_tile = 1;
+-  #else
+-    #error "Unsupported architecture"
+-  #endif
+-}
++// static void init_xx_pad_config(void) {
++//   #if XNN_ARCH_ARM
++//     const struct xnn_hardware_config* hardware_config = xnn_init_hardware_config();
++//     assert(hardware_config != NULL);
++//     if (hardware_config->use_arm_neon) {
++//       xx_pad_config.ukernel = (xnn_pad_ukernel_fn) xnn_xx_pad_ukernel__neon;
++//       xx_pad_config.row_tile = 1;
++//     } else if (!XNN_PLATFORM_MOBILE) {
++//       xx_pad_config.ukernel = (xnn_pad_ukernel_fn) xnn_xx_pad_ukernel__scalar;
++//       xx_pad_config.row_tile = 1;
++//     }
++//   #elif XNN_ARCH_ARM64
++//     xx_pad_config.ukernel = (xnn_pad_ukernel_fn) xnn_xx_pad_ukernel__neon;
++//     xx_pad_config.row_tile = 1;
++//   #elif XNN_ARCH_X86 || XNN_ARCH_X86_64
++//     xx_pad_config.ukernel = (xnn_pad_ukernel_fn) xnn_xx_pad_ukernel__sse2;
++//     xx_pad_config.row_tile = 1;
++//   #elif XNN_ARCH_WASMSIMD || XNN_ARCH_WASMRELAXEDSIMD
++//     xx_pad_config.ukernel = (xnn_pad_ukernel_fn) xnn_xx_pad_ukernel__wasmsimd;
++//     xx_pad_config.row_tile = 1;
++//   #elif XNN_ARCH_WASM
++//     xx_pad_config.ukernel = (xnn_pad_ukernel_fn) xnn_xx_pad_ukernel__scalar;
++//     xx_pad_config.row_tile = 1;
++//   #elif XNN_ARCH_RISCV
++//     xx_pad_config.ukernel = (xnn_pad_ukernel_fn) xnn_xx_pad_ukernel__scalar;
++//     xx_pad_config.row_tile = 1;
++//   #else
++//     #error "Unsupported architecture"
++//   #endif
++// }
+ 
+ #if XNN_PLATFORM_WINDOWS
+   static BOOL CALLBACK init_xx_pad_config_windows(PINIT_ONCE init_once, PVOID parameter, PVOID* context) {
+-    init_xx_pad_config();
++    //init_xx_pad_config();
+     return TRUE;
+   }
+ #endif
+-- 
+2.42.0.windows.1
+
diff --git a/third_party/0001-nsync-changes.patch b/third_party/0001-nsync-changes.patch
new file mode 100644
index 00000000000..98852d34af5
--- /dev/null
+++ b/third_party/0001-nsync-changes.patch
@@ -0,0 +1,126 @@
+From a41f0f8b014627bfeff6a08ca51f63ae59085c7a Mon Sep 17 00:00:00 2001
+From: Utkarsh Mishra <quic_utkarshm@quicnic.com>
+Date: Mon, 11 Dec 2023 23:52:07 +0530
+Subject: [PATCH] nsync changes
+
+---
+ BUILD | 28 ++++++++++++++++++++++++++++
+ 1 file changed, 28 insertions(+)
+
+diff --git a/BUILD b/BUILD
+index 8b99116..68b3bd3 100644
+--- a/BUILD
++++ b/BUILD
+@@ -91,6 +91,11 @@ config_setting(
+     values = {"cpu": "x64_windows"},
+ )
+ 
++config_setting(
++    name = "msvc_windows_arm64",
++    values = {"cpu": "x64_arm64_windows"},
++)
++
+ config_setting(
+     name = "freebsd",
+     values = {"cpu": "freebsd"},
+@@ -126,6 +131,7 @@ NSYNC_OPTS_GENERIC = select({
+     ":android_arm": ["-I" + pkg_path_name() + "/platform/arm"],
+     ":android_arm64": ["-I" + pkg_path_name() + "/platform/aarch64"],
+     ":msvc_windows_x86_64": ["-I" + pkg_path_name() + "/platform/x86_64"],
++    ":msvc_windows_arm64": ["-I" + pkg_path_name() + "/platform/aarch64"],
+     "//conditions:default": [],
+ }) + [
+     "-I" + pkg_path_name() + "/public",
+@@ -134,6 +140,8 @@ NSYNC_OPTS_GENERIC = select({
+ ] + select({
+     ":msvc_windows_x86_64": [
+     ],
++    ":msvc_windows_arm64": [
++    ],
+     ":freebsd": ["-pthread"],
+     "//conditions:default": [
+         "-D_POSIX_C_SOURCE=200809L",
+@@ -159,6 +167,7 @@ NSYNC_OPTS = select({
+     ":android_arm": ["-I" + pkg_path_name() + "/platform/linux"],
+     ":android_arm64": ["-I" + pkg_path_name() + "/platform/linux"],
+     ":msvc_windows_x86_64": ["-I" + pkg_path_name() + "/platform/win32"],
++    ":msvc_windows_arm64": ["-I" + pkg_path_name() + "/platform/win32"],
+     "//conditions:default": [],
+ }) + select({
+     # Select the compiler include directory.
+@@ -177,6 +186,7 @@ NSYNC_OPTS = select({
+     ":android_arm": ["-I" + pkg_path_name() + "/platform/gcc"],
+     ":android_arm64": ["-I" + pkg_path_name() + "/platform/gcc"],
+     ":msvc_windows_x86_64": ["-I" + pkg_path_name() + "/platform/msvc"],
++    ":msvc_windows_arm64": ["-I" + pkg_path_name() + "/platform/msvc"],
+ }) + select({
+     # Apple deprecated their atomics library, yet recent versions have no
+     # working version of stdatomic.h; so some recent versions need one, and
+@@ -191,6 +201,9 @@ NSYNC_OPTS_CPP = select({
+     ":msvc_windows_x86_64": [
+         "/TP",
+     ],
++    ":msvc_windows_arm64": [
++        "/TP",
++    ],
+     "//conditions:default": [
+         "-x",
+         "c++",
+@@ -222,18 +235,24 @@ NSYNC_OPTS_CPP = select({
+         "-I" + pkg_path_name() + "/platform/win32",
+         "-I" + pkg_path_name() + "/platform/msvc",
+     ],
++    ":msvc_windows_arm64": [
++        "-I" + pkg_path_name() + "/platform/win32",
++        "-I" + pkg_path_name() + "/platform/msvc",
++    ],
+     "//conditions:default": ["-I" + pkg_path_name() + "/platform/gcc"],
+ }) + NSYNC_OPTS_GENERIC
+ 
+ # Link options (for tests) built in C (rather than C++11).
+ NSYNC_LINK_OPTS = select({
+     ":msvc_windows_x86_64": [],
++    ":msvc_windows_arm64": [],
+     "//conditions:default": ["-pthread"],
+ })
+ 
+ # Link options (for tests) built in C++11 (rather than C).
+ NSYNC_LINK_OPTS_CPP = select({
+     ":msvc_windows_x86_64": [],
++    ":msvc_windows_arm64": [],
+     "//conditions:default": ["-pthread"],
+ })
+ 
+@@ -381,6 +400,7 @@ NSYNC_SRC_PLATFORM = select({
+     ":android_arm": NSYNC_SRC_ANDROID,
+     ":android_arm64": NSYNC_SRC_ANDROID,
+     ":msvc_windows_x86_64": NSYNC_SRC_WINDOWS,
++    ":msvc_windows_arm64": NSYNC_SRC_WINDOWS,
+ })
+ 
+ # C++11-specific (OS and architecture independent) library source.
+@@ -415,6 +435,13 @@ NSYNC_SRC_PLATFORM_CPP = [
+         "platform/win32/src/pthread_key_win32.cc",
+         "platform/win32/src/per_thread_waiter.c",
+     ],
++    ":msvc_windows_arm64": [
++        "platform/win32/src/clock_gettime.c",
++        # Windows has no thread-specific data with thread-exit destructors; we
++        # must emulate it with C++ per-thread class destructors.
++        "platform/win32/src/pthread_key_win32.cc",
++        "platform/win32/src/per_thread_waiter.c",
++    ],
+     # It's dangerous to use C++ class destructors if we can avoid it, because
+     # nsync may be linked into the address space multiple times.
+     "//conditions:default": ["platform/posix/src/per_thread_waiter.c"],
+@@ -527,6 +554,7 @@ NSYNC_TEST_SRC_PLATFORM = select({
+     ":android_arm": NSYNC_TEST_SRC_ANDROID,
+     ":android_arm64": NSYNC_TEST_SRC_ANDROID,
+     ":msvc_windows_x86_64": NSYNC_TEST_SRC_WINDOWS,
++    ":msvc_windows_arm64": NSYNC_TEST_SRC_WINDOWS,
+ })
+ 
+ # C++11-specific (OS and architecture independent) test library source.
+-- 
+2.42.0.windows.1
+
diff --git a/third_party/0001-pthreadpool-changes.patch b/third_party/0001-pthreadpool-changes.patch
new file mode 100644
index 00000000000..e4ed37a4715
--- /dev/null
+++ b/third_party/0001-pthreadpool-changes.patch
@@ -0,0 +1,53 @@
+From 0161522110a7744f97e44b4018c4e9f01c330ee4 Mon Sep 17 00:00:00 2001
+From: Utkarsh Mishra <quic_utkarshm@quicnic.com>
+Date: Mon, 11 Dec 2023 23:12:31 +0530
+Subject: [PATCH] pthreadpool changes
+
+---
+ BUILD.bazel | 10 ++++++++++
+ 1 file changed, 10 insertions(+)
+
+diff --git a/BUILD.bazel b/BUILD.bazel
+index 40c5b9f..44dd5f7 100644
+--- a/BUILD.bazel
++++ b/BUILD.bazel
+@@ -46,12 +46,14 @@ cc_library(
+         ":watchos": INTERNAL_HDRS + GCD_IMPL_SRCS,
+         ":tvos": INTERNAL_HDRS + GCD_IMPL_SRCS,
+         ":windows_x86_64": INTERNAL_HDRS + WINDOWS_IMPL_SRCS,
++        ":windows_arm64": INTERNAL_HDRS + WINDOWS_IMPL_SRCS,
+         "//conditions:default": INTERNAL_HDRS + PTHREADS_IMPL_SRCS,
+     }) + select({
+         ":linux_x86_64": ARCH_SPECIFIC_SRCS,
+         ":android_x86": ARCH_SPECIFIC_SRCS,
+         ":android_x86_64": ARCH_SPECIFIC_SRCS,
+         ":windows_x86_64": ARCH_SPECIFIC_SRCS,
++        ":windows_arm64": ARCH_SPECIFIC_SRCS,
+         ":macos_x86": ARCH_SPECIFIC_SRCS,
+         ":macos_x86_64": ARCH_SPECIFIC_SRCS,
+         ":macos_arm64": ARCH_SPECIFIC_SRCS,
+@@ -107,6 +109,7 @@ cc_library(
+         ":android_x86": ["-DPTHREADPOOL_USE_FASTPATH=1"],
+         ":android_x86_64": ["-DPTHREADPOOL_USE_FASTPATH=1"],
+         ":windows_x86_64": ["-DPTHREADPOOL_USE_FASTPATH=1"],
++        ":windows_arm64": ["-DPTHREADPOOL_USE_FASTPATH=1"],
+         ":macos_x86": ["-DPTHREADPOOL_USE_FASTPATH=1"],
+         ":macos_x86_64": ["-DPTHREADPOOL_USE_FASTPATH=1"],
+         ":macos_arm64": ["-DPTHREADPOOL_USE_FASTPATH=1"],
+@@ -401,6 +404,13 @@ config_setting(
+     },
+ )
+ 
++config_setting(
++    name = "windows_arm64",
++    values = {
++        "cpu": "x64_arm64_windows",
++    },
++)
++
+ config_setting(
+     name = "emscripten",
+     values = {
+-- 
+2.42.0.windows.1
+
diff --git a/third_party/farmhash/farmhash.BUILD b/third_party/farmhash/farmhash.BUILD
index 4b8464684ae..7d8aabb8ccd 100644
--- a/third_party/farmhash/farmhash.BUILD
+++ b/third_party/farmhash/farmhash.BUILD
@@ -5,7 +5,7 @@ exports_files(["COPYING"])
 config_setting(
     name = "windows",
     values = {
-        "cpu": "x64_windows",
+        "cpu": "x64_arm64_windows",
     },
 )
 
diff --git a/third_party/gif_fix_strtok_r.patch b/third_party/gif_fix_strtok_r.patch
index c9c9c30c41f..995c021b3e6 100644
--- a/third_party/gif_fix_strtok_r.patch
+++ b/third_party/gif_fix_strtok_r.patch
@@ -13,3 +13,17 @@ diff -r -u ./fixed_gif_font.c ./gif_font.c
  /*****************************************************************************
   Ascii 8 by 8 regular font - only first 128 characters are supported.
  *****************************************************************************/
+
+diff --git a/gif_hash.h b/gif_hash.h
+index 6a1b585..29627ee 100644
+--- a/gif_hash.h
++++ b/gif_hash.h
+@@ -9,7 +9,7 @@ SPDX-License-Identifier: MIT
+ #ifndef _GIF_HASH_H_
+ #define _GIF_HASH_H_
+ 
+-#include <unistd.h>
++//#include <unistd.h>
+ #include <stdint.h>
+ 
+ #define HT_SIZE			8192	   /* 12bits = 4096 or twice as big! */
\ No newline at end of file
diff --git a/third_party/jpeg/jpeg.BUILD b/third_party/jpeg/jpeg.BUILD
index 9f61f9e31e5..38edc52c27e 100644
--- a/third_party/jpeg/jpeg.BUILD
+++ b/third_party/jpeg/jpeg.BUILD
@@ -20,7 +20,7 @@ libjpegturbo_copts = select({
         "-fPIC",
         "-w",
     ],
-    ":windows": WIN_COPTS,
+    ":windows_arm64": WIN_COPTS,
     "//conditions:default": [
         "-O3",
         "-w",
@@ -132,7 +132,7 @@ cc_library(
         ":armeabi-v7a": [":simd_armv7a"],
         ":arm64-v8a": [":simd_armv8a"],
         ":linux_ppc64le": [":simd_altivec"],
-        ":windows": [":simd_win_x86_64"],
+        ":windows_arm64": [":simd_none"],
         "//conditions:default": [":simd_none"],
     }),
 )
@@ -668,7 +668,7 @@ genrule(
     ],
     outs = ["jconfig.h"],
     cmd = select({
-        ":windows": "cp $(location jconfig_win.h) $@",
+        ":windows_arm64": "cp $(location jconfig_win.h) $@",
         ":k8": "cp $(location jconfig_nowin_simd.h) $@",
         ":armeabi-v7a": "cp $(location jconfig_nowin_simd.h) $@",
         ":arm64-v8a": "cp $(location jconfig_nowin_simd.h) $@",
@@ -685,7 +685,7 @@ genrule(
     ],
     outs = ["jconfigint.h"],
     cmd = select({
-        ":windows": "cp $(location jconfigint_win.h) $@",
+        ":windows_arm64": "cp $(location jconfigint_win.h) $@",
         "//conditions:default": "cp $(location jconfigint_nowin.h) $@",
     }),
 )
@@ -799,6 +799,11 @@ config_setting(
     values = {"cpu": "x64_windows"},
 )
 
+config_setting(
+    name = "windows_arm64",
+    values = {"cpu": "x64_arm64_windows"},
+)
+
 config_setting(
     name = "linux_ppc64le",
     flag_values = {":noasm": "no"},
diff --git a/third_party/snappy.BUILD b/third_party/snappy.BUILD
index 9bcff36a2a9..afc53fba4e7 100644
--- a/third_party/snappy.BUILD
+++ b/third_party/snappy.BUILD
@@ -19,17 +19,13 @@ cc_library(
     ],
     hdrs = ["snappy.h"],
     copts = ["-DHAVE_CONFIG_H"] + select({
-        "@org_tensorflow//tensorflow/tsl:windows": [],
+        "@org_tensorflow//tensorflow/tsl:windows_arm64": [],
         "//conditions:default": [
-            "-fno-exceptions",
-            "-Wno-sign-compare",
-            "-Wno-shift-negative-value",
-            "-Wno-implicit-function-declaration",
         ],
     }),
     defines = select({
-        "@org_tensorflow//tensorflow/tsl:windows": [],
-        "//conditions:default": ["HAVE_SYS_UIO_H"],
+        "@org_tensorflow//tensorflow/tsl:windows_arm64": [],
+        "//conditions:default": [],
     }),
 )
 
diff --git a/third_party/zlib.BUILD b/third_party/zlib.BUILD
index 49e44f95019..7868146901b 100644
--- a/third_party/zlib.BUILD
+++ b/third_party/zlib.BUILD
@@ -33,7 +33,7 @@ cc_library(
     ],
     hdrs = ["zlib.h"],
     copts = select({
-        "@org_tensorflow//tensorflow/tsl:windows": [],
+        "@org_tensorflow//tensorflow/tsl:windows_arm64": [],
         "//conditions:default": [
             "-Wno-shift-negative-value",
             "-DZ_HAVE_UNISTD_H",
-- 
2.42.0.windows.1

