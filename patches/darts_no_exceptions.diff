--- include/darts.h
+++ include/darts.h
@@ -14,10 +14,14 @@
 // what() as well as that of <std::exception>.
 #define DARTS_INT_TO_STR(value) #value
 #define DARTS_LINE_TO_STR(line) DARTS_INT_TO_STR(line)
 #define DARTS_LINE_STR DARTS_LINE_TO_STR(__LINE__)
-#define DARTS_THROW(msg) throw Darts::Details::Exception( \
-  __FILE__ ":" DARTS_LINE_STR ": exception: " msg)
+#include <cstdio>
+#include <cstdlib>
+#define DARTS_THROW(msg) do { \
+  std::fprintf(stderr, "Darts error: %s (%s:%d)\n", msg, __FILE__, __LINE__); \
+  std::abort(); \
+} while (0)
 
 namespace Darts {
 
 // The following namespace hides the internal types and classes.
@@ -85,17 +89,9 @@
 // constant or static string because an <Exception> keeps only a pointer to
 // that string.
 class Exception : public std::exception {
  public:
-  explicit Exception(const char *msg = NULL) throw() : msg_(msg) {}
-  Exception(const Exception &rhs) throw() : msg_(rhs.msg_) {}
-  virtual ~Exception() throw() {}
 
-  // <Exception> overrides what() of <std::exception>.
-  virtual const char *what() const throw() {
-    return (msg_ != NULL) ? msg_ : "";
-  }
-
  private:
   const char *msg_;
 
   // Disallows operator=.
@@ -375,16 +371,11 @@
     }
   }
 
   unit_type *buf;
-  try {
-    buf = new unit_type[size];
-    for (id_type i = 0; i < 256; ++i) {
-      buf[i] = units[i];
-    }
-  } catch (const std::bad_alloc &) {
-    std::fclose(file);
-    DARTS_THROW("failed to open double-array: std::bad_alloc");
+  buf = new unit_type[size];
+  for (id_type i = 0; i < 256; ++i) {
+    buf[i] = units[i];
   }
 
   if (size > 256) {
     if (std::fread(buf + 256, unit_size(), size - 256, file) != size - 256) {
@@ -701,13 +692,9 @@
     }
   }
 
   AutoArray<char> buf;
-  try {
-    buf.reset(new char[sizeof(T) * capacity]);
-  } catch (const std::bad_alloc &) {
-    DARTS_THROW("failed to resize pool: std::bad_alloc");
-  }
+  buf.reset(new char[sizeof(T) * capacity]);
 
   if (size_ > 0) {
     T *src = reinterpret_cast<T *>(&buf_[0]);
     T *dest = reinterpret_cast<T *>(&buf[0]);
@@ -840,13 +827,9 @@
   }
 };
 
 inline void BitVector::build() {
-  try {
-    ranks_.reset(new id_type[units_.size()]);
-  } catch (const std::bad_alloc &) {
-    DARTS_THROW("failed to build rank index: std::bad_alloc");
-  }
+  ranks_.reset(new id_type[units_.size()]);
 
   num_ones_ = 0;
   for (std::size_t i = 0; i < units_.size(); ++i) {
     ranks_[i] = num_ones_;
