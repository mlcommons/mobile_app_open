/* Copyright 2019 The MLPerf Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/
syntax = "proto2";

package mlperf.mobile;

option cc_enable_arenas = true;
option java_multiple_files = true;
option java_package = "org.mlperf.proto";

// Config of a backend.
//
// Next ID: 3
message BackendSetting {
  // Common setting for all benchmarks.
  repeated Setting common_setting = 1;
  // Setting that is specialized for each benchmark.
  repeated BenchmarkSetting benchmark_setting = 2;
}

// Config of a benchmark.
//
// Next ID: 3
message BenchmarkSetting {
  // Id of the benchmark. Must match the id in ModelConfig::id.
  required string benchmark_id = 1;
  // Backend custom model settings
  repeated CustomSetting custom_setting = 2;
  required string src = 3;
  // accelerator is passed to the backend
  required string accelerator = 4;
  // accelerator_desc is only used by the UI
  required string accelerator_desc = 5;
  // configuration is only used by the UI
  required string configuration = 6;
  // batch_size is passed to the backend
  optional int32 batch_size = 7;
}

// Common setting of each benchmark
// These are UI selectable and provide
// a list of acceptable values
//
// Next ID: 5
message Setting {
  message Value {
    required string value = 1;
    required string name = 2;
  }
  // Id of this setting.
  required string id = 1;
  // Name of this setting.
  required string name = 2;
  // Current value of this setting.
  required Value value = 3;
  // Acceptable value set of this setting.
  repeated Value acceptable_value = 4;
}

// CustomSetting are backend specific settings for a particular benchmark
// that are not used in the app front end or UI
message CustomSetting {
  // Id of this setting.
  required string id = 1;
  // Current value of this setting.
  required string value = 2;
}

// A list of settings. This is intended to contain both common settings and
// benchmark settings for a specific benchmark.
// This structure is converted to a different C structure before it is sent
// to the vendor backend
//
// Next ID: 2
message SettingList {
  repeated Setting setting = 1;
  optional BenchmarkSetting benchmark_setting = 2;
}
