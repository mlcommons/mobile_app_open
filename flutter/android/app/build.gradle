def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    throw new GradleException("versionCode not found. Define flutter.versionCode in the local.properties file.")
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    throw new GradleException("versionName not found. Define flutter.versionName in the local.properties file.")
}

apply plugin: 'com.android.application'
// START: FlutterFire Configuration
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
// END: FlutterFire Configuration
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 33

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "org.mlcommons.android.mlperfbench"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

   signingConfigs {
       release {
           keyAlias System.env['SIGNING_KEY_ALIAS']
           keyPassword System.env['SIGNING_KEY_PASSWORD']
           storeFile System.env['SIGNING_STORE_FILE'] ? file(System.env['SIGNING_STORE_FILE']) : null
           storePassword System.env['SIGNING_STORE_PASSWORD']
       }
   }

    buildTypes {
        release {
            // https://docs.flutter.dev/deployment/android#sign-the-app
            if (System.env['SIGNING_FOR_RELEASE'] == 'true') {
                println 'Using signingConfigs.release'
                signingConfig signingConfigs.release
            } else {
                println 'Using signingConfigs.debug'
                signingConfig signingConfigs.debug
            }
            // By default we do not upload mapping file to Firebase
            firebaseCrashlytics {
                if (System.env['FIREBASE_CRASHLYTICS_ENABLED'] == 'true') {
                    println 'mappingFileUploadEnabled set to true'
                    mappingFileUploadEnabled true
                } else {
                    println 'mappingFileUploadEnabled set to false'
                    mappingFileUploadEnabled false
                }
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
