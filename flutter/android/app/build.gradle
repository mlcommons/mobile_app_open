plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    throw new RuntimeException("versionCode not found. Define flutter.versionCode in the local.properties file.")
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    throw new RuntimeException("versionName not found. Define flutter.versionName in the local.properties file.")
}

android {
    namespace "org.mlcommons.android.mlperfbench"
    compileSdkVersion 34

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // https://stackoverflow.com/a/70873876
    packagingOptions {
        jniLibs {
            useLegacyPackaging = true
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "org.mlcommons.android.mlperfbench"
        minSdkVersion 30
        targetSdkVersion 35
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
          abiFilters "arm64-v8a", "armeabi-v7a"
          debugSymbolLevel 'FULL'
        }
    }

    signingConfigs {
        release {
            keyAlias System.env['SIGNING_KEY_ALIAS']
            keyPassword System.env['SIGNING_KEY_PASSWORD']
            storeFile System.env['SIGNING_STORE_FILE'] ? file(System.env['SIGNING_STORE_FILE']) : null
            storePassword System.env['SIGNING_STORE_PASSWORD']
        }
    }

    buildTypes {
        release {
            // https://docs.flutter.dev/deployment/android#sign-the-app
            if (System.env['SIGNING_FOR_RELEASE'] == 'true') {
                println 'Using signingConfigs.release'
                signingConfig signingConfigs.release
            } else {
                println 'Using signingConfigs.debug'
                signingConfig signingConfigs.debug
            }
            // By default we do not upload mapping file to Firebase
            firebaseCrashlytics {
                if (System.env['FIREBASE_CRASHLYTICS_ENABLED'] == 'true') {
                    println 'mappingFileUploadEnabled and nativeSymbolUploadEnabled set to true'
                    mappingFileUploadEnabled true
                    nativeSymbolUploadEnabled true
                    unstrippedNativeLibsDir file("../../../bazel-bin")
                } else {
                    println 'mappingFileUploadEnabled and nativeSymbolUploadEnabled set to false'
                    mappingFileUploadEnabled false
                    nativeSymbolUploadEnabled false
                }
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // https://firebase.google.com/support/release-notes/android
    implementation(platform("com.google.firebase:firebase-bom:33.16.0"))
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation("com.google.firebase:firebase-appcheck-playintegrity")
    implementation("com.google.firebase:firebase-appcheck-debug")
    implementation("com.google.firebase:firebase-crashlytics")
    implementation("com.google.firebase:firebase-crashlytics-ndk")
}

afterEvaluate {
    if (System.env['FIREBASE_CRASHLYTICS_ENABLED'] == 'true') {
        tasks.named('generateCrashlyticsSymbolFileRelease') {
            dependsOn 'mergeReleaseNativeLibs'
        }
        tasks.configureEach {
            if (name == 'assembleRelease' || name == 'bundleRelease') {
                finalizedBy 'uploadCrashlyticsSymbolFileRelease'
            }
        }
    }
}
