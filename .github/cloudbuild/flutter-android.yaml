substitutions:
  _IMAGE_NAME: mlperf-mobile-flutter-android
# Building apks with flutter requires a lot of memory.
# Builds on standard machines with 4GB of RAM can unexpectedly hang.
# Also the build is mostly CPU-intensive, so using 8-core machines
# reduces build time up to 3 times.
options:
 machineType: 'E2_HIGHCPU_8'

steps:
# We need this step to correctly identify dockerfile tag
- id: fetch-repo-history
  name: gcr.io/cloud-builders/git
  timeout: 10s
  args:
  - fetch
  - --unshallow
# Download DOCKERFILE_COMMIT tag if it exists to skip docker image generation,
#   or download the :latest tag and use it as a cache,
#   or skip downloading if :latest doesn't exist yet.
# This being a separate step helps readability in Cloud Build console.
- id: cache-old-image
  name: gcr.io/cloud-builders/docker
  timeout: 600s # 10 minutes
  entrypoint: bash
  args:
  - -xc
  - |
    DOCKERFILE_COMMIT=$$(git log -n 1 --pretty=format:%H -- flutter/android/docker/Dockerfile)
    docker pull gcr.io/$PROJECT_ID/$_IMAGE_NAME:$$DOCKERFILE_COMMIT \
    || docker pull gcr.io/$PROJECT_ID/$_IMAGE_NAME:latest \
    || true
# This step overrides the :latest tag of the image, so that we can use it in later steps.
- id: build-new-image
  name: gcr.io/cloud-builders/docker
  timeout: 1800s # 30 minutes
  entrypoint: bash
  args:
  - -xc
  - |
    DOCKERFILE_COMMIT=$$(git log -n 1 --pretty=format:%H -- flutter/android/docker/Dockerfile)
    docker build \
      -t gcr.io/$PROJECT_ID/$_IMAGE_NAME:$$DOCKERFILE_COMMIT \
      -t gcr.io/$PROJECT_ID/$_IMAGE_NAME:latest \
      --cache-from gcr.io/$PROJECT_ID/$_IMAGE_NAME:$$DOCKERFILE_COMMIT \
      --cache-from gcr.io/$PROJECT_ID/$_IMAGE_NAME:latest \
      flutter/android/docker
# If the build fails artifacts are not uploaded automatically, so we save them manually before build
- id: push-new-image
  name: gcr.io/cloud-builders/docker
  timeout: 1800s # 30 minutes
  entrypoint: bash
  args:
  - -xc
  - |
    DOCKERFILE_COMMIT=$$(git log -n 1 --pretty=format:%H -- flutter/android/docker/Dockerfile)
    docker push gcr.io/$PROJECT_ID/$_IMAGE_NAME:$$DOCKERFILE_COMMIT
    docker push gcr.io/$PROJECT_ID/$_IMAGE_NAME:latest
- id: build-apks
  name: gcr.io/$PROJECT_ID/$_IMAGE_NAME:latest
  # Image upload usually takes only few seconds.
  # However, if we generated a new image and the build failed, it can cancel the upload.
  # Let's wait for the upload to finish before starting the actual build.
  waitFor: []
  timeout: 10800s # 3 hours
  entrypoint: bash
  env:
  - BAZEL_CACHE_ARG=--remote_cache=https://storage.googleapis.com/$_BAZEL_CACHE_BUCKET --google_default_credentials
  args:
  - -xc
  - |
    cd flutter || exit $?
    make ci/android/test_apk || exit $?

    mkdir -p /workspace/output/artifacts || exit $?
    cp /workspace/flutter/build/app/outputs/flutter-apk/app-release.apk /workspace/output/artifacts/mlperf_app_release.apk || exit $?
    cp /workspace/flutter/build/app/outputs/apk/debug/app-debug.apk /workspace/output/artifacts/mlperf_app_test_main.apk || exit $?
    cp /workspace/flutter/build/app/outputs/apk/androidTest/debug/app-debug-androidTest.apk /workspace/output/artifacts/mlperf_app_test_helper.apk || exit $?
- id: instrument-test-on-firebase
  name: gcr.io/cloud-builders/gcloud
  waitFor:
  - build-apks
  timeout: 3600s # 1 hour
  entrypoint: bash
  args:
  - -xc
  - |
    # redfin is Pixel 5e
    gcloud firebase test android run \
      --type instrumentation \
      --app output/artifacts/mlperf_app_test_main.apk \
      --test output/artifacts/mlperf_app_test_helper.apk \
      --timeout 45m \
      --device model=redfin,version=30,locale=en,orientation=portrait
- id: crawler-test-on-firebase
  name: gcr.io/cloud-builders/gcloud
  waitFor:
  - build-apks
  timeout: 3600s # 1 hour
  entrypoint: bash
  args:
  - -xc
  - |
    # x1q is SM-G981U1 (Samsung Galaxy S20 5G)
    gcloud firebase test android run \
      --type robo \
      --app output/artifacts/mlperf_app_release.apk \
      --device model=x1q,version=29,locale=en,orientation=portrait \
      --timeout 90s

# We uploaded both tags earlier, but this option also adds them to the artifacts page of the build
images:
- gcr.io/$PROJECT_ID/$_IMAGE_NAME

artifacts:
  objects:
    location: gs://$_ARTIFACT_BUCKET/$_ARTIFACT_FOLDER/$COMMIT_SHA-flutter
    paths:
    - output/artifacts/mlperf_app_release.apk
    - output/artifacts/mlperf_app_test_main.apk
    - output/artifacts/mlperf_app_test_helper.apk

timeout: 18000s # 5 hours
