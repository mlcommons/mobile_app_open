substitutions:
  _BUILDER_IMAGE_NAME: mlperf-mobile-flutter-android
  _APK_DIR: /workspace/output/artifacts
  # allow to override trigger names
  _TFLITE_TEST_TRIGGER: android-test-tflite
  _PIXEL_TEST_TRIGGER: android-test-pixel

# Building apks with flutter requires a lot of memory.
# Builds on standard machines with 4GB of RAM can unexpectedly hang.
# Also the build is mostly CPU-intensive, so using 8-core machines
# reduces build time up to 3 times.
options:
  machineType: "E2_HIGHCPU_8"

steps:
  - id: set-up-repo
    name: gcr.io/cloud-builders/git
    timeout: 10s
    entrypoint: bash
    args:
      - -xc
      - |
        # non-master branches may contain large file that would slow down fetching
        git config remote.origin.fetch "+refs/heads/master:refs/remotes/origin/master" || exit 1

        # we need full commit history for docker builder image tag
        git fetch --unshallow || exit 1

        # next line is a fix for this issue https://github.com/actions/checkout/issues/766
        git config --global --add safe.directory '/image-workdir/flutter'
  - id: cache-old-image
    name: gcr.io/cloud-builders/docker
    timeout: 300s # 5 minutes
    entrypoint: bash
    args:
      - -xc
      - |
        # if :DOCKERFILE_COMMIT tag already exists we can skip the image build stage
        # else we can try to reuse the :latest image to skip the build partially
        DOCKERFILE_COMMIT=$$(git log -n 1 --pretty=format:%H -- flutter/android/docker/Dockerfile)
        docker pull gcr.io/$PROJECT_ID/$_BUILDER_IMAGE_NAME:$$DOCKERFILE_COMMIT \
        || docker pull gcr.io/$PROJECT_ID/$_BUILDER_IMAGE_NAME:latest \
        || true
  - id: build-new-image
    name: gcr.io/cloud-builders/docker
    timeout: 1800s # 30 minutes
    entrypoint: bash
    args:
      - -xc
      - |
        DOCKERFILE_COMMIT=$$(git log -n 1 --pretty=format:%H -- flutter/android/docker/Dockerfile)
        docker build \
          -t gcr.io/$PROJECT_ID/$_BUILDER_IMAGE_NAME:$$DOCKERFILE_COMMIT \
          -t gcr.io/$PROJECT_ID/$_BUILDER_IMAGE_NAME:latest \
          --cache-from gcr.io/$PROJECT_ID/$_BUILDER_IMAGE_NAME:$$DOCKERFILE_COMMIT \
          --cache-from gcr.io/$PROJECT_ID/$_BUILDER_IMAGE_NAME:latest \
          flutter/android/docker
  # If the build step fails artifacts won't be uploaded, so we push image manually before build
  - id: push-new-image
    name: gcr.io/cloud-builders/docker
    timeout: 600s # 10 minutes
    entrypoint: bash
    args:
      - -xc
      - |
        DOCKERFILE_COMMIT=$$(git log -n 1 --pretty=format:%H -- flutter/android/docker/Dockerfile)
        docker push gcr.io/$PROJECT_ID/$_BUILDER_IMAGE_NAME:$$DOCKERFILE_COMMIT
        docker push gcr.io/$PROJECT_ID/$_BUILDER_IMAGE_NAME:latest
  - id: build-native-libs
    name: gcr.io/$PROJECT_ID/$_BUILDER_IMAGE_NAME:latest
    # if build fails while image is still uploading, uploading will be cancelled
    waitFor: []
    timeout: 5400s # 1.5 hours
    entrypoint: bash
    env:
      - BAZEL_CACHE_ARG=--remote_cache=https://storage.googleapis.com/$_BAZEL_CACHE_BUCKET --google_default_credentials
      - WITH_TFLITE=1
      - WITH_PIXEL=1
    args:
      - -xc
      - |
        make flutter/android/libs/build
  - id: build-tflite-apks
    name: gcr.io/$PROJECT_ID/$_BUILDER_IMAGE_NAME:latest
    timeout: 600s # 10 minutes
    entrypoint: bash
    env:
      - OFFICIAL_BUILD=true
      - FLUTTER_BUILD_NUMBER=0
      - FLUTTER_FORCE_PUB_GET=1
      - FLUTTER_ANDROID_APK_FOLDER=$_APK_DIR/tflite
      - FLUTTER_ANDROID_APK_RELEASE=mlperfbench-t-$SHORT_SHA.apk
      - FLUTTER_ANDROID_APK_TEST_MAIN=test-main-t-$SHORT_SHA.apk
      - FLUTTER_ANDROID_APK_TEST_HELPER=test-helper-t-$SHORT_SHA.apk
      - PERF_TEST=false
    args:
      - -xc
      - |
        make flutter/android/libs/copy flutter/prepare || exit $?
        make flutter/android/apk flutter/android/test-apk || exit $?
        cat >request-tflite.json <<EOL
        {
          "substitutions": {
            "_APK_LOCATION": "$_ARTIFACT_UPLOAD_PATH",
            "_APK_SUBFOLDER": "tflite",
            "_APK_RELEASE_NAME": "$$FLUTTER_ANDROID_APK_RELEASE",
            "_APK_TEST_MAIN_NAME": "$$FLUTTER_ANDROID_APK_TEST_MAIN",
            "_APK_TEST_HELPER_NAME": "$$FLUTTER_ANDROID_APK_TEST_HELPER"
          },
          "commitSha": "$COMMIT_SHA"
        }
        EOL
  - id: build-pixel-apks
    name: gcr.io/$PROJECT_ID/$_BUILDER_IMAGE_NAME:latest
    timeout: 600s # 10 minutes
    entrypoint: bash
    env:
      - OFFICIAL_BUILD=true
      - FLUTTER_BUILD_NUMBER=0
      - FLUTTER_FORCE_PUB_GET=1
      - FLUTTER_ANDROID_APK_FOLDER=$_APK_DIR/pixel
      - FLUTTER_ANDROID_APK_RELEASE=mlperfbench-p-$SHORT_SHA.apk
      - FLUTTER_ANDROID_APK_TEST_MAIN=test-main-p-$SHORT_SHA.apk
      - FLUTTER_ANDROID_APK_TEST_HELPER=test-helper-p-$SHORT_SHA.apk
      - WITH_TFLITE=0
      - WITH_PIXEL=1
      - PERF_TEST=false
    args:
      - -xc
      - |
        make flutter/android/libs/copy flutter/prepare || exit $?
        make flutter/android/apk flutter/android/test-apk || exit $?
        cat >request-pixel.json <<EOL
        {
          "substitutions": {
            "_APK_LOCATION": "$_ARTIFACT_UPLOAD_PATH",
            "_APK_SUBFOLDER": "pixel",
            "_APK_RELEASE_NAME": "$$FLUTTER_ANDROID_APK_RELEASE",
            "_APK_TEST_MAIN_NAME": "$$FLUTTER_ANDROID_APK_TEST_MAIN",
            "_APK_TEST_HELPER_NAME": "$$FLUTTER_ANDROID_APK_TEST_HELPER"
          },
          "commitSha": "$COMMIT_SHA"
        }
        EOL
    # we need to upload apk artifacts manually to ensure that trigger-tests step always has apk available
  - id: upload-apks
    name: gcr.io/cloud-builders/gsutil
    timeout: 60s # 1 minute
    entrypoint: bash
    args:
      - -xc
      - |
        gsutil cp -r $_APK_DIR gs://$_ARTIFACT_UPLOAD_PATH
  - id: trigger-tests
    name: gcr.io/cloud-builders/gcloud
    timeout: 60s # 1 minute
    entrypoint: bash
    args:
      - -c # adding -x would expose auth token in logs
      - |
        AUTH_TOKEN=$(gcloud config config-helper --format='value(credential.access_token)')
        curl \
          -X POST \
          -T request-tflite.json \
          -H "Authorization: Bearer $$AUTH_TOKEN" \
          "https://cloudbuild.googleapis.com/v1/projects/$PROJECT_ID/triggers/$_TFLITE_TEST_TRIGGER:run"
        curl \
          -X POST \
          -T request-pixel.json \
          -H "Authorization: Bearer $$AUTH_TOKEN" \
          "https://cloudbuild.googleapis.com/v1/projects/$PROJECT_ID/triggers/$_PIXEL_TEST_TRIGGER:run"
  - id: print-artifact-links
    name: gcr.io/cloud-builders/gcloud
    timeout: 10s
    entrypoint: bash
    args:
      - -c
      - |
        echo
        echo apks folder:
        echo https://console.cloud.google.com/storage/browser/$_ARTIFACT_UPLOAD_PATH
        echo

# let's add image to the artifacts page of the build
images:
  - gcr.io/$PROJECT_ID/$_BUILDER_IMAGE_NAME

timeout: 7200s # 2 hours
